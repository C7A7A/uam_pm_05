
MIDI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004804  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  0800498c  0800498c  0001498c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080049d4  080049d4  00020064  2**0
                  CONTENTS
  4 .ARM          00000008  080049d4  080049d4  000149d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080049dc  080049dc  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080049dc  080049dc  000149dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080049e0  080049e0  000149e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  080049e4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000154  20000064  08004a48  00020064  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001b8  08004a48  000201b8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d162  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e76  00000000  00000000  0002d1f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ab0  00000000  00000000  0002f070  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009f8  00000000  00000000  0002fb20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002643c  00000000  00000000  00030518  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b6c0  00000000  00000000  00056954  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000eb407  00000000  00000000  00062014  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0014d41b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002bfc  00000000  00000000  0014d470  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000064 	.word	0x20000064
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004974 	.word	0x08004974

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000068 	.word	0x20000068
 80001c4:	08004974 	.word	0x08004974

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__aeabi_d2f>:
 8000964:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000968:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 800096c:	bf24      	itt	cs
 800096e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000972:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000976:	d90d      	bls.n	8000994 <__aeabi_d2f+0x30>
 8000978:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800097c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000980:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000984:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000988:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 800098c:	bf08      	it	eq
 800098e:	f020 0001 	biceq.w	r0, r0, #1
 8000992:	4770      	bx	lr
 8000994:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000998:	d121      	bne.n	80009de <__aeabi_d2f+0x7a>
 800099a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 800099e:	bfbc      	itt	lt
 80009a0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009a4:	4770      	bxlt	lr
 80009a6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009aa:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009ae:	f1c2 0218 	rsb	r2, r2, #24
 80009b2:	f1c2 0c20 	rsb	ip, r2, #32
 80009b6:	fa10 f30c 	lsls.w	r3, r0, ip
 80009ba:	fa20 f002 	lsr.w	r0, r0, r2
 80009be:	bf18      	it	ne
 80009c0:	f040 0001 	orrne.w	r0, r0, #1
 80009c4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009c8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009cc:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009d0:	ea40 000c 	orr.w	r0, r0, ip
 80009d4:	fa23 f302 	lsr.w	r3, r3, r2
 80009d8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009dc:	e7cc      	b.n	8000978 <__aeabi_d2f+0x14>
 80009de:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009e2:	d107      	bne.n	80009f4 <__aeabi_d2f+0x90>
 80009e4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80009e8:	bf1e      	ittt	ne
 80009ea:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80009ee:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80009f2:	4770      	bxne	lr
 80009f4:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80009f8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80009fc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a00:	4770      	bx	lr
 8000a02:	bf00      	nop

08000a04 <__aeabi_uldivmod>:
 8000a04:	b953      	cbnz	r3, 8000a1c <__aeabi_uldivmod+0x18>
 8000a06:	b94a      	cbnz	r2, 8000a1c <__aeabi_uldivmod+0x18>
 8000a08:	2900      	cmp	r1, #0
 8000a0a:	bf08      	it	eq
 8000a0c:	2800      	cmpeq	r0, #0
 8000a0e:	bf1c      	itt	ne
 8000a10:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000a14:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000a18:	f000 b96e 	b.w	8000cf8 <__aeabi_idiv0>
 8000a1c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a20:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a24:	f000 f806 	bl	8000a34 <__udivmoddi4>
 8000a28:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a2c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a30:	b004      	add	sp, #16
 8000a32:	4770      	bx	lr

08000a34 <__udivmoddi4>:
 8000a34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a38:	9d08      	ldr	r5, [sp, #32]
 8000a3a:	4604      	mov	r4, r0
 8000a3c:	468c      	mov	ip, r1
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	f040 8083 	bne.w	8000b4a <__udivmoddi4+0x116>
 8000a44:	428a      	cmp	r2, r1
 8000a46:	4617      	mov	r7, r2
 8000a48:	d947      	bls.n	8000ada <__udivmoddi4+0xa6>
 8000a4a:	fab2 f282 	clz	r2, r2
 8000a4e:	b142      	cbz	r2, 8000a62 <__udivmoddi4+0x2e>
 8000a50:	f1c2 0020 	rsb	r0, r2, #32
 8000a54:	fa24 f000 	lsr.w	r0, r4, r0
 8000a58:	4091      	lsls	r1, r2
 8000a5a:	4097      	lsls	r7, r2
 8000a5c:	ea40 0c01 	orr.w	ip, r0, r1
 8000a60:	4094      	lsls	r4, r2
 8000a62:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000a66:	0c23      	lsrs	r3, r4, #16
 8000a68:	fbbc f6f8 	udiv	r6, ip, r8
 8000a6c:	fa1f fe87 	uxth.w	lr, r7
 8000a70:	fb08 c116 	mls	r1, r8, r6, ip
 8000a74:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a78:	fb06 f10e 	mul.w	r1, r6, lr
 8000a7c:	4299      	cmp	r1, r3
 8000a7e:	d909      	bls.n	8000a94 <__udivmoddi4+0x60>
 8000a80:	18fb      	adds	r3, r7, r3
 8000a82:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000a86:	f080 8119 	bcs.w	8000cbc <__udivmoddi4+0x288>
 8000a8a:	4299      	cmp	r1, r3
 8000a8c:	f240 8116 	bls.w	8000cbc <__udivmoddi4+0x288>
 8000a90:	3e02      	subs	r6, #2
 8000a92:	443b      	add	r3, r7
 8000a94:	1a5b      	subs	r3, r3, r1
 8000a96:	b2a4      	uxth	r4, r4
 8000a98:	fbb3 f0f8 	udiv	r0, r3, r8
 8000a9c:	fb08 3310 	mls	r3, r8, r0, r3
 8000aa0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000aa4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000aa8:	45a6      	cmp	lr, r4
 8000aaa:	d909      	bls.n	8000ac0 <__udivmoddi4+0x8c>
 8000aac:	193c      	adds	r4, r7, r4
 8000aae:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000ab2:	f080 8105 	bcs.w	8000cc0 <__udivmoddi4+0x28c>
 8000ab6:	45a6      	cmp	lr, r4
 8000ab8:	f240 8102 	bls.w	8000cc0 <__udivmoddi4+0x28c>
 8000abc:	3802      	subs	r0, #2
 8000abe:	443c      	add	r4, r7
 8000ac0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ac4:	eba4 040e 	sub.w	r4, r4, lr
 8000ac8:	2600      	movs	r6, #0
 8000aca:	b11d      	cbz	r5, 8000ad4 <__udivmoddi4+0xa0>
 8000acc:	40d4      	lsrs	r4, r2
 8000ace:	2300      	movs	r3, #0
 8000ad0:	e9c5 4300 	strd	r4, r3, [r5]
 8000ad4:	4631      	mov	r1, r6
 8000ad6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ada:	b902      	cbnz	r2, 8000ade <__udivmoddi4+0xaa>
 8000adc:	deff      	udf	#255	; 0xff
 8000ade:	fab2 f282 	clz	r2, r2
 8000ae2:	2a00      	cmp	r2, #0
 8000ae4:	d150      	bne.n	8000b88 <__udivmoddi4+0x154>
 8000ae6:	1bcb      	subs	r3, r1, r7
 8000ae8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000aec:	fa1f f887 	uxth.w	r8, r7
 8000af0:	2601      	movs	r6, #1
 8000af2:	fbb3 fcfe 	udiv	ip, r3, lr
 8000af6:	0c21      	lsrs	r1, r4, #16
 8000af8:	fb0e 331c 	mls	r3, lr, ip, r3
 8000afc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000b00:	fb08 f30c 	mul.w	r3, r8, ip
 8000b04:	428b      	cmp	r3, r1
 8000b06:	d907      	bls.n	8000b18 <__udivmoddi4+0xe4>
 8000b08:	1879      	adds	r1, r7, r1
 8000b0a:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000b0e:	d202      	bcs.n	8000b16 <__udivmoddi4+0xe2>
 8000b10:	428b      	cmp	r3, r1
 8000b12:	f200 80e9 	bhi.w	8000ce8 <__udivmoddi4+0x2b4>
 8000b16:	4684      	mov	ip, r0
 8000b18:	1ac9      	subs	r1, r1, r3
 8000b1a:	b2a3      	uxth	r3, r4
 8000b1c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000b20:	fb0e 1110 	mls	r1, lr, r0, r1
 8000b24:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000b28:	fb08 f800 	mul.w	r8, r8, r0
 8000b2c:	45a0      	cmp	r8, r4
 8000b2e:	d907      	bls.n	8000b40 <__udivmoddi4+0x10c>
 8000b30:	193c      	adds	r4, r7, r4
 8000b32:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000b36:	d202      	bcs.n	8000b3e <__udivmoddi4+0x10a>
 8000b38:	45a0      	cmp	r8, r4
 8000b3a:	f200 80d9 	bhi.w	8000cf0 <__udivmoddi4+0x2bc>
 8000b3e:	4618      	mov	r0, r3
 8000b40:	eba4 0408 	sub.w	r4, r4, r8
 8000b44:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000b48:	e7bf      	b.n	8000aca <__udivmoddi4+0x96>
 8000b4a:	428b      	cmp	r3, r1
 8000b4c:	d909      	bls.n	8000b62 <__udivmoddi4+0x12e>
 8000b4e:	2d00      	cmp	r5, #0
 8000b50:	f000 80b1 	beq.w	8000cb6 <__udivmoddi4+0x282>
 8000b54:	2600      	movs	r6, #0
 8000b56:	e9c5 0100 	strd	r0, r1, [r5]
 8000b5a:	4630      	mov	r0, r6
 8000b5c:	4631      	mov	r1, r6
 8000b5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b62:	fab3 f683 	clz	r6, r3
 8000b66:	2e00      	cmp	r6, #0
 8000b68:	d14a      	bne.n	8000c00 <__udivmoddi4+0x1cc>
 8000b6a:	428b      	cmp	r3, r1
 8000b6c:	d302      	bcc.n	8000b74 <__udivmoddi4+0x140>
 8000b6e:	4282      	cmp	r2, r0
 8000b70:	f200 80b8 	bhi.w	8000ce4 <__udivmoddi4+0x2b0>
 8000b74:	1a84      	subs	r4, r0, r2
 8000b76:	eb61 0103 	sbc.w	r1, r1, r3
 8000b7a:	2001      	movs	r0, #1
 8000b7c:	468c      	mov	ip, r1
 8000b7e:	2d00      	cmp	r5, #0
 8000b80:	d0a8      	beq.n	8000ad4 <__udivmoddi4+0xa0>
 8000b82:	e9c5 4c00 	strd	r4, ip, [r5]
 8000b86:	e7a5      	b.n	8000ad4 <__udivmoddi4+0xa0>
 8000b88:	f1c2 0320 	rsb	r3, r2, #32
 8000b8c:	fa20 f603 	lsr.w	r6, r0, r3
 8000b90:	4097      	lsls	r7, r2
 8000b92:	fa01 f002 	lsl.w	r0, r1, r2
 8000b96:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000b9a:	40d9      	lsrs	r1, r3
 8000b9c:	4330      	orrs	r0, r6
 8000b9e:	0c03      	lsrs	r3, r0, #16
 8000ba0:	fbb1 f6fe 	udiv	r6, r1, lr
 8000ba4:	fa1f f887 	uxth.w	r8, r7
 8000ba8:	fb0e 1116 	mls	r1, lr, r6, r1
 8000bac:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000bb0:	fb06 f108 	mul.w	r1, r6, r8
 8000bb4:	4299      	cmp	r1, r3
 8000bb6:	fa04 f402 	lsl.w	r4, r4, r2
 8000bba:	d909      	bls.n	8000bd0 <__udivmoddi4+0x19c>
 8000bbc:	18fb      	adds	r3, r7, r3
 8000bbe:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000bc2:	f080 808d 	bcs.w	8000ce0 <__udivmoddi4+0x2ac>
 8000bc6:	4299      	cmp	r1, r3
 8000bc8:	f240 808a 	bls.w	8000ce0 <__udivmoddi4+0x2ac>
 8000bcc:	3e02      	subs	r6, #2
 8000bce:	443b      	add	r3, r7
 8000bd0:	1a5b      	subs	r3, r3, r1
 8000bd2:	b281      	uxth	r1, r0
 8000bd4:	fbb3 f0fe 	udiv	r0, r3, lr
 8000bd8:	fb0e 3310 	mls	r3, lr, r0, r3
 8000bdc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000be0:	fb00 f308 	mul.w	r3, r0, r8
 8000be4:	428b      	cmp	r3, r1
 8000be6:	d907      	bls.n	8000bf8 <__udivmoddi4+0x1c4>
 8000be8:	1879      	adds	r1, r7, r1
 8000bea:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000bee:	d273      	bcs.n	8000cd8 <__udivmoddi4+0x2a4>
 8000bf0:	428b      	cmp	r3, r1
 8000bf2:	d971      	bls.n	8000cd8 <__udivmoddi4+0x2a4>
 8000bf4:	3802      	subs	r0, #2
 8000bf6:	4439      	add	r1, r7
 8000bf8:	1acb      	subs	r3, r1, r3
 8000bfa:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000bfe:	e778      	b.n	8000af2 <__udivmoddi4+0xbe>
 8000c00:	f1c6 0c20 	rsb	ip, r6, #32
 8000c04:	fa03 f406 	lsl.w	r4, r3, r6
 8000c08:	fa22 f30c 	lsr.w	r3, r2, ip
 8000c0c:	431c      	orrs	r4, r3
 8000c0e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000c12:	fa01 f306 	lsl.w	r3, r1, r6
 8000c16:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000c1a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000c1e:	431f      	orrs	r7, r3
 8000c20:	0c3b      	lsrs	r3, r7, #16
 8000c22:	fbb1 f9fe 	udiv	r9, r1, lr
 8000c26:	fa1f f884 	uxth.w	r8, r4
 8000c2a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000c2e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000c32:	fb09 fa08 	mul.w	sl, r9, r8
 8000c36:	458a      	cmp	sl, r1
 8000c38:	fa02 f206 	lsl.w	r2, r2, r6
 8000c3c:	fa00 f306 	lsl.w	r3, r0, r6
 8000c40:	d908      	bls.n	8000c54 <__udivmoddi4+0x220>
 8000c42:	1861      	adds	r1, r4, r1
 8000c44:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000c48:	d248      	bcs.n	8000cdc <__udivmoddi4+0x2a8>
 8000c4a:	458a      	cmp	sl, r1
 8000c4c:	d946      	bls.n	8000cdc <__udivmoddi4+0x2a8>
 8000c4e:	f1a9 0902 	sub.w	r9, r9, #2
 8000c52:	4421      	add	r1, r4
 8000c54:	eba1 010a 	sub.w	r1, r1, sl
 8000c58:	b2bf      	uxth	r7, r7
 8000c5a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c5e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000c62:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000c66:	fb00 f808 	mul.w	r8, r0, r8
 8000c6a:	45b8      	cmp	r8, r7
 8000c6c:	d907      	bls.n	8000c7e <__udivmoddi4+0x24a>
 8000c6e:	19e7      	adds	r7, r4, r7
 8000c70:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000c74:	d22e      	bcs.n	8000cd4 <__udivmoddi4+0x2a0>
 8000c76:	45b8      	cmp	r8, r7
 8000c78:	d92c      	bls.n	8000cd4 <__udivmoddi4+0x2a0>
 8000c7a:	3802      	subs	r0, #2
 8000c7c:	4427      	add	r7, r4
 8000c7e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000c82:	eba7 0708 	sub.w	r7, r7, r8
 8000c86:	fba0 8902 	umull	r8, r9, r0, r2
 8000c8a:	454f      	cmp	r7, r9
 8000c8c:	46c6      	mov	lr, r8
 8000c8e:	4649      	mov	r1, r9
 8000c90:	d31a      	bcc.n	8000cc8 <__udivmoddi4+0x294>
 8000c92:	d017      	beq.n	8000cc4 <__udivmoddi4+0x290>
 8000c94:	b15d      	cbz	r5, 8000cae <__udivmoddi4+0x27a>
 8000c96:	ebb3 020e 	subs.w	r2, r3, lr
 8000c9a:	eb67 0701 	sbc.w	r7, r7, r1
 8000c9e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000ca2:	40f2      	lsrs	r2, r6
 8000ca4:	ea4c 0202 	orr.w	r2, ip, r2
 8000ca8:	40f7      	lsrs	r7, r6
 8000caa:	e9c5 2700 	strd	r2, r7, [r5]
 8000cae:	2600      	movs	r6, #0
 8000cb0:	4631      	mov	r1, r6
 8000cb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cb6:	462e      	mov	r6, r5
 8000cb8:	4628      	mov	r0, r5
 8000cba:	e70b      	b.n	8000ad4 <__udivmoddi4+0xa0>
 8000cbc:	4606      	mov	r6, r0
 8000cbe:	e6e9      	b.n	8000a94 <__udivmoddi4+0x60>
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	e6fd      	b.n	8000ac0 <__udivmoddi4+0x8c>
 8000cc4:	4543      	cmp	r3, r8
 8000cc6:	d2e5      	bcs.n	8000c94 <__udivmoddi4+0x260>
 8000cc8:	ebb8 0e02 	subs.w	lr, r8, r2
 8000ccc:	eb69 0104 	sbc.w	r1, r9, r4
 8000cd0:	3801      	subs	r0, #1
 8000cd2:	e7df      	b.n	8000c94 <__udivmoddi4+0x260>
 8000cd4:	4608      	mov	r0, r1
 8000cd6:	e7d2      	b.n	8000c7e <__udivmoddi4+0x24a>
 8000cd8:	4660      	mov	r0, ip
 8000cda:	e78d      	b.n	8000bf8 <__udivmoddi4+0x1c4>
 8000cdc:	4681      	mov	r9, r0
 8000cde:	e7b9      	b.n	8000c54 <__udivmoddi4+0x220>
 8000ce0:	4666      	mov	r6, ip
 8000ce2:	e775      	b.n	8000bd0 <__udivmoddi4+0x19c>
 8000ce4:	4630      	mov	r0, r6
 8000ce6:	e74a      	b.n	8000b7e <__udivmoddi4+0x14a>
 8000ce8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000cec:	4439      	add	r1, r7
 8000cee:	e713      	b.n	8000b18 <__udivmoddi4+0xe4>
 8000cf0:	3802      	subs	r0, #2
 8000cf2:	443c      	add	r4, r7
 8000cf4:	e724      	b.n	8000b40 <__udivmoddi4+0x10c>
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_idiv0>:
 8000cf8:	4770      	bx	lr
 8000cfa:	bf00      	nop

08000cfc <circ_bbuf_push>:
static void MX_USART2_UART_Init(void);
static void MX_USART1_UART_Init(void);
static void MX_DAC1_Init(void);
/* USER CODE BEGIN PFP */
/* Private function prototypes -----------------------------------------------*/
int circ_bbuf_push(circ_bbuf_t *c, uint8_t data) {
 8000cfc:	b480      	push	{r7}
 8000cfe:	b085      	sub	sp, #20
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]
 8000d04:	460b      	mov	r3, r1
 8000d06:	70fb      	strb	r3, [r7, #3]
    int next_pos;

    next_pos = c->head + 1;  // next is where head will point to after this write.
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	685b      	ldr	r3, [r3, #4]
 8000d0c:	3301      	adds	r3, #1
 8000d0e:	60fb      	str	r3, [r7, #12]
    if (next_pos >= c->maxlen)
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	68db      	ldr	r3, [r3, #12]
 8000d14:	68fa      	ldr	r2, [r7, #12]
 8000d16:	429a      	cmp	r2, r3
 8000d18:	db01      	blt.n	8000d1e <circ_bbuf_push+0x22>
    	next_pos = 0;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	60fb      	str	r3, [r7, #12]

    if (next_pos == c->tail)  // if the head + 1 == tail, circular buffer is full
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	689b      	ldr	r3, [r3, #8]
 8000d22:	68fa      	ldr	r2, [r7, #12]
 8000d24:	429a      	cmp	r2, r3
 8000d26:	d102      	bne.n	8000d2e <circ_bbuf_push+0x32>
        return -1;
 8000d28:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000d2c:	e00a      	b.n	8000d44 <circ_bbuf_push+0x48>

    c->buffer[c->head] = data;  // Load data and then move
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	687a      	ldr	r2, [r7, #4]
 8000d34:	6852      	ldr	r2, [r2, #4]
 8000d36:	4413      	add	r3, r2
 8000d38:	78fa      	ldrb	r2, [r7, #3]
 8000d3a:	701a      	strb	r2, [r3, #0]
    c->head = next_pos;             // head to next data offset.
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	68fa      	ldr	r2, [r7, #12]
 8000d40:	605a      	str	r2, [r3, #4]
    return 0;  // return success to indicate successful push.
 8000d42:	2300      	movs	r3, #0
}
 8000d44:	4618      	mov	r0, r3
 8000d46:	3714      	adds	r7, #20
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4e:	4770      	bx	lr

08000d50 <circ_bbuf_pop>:

int circ_bbuf_pop(circ_bbuf_t *c, uint8_t *data) {
 8000d50:	b480      	push	{r7}
 8000d52:	b085      	sub	sp, #20
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
 8000d58:	6039      	str	r1, [r7, #0]
    int next_pos;

    if (c->head == c->tail)  // if the head == tail, we don't have any data
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	685a      	ldr	r2, [r3, #4]
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	689b      	ldr	r3, [r3, #8]
 8000d62:	429a      	cmp	r2, r3
 8000d64:	d102      	bne.n	8000d6c <circ_bbuf_pop+0x1c>
        return -1;
 8000d66:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000d6a:	e016      	b.n	8000d9a <circ_bbuf_pop+0x4a>

    next_pos = c->tail + 1;  // next is where tail will point to after this read.
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	689b      	ldr	r3, [r3, #8]
 8000d70:	3301      	adds	r3, #1
 8000d72:	60fb      	str	r3, [r7, #12]
    if(next_pos >= c->maxlen)
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	68db      	ldr	r3, [r3, #12]
 8000d78:	68fa      	ldr	r2, [r7, #12]
 8000d7a:	429a      	cmp	r2, r3
 8000d7c:	db01      	blt.n	8000d82 <circ_bbuf_pop+0x32>
    	next_pos = 0;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	60fb      	str	r3, [r7, #12]

    *data = c->buffer[c->tail];  // Read data and then move
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	687a      	ldr	r2, [r7, #4]
 8000d88:	6892      	ldr	r2, [r2, #8]
 8000d8a:	4413      	add	r3, r2
 8000d8c:	781a      	ldrb	r2, [r3, #0]
 8000d8e:	683b      	ldr	r3, [r7, #0]
 8000d90:	701a      	strb	r2, [r3, #0]
    c->tail = next_pos;              // tail to next offset.
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	68fa      	ldr	r2, [r7, #12]
 8000d96:	609a      	str	r2, [r3, #8]
    return 0;  // return success to indicate successful push.
 8000d98:	2300      	movs	r3, #0
}
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	3714      	adds	r7, #20
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da4:	4770      	bx	lr
	...

08000da8 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b082      	sub	sp, #8
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
	circ_bbuf_push(&my_circ_buf, received);
 8000db0:	4b09      	ldr	r3, [pc, #36]	; (8000dd8 <HAL_UART_RxCpltCallback+0x30>)
 8000db2:	781b      	ldrb	r3, [r3, #0]
 8000db4:	4619      	mov	r1, r3
 8000db6:	4809      	ldr	r0, [pc, #36]	; (8000ddc <HAL_UART_RxCpltCallback+0x34>)
 8000db8:	f7ff ffa0 	bl	8000cfc <circ_bbuf_push>
	HAL_UART_Receive_IT(&huart2, &received, 1); // Start listening again for UART messages over USB
 8000dbc:	2201      	movs	r2, #1
 8000dbe:	4906      	ldr	r1, [pc, #24]	; (8000dd8 <HAL_UART_RxCpltCallback+0x30>)
 8000dc0:	4807      	ldr	r0, [pc, #28]	; (8000de0 <HAL_UART_RxCpltCallback+0x38>)
 8000dc2:	f002 fd8b 	bl	80038dc <HAL_UART_Receive_IT>
	HAL_UART_Receive_IT(&huart1, &received, 1); // Start listening again for UART messages over PIN D2/PA10
 8000dc6:	2201      	movs	r2, #1
 8000dc8:	4903      	ldr	r1, [pc, #12]	; (8000dd8 <HAL_UART_RxCpltCallback+0x30>)
 8000dca:	4806      	ldr	r0, [pc, #24]	; (8000de4 <HAL_UART_RxCpltCallback+0x3c>)
 8000dcc:	f002 fd86 	bl	80038dc <HAL_UART_Receive_IT>
}
 8000dd0:	bf00      	nop
 8000dd2:	3708      	adds	r7, #8
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	bd80      	pop	{r7, pc}
 8000dd8:	200001b0 	.word	0x200001b0
 8000ddc:	20000048 	.word	0x20000048
 8000de0:	2000012c 	.word	0x2000012c
 8000de4:	20000098 	.word	0x20000098

08000de8 <calculate_dor>:


uint16_t calculate_dor(uint8_t note_number, uint16_t pitch_bend) {
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b084      	sub	sp, #16
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	4603      	mov	r3, r0
 8000df0:	460a      	mov	r2, r1
 8000df2:	71fb      	strb	r3, [r7, #7]
 8000df4:	4613      	mov	r3, r2
 8000df6:	80bb      	strh	r3, [r7, #4]
	float pitch_bend_percent;
	uint16_t result_dor = dor_values[note_number - midi_note_number_offset];
 8000df8:	79fb      	ldrb	r3, [r7, #7]
 8000dfa:	4a38      	ldr	r2, [pc, #224]	; (8000edc <calculate_dor+0xf4>)
 8000dfc:	7812      	ldrb	r2, [r2, #0]
 8000dfe:	1a9b      	subs	r3, r3, r2
 8000e00:	4a37      	ldr	r2, [pc, #220]	; (8000ee0 <calculate_dor+0xf8>)
 8000e02:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000e06:	81fb      	strh	r3, [r7, #14]

	// No pitch bend
	if(pitch_bend == 0x2000)
 8000e08:	88bb      	ldrh	r3, [r7, #4]
 8000e0a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000e0e:	d101      	bne.n	8000e14 <calculate_dor+0x2c>
		return result_dor;
 8000e10:	89fb      	ldrh	r3, [r7, #14]
 8000e12:	e05f      	b.n	8000ed4 <calculate_dor+0xec>

	// Pitch bend up to +0.2V
	if(pitch_bend > 0x2000) {
 8000e14:	88bb      	ldrh	r3, [r7, #4]
 8000e16:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000e1a:	d92a      	bls.n	8000e72 <calculate_dor+0x8a>
		pitch_bend_percent = (pitch_bend - 8191) / 8192.0;
 8000e1c:	88bb      	ldrh	r3, [r7, #4]
 8000e1e:	f5a3 53ff 	sub.w	r3, r3, #8160	; 0x1fe0
 8000e22:	3b1f      	subs	r3, #31
 8000e24:	4618      	mov	r0, r3
 8000e26:	f7ff fb21 	bl	800046c <__aeabi_i2d>
 8000e2a:	f04f 0200 	mov.w	r2, #0
 8000e2e:	4b2d      	ldr	r3, [pc, #180]	; (8000ee4 <calculate_dor+0xfc>)
 8000e30:	f7ff fcb0 	bl	8000794 <__aeabi_ddiv>
 8000e34:	4602      	mov	r2, r0
 8000e36:	460b      	mov	r3, r1
 8000e38:	4610      	mov	r0, r2
 8000e3a:	4619      	mov	r1, r3
 8000e3c:	f7ff fd92 	bl	8000964 <__aeabi_d2f>
 8000e40:	4603      	mov	r3, r0
 8000e42:	60bb      	str	r3, [r7, #8]
								 // max +0.2V
		result_dor += (uint16_t) dor_values[1] * pitch_bend_percent;
 8000e44:	89fb      	ldrh	r3, [r7, #14]
 8000e46:	ee07 3a90 	vmov	s15, r3
 8000e4a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000e4e:	4b24      	ldr	r3, [pc, #144]	; (8000ee0 <calculate_dor+0xf8>)
 8000e50:	885b      	ldrh	r3, [r3, #2]
 8000e52:	ee07 3a90 	vmov	s15, r3
 8000e56:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000e5a:	edd7 7a02 	vldr	s15, [r7, #8]
 8000e5e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000e62:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000e66:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000e6a:	ee17 3a90 	vmov	r3, s15
 8000e6e:	81fb      	strh	r3, [r7, #14]
 8000e70:	e02f      	b.n	8000ed2 <calculate_dor+0xea>

	// Pitch bend down to -0.2V
	} else if(pitch_bend < 0x2000) {
 8000e72:	88bb      	ldrh	r3, [r7, #4]
 8000e74:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000e78:	d22b      	bcs.n	8000ed2 <calculate_dor+0xea>
		pitch_bend_percent = abs(pitch_bend - 8192) / 8192.0;
 8000e7a:	88bb      	ldrh	r3, [r7, #4]
 8000e7c:	f5a3 5300 	sub.w	r3, r3, #8192	; 0x2000
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	bfb8      	it	lt
 8000e84:	425b      	neglt	r3, r3
 8000e86:	4618      	mov	r0, r3
 8000e88:	f7ff faf0 	bl	800046c <__aeabi_i2d>
 8000e8c:	f04f 0200 	mov.w	r2, #0
 8000e90:	4b14      	ldr	r3, [pc, #80]	; (8000ee4 <calculate_dor+0xfc>)
 8000e92:	f7ff fc7f 	bl	8000794 <__aeabi_ddiv>
 8000e96:	4602      	mov	r2, r0
 8000e98:	460b      	mov	r3, r1
 8000e9a:	4610      	mov	r0, r2
 8000e9c:	4619      	mov	r1, r3
 8000e9e:	f7ff fd61 	bl	8000964 <__aeabi_d2f>
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	60bb      	str	r3, [r7, #8]
								 // max -0.2V
		result_dor -= (uint16_t) dor_values[1] * pitch_bend_percent;
 8000ea6:	89fb      	ldrh	r3, [r7, #14]
 8000ea8:	ee07 3a90 	vmov	s15, r3
 8000eac:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000eb0:	4b0b      	ldr	r3, [pc, #44]	; (8000ee0 <calculate_dor+0xf8>)
 8000eb2:	885b      	ldrh	r3, [r3, #2]
 8000eb4:	ee07 3a90 	vmov	s15, r3
 8000eb8:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000ebc:	edd7 7a02 	vldr	s15, [r7, #8]
 8000ec0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000ec4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000ec8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000ecc:	ee17 3a90 	vmov	r3, s15
 8000ed0:	81fb      	strh	r3, [r7, #14]
	}

	return result_dor;
 8000ed2:	89fb      	ldrh	r3, [r7, #14]
}
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	3710      	adds	r7, #16
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	bd80      	pop	{r7, pc}
 8000edc:	20000000 	.word	0x20000000
 8000ee0:	20000004 	.word	0x20000004
 8000ee4:	40c00000 	.word	0x40c00000

08000ee8 <calculate_current_dor>:

uint16_t calculate_current_dor() {
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	af00      	add	r7, sp, #0
	return calculate_dor(current_note, current_pitch_bend);
 8000eec:	4b05      	ldr	r3, [pc, #20]	; (8000f04 <calculate_current_dor+0x1c>)
 8000eee:	781b      	ldrb	r3, [r3, #0]
 8000ef0:	4a05      	ldr	r2, [pc, #20]	; (8000f08 <calculate_current_dor+0x20>)
 8000ef2:	8812      	ldrh	r2, [r2, #0]
 8000ef4:	4611      	mov	r1, r2
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	f7ff ff76 	bl	8000de8 <calculate_dor>
 8000efc:	4603      	mov	r3, r0
}
 8000efe:	4618      	mov	r0, r3
 8000f00:	bd80      	pop	{r7, pc}
 8000f02:	bf00      	nop
 8000f04:	20000080 	.word	0x20000080
 8000f08:	20000002 	.word	0x20000002

08000f0c <set_gate>:

void set_gate() {
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
 8000f10:	2201      	movs	r2, #1
 8000f12:	2102      	movs	r1, #2
 8000f14:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f18:	f001 f96e 	bl	80021f8 <HAL_GPIO_WritePin>
}
 8000f1c:	bf00      	nop
 8000f1e:	bd80      	pop	{r7, pc}

08000f20 <unset_gate>:

void unset_gate() {
 8000f20:	b580      	push	{r7, lr}
 8000f22:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 8000f24:	2200      	movs	r2, #0
 8000f26:	2102      	movs	r1, #2
 8000f28:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f2c:	f001 f964 	bl	80021f8 <HAL_GPIO_WritePin>
}
 8000f30:	bf00      	nop
 8000f32:	bd80      	pop	{r7, pc}

08000f34 <set_pitch>:

void set_pitch(uint16_t dor_value) {
 8000f34:	b480      	push	{r7}
 8000f36:	b083      	sub	sp, #12
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	80fb      	strh	r3, [r7, #6]
	DAC1->DHR12R1 = dor_value;
 8000f3e:	4a04      	ldr	r2, [pc, #16]	; (8000f50 <set_pitch+0x1c>)
 8000f40:	88fb      	ldrh	r3, [r7, #6]
 8000f42:	6093      	str	r3, [r2, #8]
}
 8000f44:	bf00      	nop
 8000f46:	370c      	adds	r7, #12
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4e:	4770      	bx	lr
 8000f50:	40007400 	.word	0x40007400

08000f54 <parse_MIDI>:

void parse_MIDI() {
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b084      	sub	sp, #16
 8000f58:	af00      	add	r7, sp, #0
	uint8_t midi_byte, note_byte, note_index;
	int byte_present = circ_bbuf_pop(&my_circ_buf, &midi_byte);
 8000f5a:	f107 0309 	add.w	r3, r7, #9
 8000f5e:	4619      	mov	r1, r3
 8000f60:	484e      	ldr	r0, [pc, #312]	; (800109c <parse_MIDI+0x148>)
 8000f62:	f7ff fef5 	bl	8000d50 <circ_bbuf_pop>
 8000f66:	60f8      	str	r0, [r7, #12]

	// Note ON
	if(byte_present == -1) {}
 8000f68:	68fb      	ldr	r3, [r7, #12]
 8000f6a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000f6e:	f000 8091 	beq.w	8001094 <parse_MIDI+0x140>
	else if(midi_byte >> 4 == 0b1001) {
 8000f72:	7a7b      	ldrb	r3, [r7, #9]
 8000f74:	091b      	lsrs	r3, r3, #4
 8000f76:	b2db      	uxtb	r3, r3
 8000f78:	2b09      	cmp	r3, #9
 8000f7a:	d13c      	bne.n	8000ff6 <parse_MIDI+0xa2>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8000f7c:	2201      	movs	r2, #1
 8000f7e:	2120      	movs	r1, #32
 8000f80:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f84:	f001 f938 	bl	80021f8 <HAL_GPIO_WritePin>

		circ_bbuf_pop(&my_circ_buf, &midi_byte);
 8000f88:	f107 0309 	add.w	r3, r7, #9
 8000f8c:	4619      	mov	r1, r3
 8000f8e:	4843      	ldr	r0, [pc, #268]	; (800109c <parse_MIDI+0x148>)
 8000f90:	f7ff fede 	bl	8000d50 <circ_bbuf_pop>

		note_index = midi_byte - midi_note_number_offset;
 8000f94:	7a7a      	ldrb	r2, [r7, #9]
 8000f96:	4b42      	ldr	r3, [pc, #264]	; (80010a0 <parse_MIDI+0x14c>)
 8000f98:	781b      	ldrb	r3, [r3, #0]
 8000f9a:	1ad3      	subs	r3, r2, r3
 8000f9c:	72fb      	strb	r3, [r7, #11]
		note_byte = midi_byte;
 8000f9e:	7a7b      	ldrb	r3, [r7, #9]
 8000fa0:	72bb      	strb	r3, [r7, #10]

		circ_bbuf_pop(&my_circ_buf, &midi_byte);
 8000fa2:	f107 0309 	add.w	r3, r7, #9
 8000fa6:	4619      	mov	r1, r3
 8000fa8:	483c      	ldr	r0, [pc, #240]	; (800109c <parse_MIDI+0x148>)
 8000faa:	f7ff fed1 	bl	8000d50 <circ_bbuf_pop>

		// Note ON with Velocity=0 => Note OFF
		if(midi_byte == 0 && current_note == note_byte) {
 8000fae:	7a7b      	ldrb	r3, [r7, #9]
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d10a      	bne.n	8000fca <parse_MIDI+0x76>
 8000fb4:	4b3b      	ldr	r3, [pc, #236]	; (80010a4 <parse_MIDI+0x150>)
 8000fb6:	781b      	ldrb	r3, [r3, #0]
 8000fb8:	7aba      	ldrb	r2, [r7, #10]
 8000fba:	429a      	cmp	r2, r3
 8000fbc:	d105      	bne.n	8000fca <parse_MIDI+0x76>
			set_pitch(0); // set PITCH to ~0V
 8000fbe:	2000      	movs	r0, #0
 8000fc0:	f7ff ffb8 	bl	8000f34 <set_pitch>
			unset_gate(); // set GATE to ~0V
 8000fc4:	f7ff ffac 	bl	8000f20 <unset_gate>
		circ_bbuf_pop(&my_circ_buf, &msb);
		current_pitch_bend = (msb << 7) + lsb;

		set_pitch(calculate_current_dor()); // set PITCH to appropriate voltage
	}
}
 8000fc8:	e064      	b.n	8001094 <parse_MIDI+0x140>
		} else if(note_index <= number_of_notes && note_byte >= midi_note_number_offset) {
 8000fca:	4b37      	ldr	r3, [pc, #220]	; (80010a8 <parse_MIDI+0x154>)
 8000fcc:	781b      	ldrb	r3, [r3, #0]
 8000fce:	7afa      	ldrb	r2, [r7, #11]
 8000fd0:	429a      	cmp	r2, r3
 8000fd2:	d85f      	bhi.n	8001094 <parse_MIDI+0x140>
 8000fd4:	4b32      	ldr	r3, [pc, #200]	; (80010a0 <parse_MIDI+0x14c>)
 8000fd6:	781b      	ldrb	r3, [r3, #0]
 8000fd8:	7aba      	ldrb	r2, [r7, #10]
 8000fda:	429a      	cmp	r2, r3
 8000fdc:	d35a      	bcc.n	8001094 <parse_MIDI+0x140>
			current_note = note_byte;
 8000fde:	4a31      	ldr	r2, [pc, #196]	; (80010a4 <parse_MIDI+0x150>)
 8000fe0:	7abb      	ldrb	r3, [r7, #10]
 8000fe2:	7013      	strb	r3, [r2, #0]
			set_pitch(calculate_current_dor()); // set PITCH to appropriate voltage
 8000fe4:	f7ff ff80 	bl	8000ee8 <calculate_current_dor>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	4618      	mov	r0, r3
 8000fec:	f7ff ffa2 	bl	8000f34 <set_pitch>
			set_gate(); // set GATE to 3.3V
 8000ff0:	f7ff ff8c 	bl	8000f0c <set_gate>
}
 8000ff4:	e04e      	b.n	8001094 <parse_MIDI+0x140>
	} else if(midi_byte >> 4 == 0b1000) {
 8000ff6:	7a7b      	ldrb	r3, [r7, #9]
 8000ff8:	091b      	lsrs	r3, r3, #4
 8000ffa:	b2db      	uxtb	r3, r3
 8000ffc:	2b08      	cmp	r3, #8
 8000ffe:	d123      	bne.n	8001048 <parse_MIDI+0xf4>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8001000:	2200      	movs	r2, #0
 8001002:	2120      	movs	r1, #32
 8001004:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001008:	f001 f8f6 	bl	80021f8 <HAL_GPIO_WritePin>
		circ_bbuf_pop(&my_circ_buf, &midi_byte);
 800100c:	f107 0309 	add.w	r3, r7, #9
 8001010:	4619      	mov	r1, r3
 8001012:	4822      	ldr	r0, [pc, #136]	; (800109c <parse_MIDI+0x148>)
 8001014:	f7ff fe9c 	bl	8000d50 <circ_bbuf_pop>
		note_index = midi_byte - midi_note_number_offset;
 8001018:	7a7a      	ldrb	r2, [r7, #9]
 800101a:	4b21      	ldr	r3, [pc, #132]	; (80010a0 <parse_MIDI+0x14c>)
 800101c:	781b      	ldrb	r3, [r3, #0]
 800101e:	1ad3      	subs	r3, r2, r3
 8001020:	72fb      	strb	r3, [r7, #11]
		note_byte = midi_byte;
 8001022:	7a7b      	ldrb	r3, [r7, #9]
 8001024:	72bb      	strb	r3, [r7, #10]
		circ_bbuf_pop(&my_circ_buf, &midi_byte);
 8001026:	f107 0309 	add.w	r3, r7, #9
 800102a:	4619      	mov	r1, r3
 800102c:	481b      	ldr	r0, [pc, #108]	; (800109c <parse_MIDI+0x148>)
 800102e:	f7ff fe8f 	bl	8000d50 <circ_bbuf_pop>
		if(note_byte == current_note) {
 8001032:	4b1c      	ldr	r3, [pc, #112]	; (80010a4 <parse_MIDI+0x150>)
 8001034:	781b      	ldrb	r3, [r3, #0]
 8001036:	7aba      	ldrb	r2, [r7, #10]
 8001038:	429a      	cmp	r2, r3
 800103a:	d12b      	bne.n	8001094 <parse_MIDI+0x140>
			set_pitch(0); // set PITCH to ~0V
 800103c:	2000      	movs	r0, #0
 800103e:	f7ff ff79 	bl	8000f34 <set_pitch>
			unset_gate(); // set GATE to ~0V
 8001042:	f7ff ff6d 	bl	8000f20 <unset_gate>
}
 8001046:	e025      	b.n	8001094 <parse_MIDI+0x140>
	} else if(midi_byte >> 4 == 0b1110) {
 8001048:	7a7b      	ldrb	r3, [r7, #9]
 800104a:	091b      	lsrs	r3, r3, #4
 800104c:	b2db      	uxtb	r3, r3
 800104e:	2b0e      	cmp	r3, #14
 8001050:	d120      	bne.n	8001094 <parse_MIDI+0x140>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8001052:	2200      	movs	r2, #0
 8001054:	2120      	movs	r1, #32
 8001056:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800105a:	f001 f8cd 	bl	80021f8 <HAL_GPIO_WritePin>
		circ_bbuf_pop(&my_circ_buf, &lsb);
 800105e:	1dfb      	adds	r3, r7, #7
 8001060:	4619      	mov	r1, r3
 8001062:	480e      	ldr	r0, [pc, #56]	; (800109c <parse_MIDI+0x148>)
 8001064:	f7ff fe74 	bl	8000d50 <circ_bbuf_pop>
		circ_bbuf_pop(&my_circ_buf, &msb);
 8001068:	f107 0308 	add.w	r3, r7, #8
 800106c:	4619      	mov	r1, r3
 800106e:	480b      	ldr	r0, [pc, #44]	; (800109c <parse_MIDI+0x148>)
 8001070:	f7ff fe6e 	bl	8000d50 <circ_bbuf_pop>
		current_pitch_bend = (msb << 7) + lsb;
 8001074:	7a3b      	ldrb	r3, [r7, #8]
 8001076:	b29b      	uxth	r3, r3
 8001078:	01db      	lsls	r3, r3, #7
 800107a:	b29a      	uxth	r2, r3
 800107c:	79fb      	ldrb	r3, [r7, #7]
 800107e:	b29b      	uxth	r3, r3
 8001080:	4413      	add	r3, r2
 8001082:	b29a      	uxth	r2, r3
 8001084:	4b09      	ldr	r3, [pc, #36]	; (80010ac <parse_MIDI+0x158>)
 8001086:	801a      	strh	r2, [r3, #0]
		set_pitch(calculate_current_dor()); // set PITCH to appropriate voltage
 8001088:	f7ff ff2e 	bl	8000ee8 <calculate_current_dor>
 800108c:	4603      	mov	r3, r0
 800108e:	4618      	mov	r0, r3
 8001090:	f7ff ff50 	bl	8000f34 <set_pitch>
}
 8001094:	bf00      	nop
 8001096:	3710      	adds	r7, #16
 8001098:	46bd      	mov	sp, r7
 800109a:	bd80      	pop	{r7, pc}
 800109c:	20000048 	.word	0x20000048
 80010a0:	20000000 	.word	0x20000000
 80010a4:	20000080 	.word	0x20000080
 80010a8:	20000001 	.word	0x20000001
 80010ac:	20000002 	.word	0x20000002

080010b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010b4:	f000 fb3c 	bl	8001730 <HAL_Init>

  /* USER CODE BEGIN Init */
  set_pitch(0);
 80010b8:	2000      	movs	r0, #0
 80010ba:	f7ff ff3b 	bl	8000f34 <set_pitch>
  unset_gate();
 80010be:	f7ff ff2f 	bl	8000f20 <unset_gate>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010c2:	f000 f821 	bl	8001108 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010c6:	f000 f903 	bl	80012d0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80010ca:	f000 f8d1 	bl	8001270 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 80010ce:	f000 f89f 	bl	8001210 <MX_USART1_UART_Init>
  MX_DAC1_Init();
 80010d2:	f000 f86b 	bl	80011ac <MX_DAC1_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart2, &received, 1);
 80010d6:	2201      	movs	r2, #1
 80010d8:	4907      	ldr	r1, [pc, #28]	; (80010f8 <main+0x48>)
 80010da:	4808      	ldr	r0, [pc, #32]	; (80010fc <main+0x4c>)
 80010dc:	f002 fbfe 	bl	80038dc <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart1, &received, 1);
 80010e0:	2201      	movs	r2, #1
 80010e2:	4905      	ldr	r1, [pc, #20]	; (80010f8 <main+0x48>)
 80010e4:	4806      	ldr	r0, [pc, #24]	; (8001100 <main+0x50>)
 80010e6:	f002 fbf9 	bl	80038dc <HAL_UART_Receive_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_DAC_Start(&hdac1, DAC1_CHANNEL_1);
 80010ea:	2100      	movs	r1, #0
 80010ec:	4805      	ldr	r0, [pc, #20]	; (8001104 <main+0x54>)
 80010ee:	f000 fcf2 	bl	8001ad6 <HAL_DAC_Start>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	    parse_MIDI();
 80010f2:	f7ff ff2f 	bl	8000f54 <parse_MIDI>
 80010f6:	e7fc      	b.n	80010f2 <main+0x42>
 80010f8:	200001b0 	.word	0x200001b0
 80010fc:	2000012c 	.word	0x2000012c
 8001100:	20000098 	.word	0x20000098
 8001104:	20000084 	.word	0x20000084

08001108 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b096      	sub	sp, #88	; 0x58
 800110c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800110e:	f107 0314 	add.w	r3, r7, #20
 8001112:	2244      	movs	r2, #68	; 0x44
 8001114:	2100      	movs	r1, #0
 8001116:	4618      	mov	r0, r3
 8001118:	f003 fc24 	bl	8004964 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800111c:	463b      	mov	r3, r7
 800111e:	2200      	movs	r2, #0
 8001120:	601a      	str	r2, [r3, #0]
 8001122:	605a      	str	r2, [r3, #4]
 8001124:	609a      	str	r2, [r3, #8]
 8001126:	60da      	str	r2, [r3, #12]
 8001128:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800112a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800112e:	f001 f889 	bl	8002244 <HAL_PWREx_ControlVoltageScaling>
 8001132:	4603      	mov	r3, r0
 8001134:	2b00      	cmp	r3, #0
 8001136:	d001      	beq.n	800113c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001138:	f000 f946 	bl	80013c8 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800113c:	2302      	movs	r3, #2
 800113e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001140:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001144:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001146:	2310      	movs	r3, #16
 8001148:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800114a:	2302      	movs	r3, #2
 800114c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800114e:	2302      	movs	r3, #2
 8001150:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001152:	2301      	movs	r3, #1
 8001154:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8001156:	230a      	movs	r3, #10
 8001158:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800115a:	2307      	movs	r3, #7
 800115c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800115e:	2302      	movs	r3, #2
 8001160:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001162:	2302      	movs	r3, #2
 8001164:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001166:	f107 0314 	add.w	r3, r7, #20
 800116a:	4618      	mov	r0, r3
 800116c:	f001 f8c0 	bl	80022f0 <HAL_RCC_OscConfig>
 8001170:	4603      	mov	r3, r0
 8001172:	2b00      	cmp	r3, #0
 8001174:	d001      	beq.n	800117a <SystemClock_Config+0x72>
  {
    Error_Handler();
 8001176:	f000 f927 	bl	80013c8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800117a:	230f      	movs	r3, #15
 800117c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800117e:	2303      	movs	r3, #3
 8001180:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001182:	2300      	movs	r3, #0
 8001184:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001186:	2300      	movs	r3, #0
 8001188:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800118a:	2300      	movs	r3, #0
 800118c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800118e:	463b      	mov	r3, r7
 8001190:	2104      	movs	r1, #4
 8001192:	4618      	mov	r0, r3
 8001194:	f001 fc92 	bl	8002abc <HAL_RCC_ClockConfig>
 8001198:	4603      	mov	r3, r0
 800119a:	2b00      	cmp	r3, #0
 800119c:	d001      	beq.n	80011a2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800119e:	f000 f913 	bl	80013c8 <Error_Handler>
  }
}
 80011a2:	bf00      	nop
 80011a4:	3758      	adds	r7, #88	; 0x58
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bd80      	pop	{r7, pc}
	...

080011ac <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b08a      	sub	sp, #40	; 0x28
 80011b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80011b2:	1d3b      	adds	r3, r7, #4
 80011b4:	2224      	movs	r2, #36	; 0x24
 80011b6:	2100      	movs	r1, #0
 80011b8:	4618      	mov	r0, r3
 80011ba:	f003 fbd3 	bl	8004964 <memset>
  /* USER CODE BEGIN DAC1_Init 1 */

  /* USER CODE END DAC1_Init 1 */
  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 80011be:	4b12      	ldr	r3, [pc, #72]	; (8001208 <MX_DAC1_Init+0x5c>)
 80011c0:	4a12      	ldr	r2, [pc, #72]	; (800120c <MX_DAC1_Init+0x60>)
 80011c2:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 80011c4:	4810      	ldr	r0, [pc, #64]	; (8001208 <MX_DAC1_Init+0x5c>)
 80011c6:	f000 fc64 	bl	8001a92 <HAL_DAC_Init>
 80011ca:	4603      	mov	r3, r0
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d001      	beq.n	80011d4 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 80011d0:	f000 f8fa 	bl	80013c8 <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80011d4:	2300      	movs	r3, #0
 80011d6:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80011d8:	2300      	movs	r3, #0
 80011da:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80011dc:	2300      	movs	r3, #0
 80011de:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 80011e0:	2300      	movs	r3, #0
 80011e2:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 80011e4:	2300      	movs	r3, #0
 80011e6:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80011e8:	1d3b      	adds	r3, r7, #4
 80011ea:	2200      	movs	r2, #0
 80011ec:	4619      	mov	r1, r3
 80011ee:	4806      	ldr	r0, [pc, #24]	; (8001208 <MX_DAC1_Init+0x5c>)
 80011f0:	f000 fcbe 	bl	8001b70 <HAL_DAC_ConfigChannel>
 80011f4:	4603      	mov	r3, r0
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d001      	beq.n	80011fe <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 80011fa:	f000 f8e5 	bl	80013c8 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 80011fe:	bf00      	nop
 8001200:	3728      	adds	r7, #40	; 0x28
 8001202:	46bd      	mov	sp, r7
 8001204:	bd80      	pop	{r7, pc}
 8001206:	bf00      	nop
 8001208:	20000084 	.word	0x20000084
 800120c:	40007400 	.word	0x40007400

08001210 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001214:	4b14      	ldr	r3, [pc, #80]	; (8001268 <MX_USART1_UART_Init+0x58>)
 8001216:	4a15      	ldr	r2, [pc, #84]	; (800126c <MX_USART1_UART_Init+0x5c>)
 8001218:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 31250;
 800121a:	4b13      	ldr	r3, [pc, #76]	; (8001268 <MX_USART1_UART_Init+0x58>)
 800121c:	f647 2212 	movw	r2, #31250	; 0x7a12
 8001220:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001222:	4b11      	ldr	r3, [pc, #68]	; (8001268 <MX_USART1_UART_Init+0x58>)
 8001224:	2200      	movs	r2, #0
 8001226:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001228:	4b0f      	ldr	r3, [pc, #60]	; (8001268 <MX_USART1_UART_Init+0x58>)
 800122a:	2200      	movs	r2, #0
 800122c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800122e:	4b0e      	ldr	r3, [pc, #56]	; (8001268 <MX_USART1_UART_Init+0x58>)
 8001230:	2200      	movs	r2, #0
 8001232:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001234:	4b0c      	ldr	r3, [pc, #48]	; (8001268 <MX_USART1_UART_Init+0x58>)
 8001236:	220c      	movs	r2, #12
 8001238:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800123a:	4b0b      	ldr	r3, [pc, #44]	; (8001268 <MX_USART1_UART_Init+0x58>)
 800123c:	2200      	movs	r2, #0
 800123e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001240:	4b09      	ldr	r3, [pc, #36]	; (8001268 <MX_USART1_UART_Init+0x58>)
 8001242:	2200      	movs	r2, #0
 8001244:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001246:	4b08      	ldr	r3, [pc, #32]	; (8001268 <MX_USART1_UART_Init+0x58>)
 8001248:	2200      	movs	r2, #0
 800124a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800124c:	4b06      	ldr	r3, [pc, #24]	; (8001268 <MX_USART1_UART_Init+0x58>)
 800124e:	2200      	movs	r2, #0
 8001250:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001252:	4805      	ldr	r0, [pc, #20]	; (8001268 <MX_USART1_UART_Init+0x58>)
 8001254:	f002 faf4 	bl	8003840 <HAL_UART_Init>
 8001258:	4603      	mov	r3, r0
 800125a:	2b00      	cmp	r3, #0
 800125c:	d001      	beq.n	8001262 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800125e:	f000 f8b3 	bl	80013c8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001262:	bf00      	nop
 8001264:	bd80      	pop	{r7, pc}
 8001266:	bf00      	nop
 8001268:	20000098 	.word	0x20000098
 800126c:	40013800 	.word	0x40013800

08001270 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001274:	4b14      	ldr	r3, [pc, #80]	; (80012c8 <MX_USART2_UART_Init+0x58>)
 8001276:	4a15      	ldr	r2, [pc, #84]	; (80012cc <MX_USART2_UART_Init+0x5c>)
 8001278:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800127a:	4b13      	ldr	r3, [pc, #76]	; (80012c8 <MX_USART2_UART_Init+0x58>)
 800127c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001280:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001282:	4b11      	ldr	r3, [pc, #68]	; (80012c8 <MX_USART2_UART_Init+0x58>)
 8001284:	2200      	movs	r2, #0
 8001286:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001288:	4b0f      	ldr	r3, [pc, #60]	; (80012c8 <MX_USART2_UART_Init+0x58>)
 800128a:	2200      	movs	r2, #0
 800128c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800128e:	4b0e      	ldr	r3, [pc, #56]	; (80012c8 <MX_USART2_UART_Init+0x58>)
 8001290:	2200      	movs	r2, #0
 8001292:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001294:	4b0c      	ldr	r3, [pc, #48]	; (80012c8 <MX_USART2_UART_Init+0x58>)
 8001296:	220c      	movs	r2, #12
 8001298:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800129a:	4b0b      	ldr	r3, [pc, #44]	; (80012c8 <MX_USART2_UART_Init+0x58>)
 800129c:	2200      	movs	r2, #0
 800129e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80012a0:	4b09      	ldr	r3, [pc, #36]	; (80012c8 <MX_USART2_UART_Init+0x58>)
 80012a2:	2200      	movs	r2, #0
 80012a4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80012a6:	4b08      	ldr	r3, [pc, #32]	; (80012c8 <MX_USART2_UART_Init+0x58>)
 80012a8:	2200      	movs	r2, #0
 80012aa:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80012ac:	4b06      	ldr	r3, [pc, #24]	; (80012c8 <MX_USART2_UART_Init+0x58>)
 80012ae:	2200      	movs	r2, #0
 80012b0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80012b2:	4805      	ldr	r0, [pc, #20]	; (80012c8 <MX_USART2_UART_Init+0x58>)
 80012b4:	f002 fac4 	bl	8003840 <HAL_UART_Init>
 80012b8:	4603      	mov	r3, r0
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d001      	beq.n	80012c2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80012be:	f000 f883 	bl	80013c8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80012c2:	bf00      	nop
 80012c4:	bd80      	pop	{r7, pc}
 80012c6:	bf00      	nop
 80012c8:	2000012c 	.word	0x2000012c
 80012cc:	40004400 	.word	0x40004400

080012d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b08a      	sub	sp, #40	; 0x28
 80012d4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012d6:	f107 0314 	add.w	r3, r7, #20
 80012da:	2200      	movs	r2, #0
 80012dc:	601a      	str	r2, [r3, #0]
 80012de:	605a      	str	r2, [r3, #4]
 80012e0:	609a      	str	r2, [r3, #8]
 80012e2:	60da      	str	r2, [r3, #12]
 80012e4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012e6:	4b34      	ldr	r3, [pc, #208]	; (80013b8 <MX_GPIO_Init+0xe8>)
 80012e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012ea:	4a33      	ldr	r2, [pc, #204]	; (80013b8 <MX_GPIO_Init+0xe8>)
 80012ec:	f043 0304 	orr.w	r3, r3, #4
 80012f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012f2:	4b31      	ldr	r3, [pc, #196]	; (80013b8 <MX_GPIO_Init+0xe8>)
 80012f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012f6:	f003 0304 	and.w	r3, r3, #4
 80012fa:	613b      	str	r3, [r7, #16]
 80012fc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80012fe:	4b2e      	ldr	r3, [pc, #184]	; (80013b8 <MX_GPIO_Init+0xe8>)
 8001300:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001302:	4a2d      	ldr	r2, [pc, #180]	; (80013b8 <MX_GPIO_Init+0xe8>)
 8001304:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001308:	64d3      	str	r3, [r2, #76]	; 0x4c
 800130a:	4b2b      	ldr	r3, [pc, #172]	; (80013b8 <MX_GPIO_Init+0xe8>)
 800130c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800130e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001312:	60fb      	str	r3, [r7, #12]
 8001314:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001316:	4b28      	ldr	r3, [pc, #160]	; (80013b8 <MX_GPIO_Init+0xe8>)
 8001318:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800131a:	4a27      	ldr	r2, [pc, #156]	; (80013b8 <MX_GPIO_Init+0xe8>)
 800131c:	f043 0301 	orr.w	r3, r3, #1
 8001320:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001322:	4b25      	ldr	r3, [pc, #148]	; (80013b8 <MX_GPIO_Init+0xe8>)
 8001324:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001326:	f003 0301 	and.w	r3, r3, #1
 800132a:	60bb      	str	r3, [r7, #8]
 800132c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800132e:	4b22      	ldr	r3, [pc, #136]	; (80013b8 <MX_GPIO_Init+0xe8>)
 8001330:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001332:	4a21      	ldr	r2, [pc, #132]	; (80013b8 <MX_GPIO_Init+0xe8>)
 8001334:	f043 0302 	orr.w	r3, r3, #2
 8001338:	64d3      	str	r3, [r2, #76]	; 0x4c
 800133a:	4b1f      	ldr	r3, [pc, #124]	; (80013b8 <MX_GPIO_Init+0xe8>)
 800133c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800133e:	f003 0302 	and.w	r3, r3, #2
 8001342:	607b      	str	r3, [r7, #4]
 8001344:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001346:	2200      	movs	r2, #0
 8001348:	2120      	movs	r1, #32
 800134a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800134e:	f000 ff53 	bl	80021f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 8001352:	2200      	movs	r2, #0
 8001354:	2120      	movs	r1, #32
 8001356:	4819      	ldr	r0, [pc, #100]	; (80013bc <MX_GPIO_Init+0xec>)
 8001358:	f000 ff4e 	bl	80021f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800135c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001360:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001362:	4b17      	ldr	r3, [pc, #92]	; (80013c0 <MX_GPIO_Init+0xf0>)
 8001364:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001366:	2300      	movs	r3, #0
 8001368:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800136a:	f107 0314 	add.w	r3, r7, #20
 800136e:	4619      	mov	r1, r3
 8001370:	4814      	ldr	r0, [pc, #80]	; (80013c4 <MX_GPIO_Init+0xf4>)
 8001372:	f000 fd97 	bl	8001ea4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001376:	2320      	movs	r3, #32
 8001378:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800137a:	2301      	movs	r3, #1
 800137c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800137e:	2300      	movs	r3, #0
 8001380:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001382:	2300      	movs	r3, #0
 8001384:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001386:	f107 0314 	add.w	r3, r7, #20
 800138a:	4619      	mov	r1, r3
 800138c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001390:	f000 fd88 	bl	8001ea4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001394:	2320      	movs	r3, #32
 8001396:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001398:	2301      	movs	r3, #1
 800139a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800139c:	2300      	movs	r3, #0
 800139e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013a0:	2300      	movs	r3, #0
 80013a2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013a4:	f107 0314 	add.w	r3, r7, #20
 80013a8:	4619      	mov	r1, r3
 80013aa:	4804      	ldr	r0, [pc, #16]	; (80013bc <MX_GPIO_Init+0xec>)
 80013ac:	f000 fd7a 	bl	8001ea4 <HAL_GPIO_Init>

}
 80013b0:	bf00      	nop
 80013b2:	3728      	adds	r7, #40	; 0x28
 80013b4:	46bd      	mov	sp, r7
 80013b6:	bd80      	pop	{r7, pc}
 80013b8:	40021000 	.word	0x40021000
 80013bc:	48000400 	.word	0x48000400
 80013c0:	10210000 	.word	0x10210000
 80013c4:	48000800 	.word	0x48000800

080013c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013c8:	b480      	push	{r7}
 80013ca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013cc:	b672      	cpsid	i
}
 80013ce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80013d0:	e7fe      	b.n	80013d0 <Error_Handler+0x8>
	...

080013d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013d4:	b480      	push	{r7}
 80013d6:	b083      	sub	sp, #12
 80013d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013da:	4b0f      	ldr	r3, [pc, #60]	; (8001418 <HAL_MspInit+0x44>)
 80013dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013de:	4a0e      	ldr	r2, [pc, #56]	; (8001418 <HAL_MspInit+0x44>)
 80013e0:	f043 0301 	orr.w	r3, r3, #1
 80013e4:	6613      	str	r3, [r2, #96]	; 0x60
 80013e6:	4b0c      	ldr	r3, [pc, #48]	; (8001418 <HAL_MspInit+0x44>)
 80013e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013ea:	f003 0301 	and.w	r3, r3, #1
 80013ee:	607b      	str	r3, [r7, #4]
 80013f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013f2:	4b09      	ldr	r3, [pc, #36]	; (8001418 <HAL_MspInit+0x44>)
 80013f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013f6:	4a08      	ldr	r2, [pc, #32]	; (8001418 <HAL_MspInit+0x44>)
 80013f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013fc:	6593      	str	r3, [r2, #88]	; 0x58
 80013fe:	4b06      	ldr	r3, [pc, #24]	; (8001418 <HAL_MspInit+0x44>)
 8001400:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001402:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001406:	603b      	str	r3, [r7, #0]
 8001408:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800140a:	bf00      	nop
 800140c:	370c      	adds	r7, #12
 800140e:	46bd      	mov	sp, r7
 8001410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001414:	4770      	bx	lr
 8001416:	bf00      	nop
 8001418:	40021000 	.word	0x40021000

0800141c <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b08a      	sub	sp, #40	; 0x28
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001424:	f107 0314 	add.w	r3, r7, #20
 8001428:	2200      	movs	r2, #0
 800142a:	601a      	str	r2, [r3, #0]
 800142c:	605a      	str	r2, [r3, #4]
 800142e:	609a      	str	r2, [r3, #8]
 8001430:	60da      	str	r2, [r3, #12]
 8001432:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	4a15      	ldr	r2, [pc, #84]	; (8001490 <HAL_DAC_MspInit+0x74>)
 800143a:	4293      	cmp	r3, r2
 800143c:	d124      	bne.n	8001488 <HAL_DAC_MspInit+0x6c>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 800143e:	4b15      	ldr	r3, [pc, #84]	; (8001494 <HAL_DAC_MspInit+0x78>)
 8001440:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001442:	4a14      	ldr	r2, [pc, #80]	; (8001494 <HAL_DAC_MspInit+0x78>)
 8001444:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001448:	6593      	str	r3, [r2, #88]	; 0x58
 800144a:	4b12      	ldr	r3, [pc, #72]	; (8001494 <HAL_DAC_MspInit+0x78>)
 800144c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800144e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001452:	613b      	str	r3, [r7, #16]
 8001454:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001456:	4b0f      	ldr	r3, [pc, #60]	; (8001494 <HAL_DAC_MspInit+0x78>)
 8001458:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800145a:	4a0e      	ldr	r2, [pc, #56]	; (8001494 <HAL_DAC_MspInit+0x78>)
 800145c:	f043 0301 	orr.w	r3, r3, #1
 8001460:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001462:	4b0c      	ldr	r3, [pc, #48]	; (8001494 <HAL_DAC_MspInit+0x78>)
 8001464:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001466:	f003 0301 	and.w	r3, r3, #1
 800146a:	60fb      	str	r3, [r7, #12]
 800146c:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800146e:	2310      	movs	r3, #16
 8001470:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001472:	2303      	movs	r3, #3
 8001474:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001476:	2300      	movs	r3, #0
 8001478:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800147a:	f107 0314 	add.w	r3, r7, #20
 800147e:	4619      	mov	r1, r3
 8001480:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001484:	f000 fd0e 	bl	8001ea4 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8001488:	bf00      	nop
 800148a:	3728      	adds	r7, #40	; 0x28
 800148c:	46bd      	mov	sp, r7
 800148e:	bd80      	pop	{r7, pc}
 8001490:	40007400 	.word	0x40007400
 8001494:	40021000 	.word	0x40021000

08001498 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b0ae      	sub	sp, #184	; 0xb8
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014a0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80014a4:	2200      	movs	r2, #0
 80014a6:	601a      	str	r2, [r3, #0]
 80014a8:	605a      	str	r2, [r3, #4]
 80014aa:	609a      	str	r2, [r3, #8]
 80014ac:	60da      	str	r2, [r3, #12]
 80014ae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80014b0:	f107 031c 	add.w	r3, r7, #28
 80014b4:	2288      	movs	r2, #136	; 0x88
 80014b6:	2100      	movs	r1, #0
 80014b8:	4618      	mov	r0, r3
 80014ba:	f003 fa53 	bl	8004964 <memset>
  if(huart->Instance==USART1)
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	4a4b      	ldr	r2, [pc, #300]	; (80015f0 <HAL_UART_MspInit+0x158>)
 80014c4:	4293      	cmp	r3, r2
 80014c6:	d145      	bne.n	8001554 <HAL_UART_MspInit+0xbc>
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80014c8:	2301      	movs	r3, #1
 80014ca:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80014cc:	2300      	movs	r3, #0
 80014ce:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80014d0:	f107 031c 	add.w	r3, r7, #28
 80014d4:	4618      	mov	r0, r3
 80014d6:	f001 fcf7 	bl	8002ec8 <HAL_RCCEx_PeriphCLKConfig>
 80014da:	4603      	mov	r3, r0
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d001      	beq.n	80014e4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80014e0:	f7ff ff72 	bl	80013c8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80014e4:	4b43      	ldr	r3, [pc, #268]	; (80015f4 <HAL_UART_MspInit+0x15c>)
 80014e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80014e8:	4a42      	ldr	r2, [pc, #264]	; (80015f4 <HAL_UART_MspInit+0x15c>)
 80014ea:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014ee:	6613      	str	r3, [r2, #96]	; 0x60
 80014f0:	4b40      	ldr	r3, [pc, #256]	; (80015f4 <HAL_UART_MspInit+0x15c>)
 80014f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80014f4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014f8:	61bb      	str	r3, [r7, #24]
 80014fa:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014fc:	4b3d      	ldr	r3, [pc, #244]	; (80015f4 <HAL_UART_MspInit+0x15c>)
 80014fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001500:	4a3c      	ldr	r2, [pc, #240]	; (80015f4 <HAL_UART_MspInit+0x15c>)
 8001502:	f043 0301 	orr.w	r3, r3, #1
 8001506:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001508:	4b3a      	ldr	r3, [pc, #232]	; (80015f4 <HAL_UART_MspInit+0x15c>)
 800150a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800150c:	f003 0301 	and.w	r3, r3, #1
 8001510:	617b      	str	r3, [r7, #20]
 8001512:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001514:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001518:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800151c:	2302      	movs	r3, #2
 800151e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001522:	2300      	movs	r3, #0
 8001524:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001528:	2303      	movs	r3, #3
 800152a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800152e:	2307      	movs	r3, #7
 8001530:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001534:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001538:	4619      	mov	r1, r3
 800153a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800153e:	f000 fcb1 	bl	8001ea4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001542:	2200      	movs	r2, #0
 8001544:	2100      	movs	r1, #0
 8001546:	2025      	movs	r0, #37	; 0x25
 8001548:	f000 fa6d 	bl	8001a26 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800154c:	2025      	movs	r0, #37	; 0x25
 800154e:	f000 fa86 	bl	8001a5e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001552:	e048      	b.n	80015e6 <HAL_UART_MspInit+0x14e>
  else if(huart->Instance==USART2)
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	4a27      	ldr	r2, [pc, #156]	; (80015f8 <HAL_UART_MspInit+0x160>)
 800155a:	4293      	cmp	r3, r2
 800155c:	d143      	bne.n	80015e6 <HAL_UART_MspInit+0x14e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800155e:	2302      	movs	r3, #2
 8001560:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001562:	2300      	movs	r3, #0
 8001564:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001566:	f107 031c 	add.w	r3, r7, #28
 800156a:	4618      	mov	r0, r3
 800156c:	f001 fcac 	bl	8002ec8 <HAL_RCCEx_PeriphCLKConfig>
 8001570:	4603      	mov	r3, r0
 8001572:	2b00      	cmp	r3, #0
 8001574:	d001      	beq.n	800157a <HAL_UART_MspInit+0xe2>
      Error_Handler();
 8001576:	f7ff ff27 	bl	80013c8 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 800157a:	4b1e      	ldr	r3, [pc, #120]	; (80015f4 <HAL_UART_MspInit+0x15c>)
 800157c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800157e:	4a1d      	ldr	r2, [pc, #116]	; (80015f4 <HAL_UART_MspInit+0x15c>)
 8001580:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001584:	6593      	str	r3, [r2, #88]	; 0x58
 8001586:	4b1b      	ldr	r3, [pc, #108]	; (80015f4 <HAL_UART_MspInit+0x15c>)
 8001588:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800158a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800158e:	613b      	str	r3, [r7, #16]
 8001590:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001592:	4b18      	ldr	r3, [pc, #96]	; (80015f4 <HAL_UART_MspInit+0x15c>)
 8001594:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001596:	4a17      	ldr	r2, [pc, #92]	; (80015f4 <HAL_UART_MspInit+0x15c>)
 8001598:	f043 0301 	orr.w	r3, r3, #1
 800159c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800159e:	4b15      	ldr	r3, [pc, #84]	; (80015f4 <HAL_UART_MspInit+0x15c>)
 80015a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015a2:	f003 0301 	and.w	r3, r3, #1
 80015a6:	60fb      	str	r3, [r7, #12]
 80015a8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80015aa:	230c      	movs	r3, #12
 80015ac:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015b0:	2302      	movs	r3, #2
 80015b2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b6:	2300      	movs	r3, #0
 80015b8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015bc:	2303      	movs	r3, #3
 80015be:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80015c2:	2307      	movs	r3, #7
 80015c4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015c8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80015cc:	4619      	mov	r1, r3
 80015ce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015d2:	f000 fc67 	bl	8001ea4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80015d6:	2200      	movs	r2, #0
 80015d8:	2100      	movs	r1, #0
 80015da:	2026      	movs	r0, #38	; 0x26
 80015dc:	f000 fa23 	bl	8001a26 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80015e0:	2026      	movs	r0, #38	; 0x26
 80015e2:	f000 fa3c 	bl	8001a5e <HAL_NVIC_EnableIRQ>
}
 80015e6:	bf00      	nop
 80015e8:	37b8      	adds	r7, #184	; 0xb8
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bd80      	pop	{r7, pc}
 80015ee:	bf00      	nop
 80015f0:	40013800 	.word	0x40013800
 80015f4:	40021000 	.word	0x40021000
 80015f8:	40004400 	.word	0x40004400

080015fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015fc:	b480      	push	{r7}
 80015fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001600:	e7fe      	b.n	8001600 <NMI_Handler+0x4>

08001602 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001602:	b480      	push	{r7}
 8001604:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001606:	e7fe      	b.n	8001606 <HardFault_Handler+0x4>

08001608 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001608:	b480      	push	{r7}
 800160a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800160c:	e7fe      	b.n	800160c <MemManage_Handler+0x4>

0800160e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800160e:	b480      	push	{r7}
 8001610:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001612:	e7fe      	b.n	8001612 <BusFault_Handler+0x4>

08001614 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001614:	b480      	push	{r7}
 8001616:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001618:	e7fe      	b.n	8001618 <UsageFault_Handler+0x4>

0800161a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800161a:	b480      	push	{r7}
 800161c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800161e:	bf00      	nop
 8001620:	46bd      	mov	sp, r7
 8001622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001626:	4770      	bx	lr

08001628 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001628:	b480      	push	{r7}
 800162a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800162c:	bf00      	nop
 800162e:	46bd      	mov	sp, r7
 8001630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001634:	4770      	bx	lr

08001636 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001636:	b480      	push	{r7}
 8001638:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800163a:	bf00      	nop
 800163c:	46bd      	mov	sp, r7
 800163e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001642:	4770      	bx	lr

08001644 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001648:	f000 f8ce 	bl	80017e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800164c:	bf00      	nop
 800164e:	bd80      	pop	{r7, pc}

08001650 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001654:	4802      	ldr	r0, [pc, #8]	; (8001660 <USART1_IRQHandler+0x10>)
 8001656:	f002 f985 	bl	8003964 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800165a:	bf00      	nop
 800165c:	bd80      	pop	{r7, pc}
 800165e:	bf00      	nop
 8001660:	20000098 	.word	0x20000098

08001664 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001668:	4802      	ldr	r0, [pc, #8]	; (8001674 <USART2_IRQHandler+0x10>)
 800166a:	f002 f97b 	bl	8003964 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800166e:	bf00      	nop
 8001670:	bd80      	pop	{r7, pc}
 8001672:	bf00      	nop
 8001674:	2000012c 	.word	0x2000012c

08001678 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001678:	b480      	push	{r7}
 800167a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800167c:	4b15      	ldr	r3, [pc, #84]	; (80016d4 <SystemInit+0x5c>)
 800167e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001682:	4a14      	ldr	r2, [pc, #80]	; (80016d4 <SystemInit+0x5c>)
 8001684:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001688:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 800168c:	4b12      	ldr	r3, [pc, #72]	; (80016d8 <SystemInit+0x60>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	4a11      	ldr	r2, [pc, #68]	; (80016d8 <SystemInit+0x60>)
 8001692:	f043 0301 	orr.w	r3, r3, #1
 8001696:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8001698:	4b0f      	ldr	r3, [pc, #60]	; (80016d8 <SystemInit+0x60>)
 800169a:	2200      	movs	r2, #0
 800169c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 800169e:	4b0e      	ldr	r3, [pc, #56]	; (80016d8 <SystemInit+0x60>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	4a0d      	ldr	r2, [pc, #52]	; (80016d8 <SystemInit+0x60>)
 80016a4:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80016a8:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80016ac:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 80016ae:	4b0a      	ldr	r3, [pc, #40]	; (80016d8 <SystemInit+0x60>)
 80016b0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80016b4:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80016b6:	4b08      	ldr	r3, [pc, #32]	; (80016d8 <SystemInit+0x60>)
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	4a07      	ldr	r2, [pc, #28]	; (80016d8 <SystemInit+0x60>)
 80016bc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80016c0:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80016c2:	4b05      	ldr	r3, [pc, #20]	; (80016d8 <SystemInit+0x60>)
 80016c4:	2200      	movs	r2, #0
 80016c6:	619a      	str	r2, [r3, #24]
}
 80016c8:	bf00      	nop
 80016ca:	46bd      	mov	sp, r7
 80016cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d0:	4770      	bx	lr
 80016d2:	bf00      	nop
 80016d4:	e000ed00 	.word	0xe000ed00
 80016d8:	40021000 	.word	0x40021000

080016dc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80016dc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001714 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80016e0:	f7ff ffca 	bl	8001678 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80016e4:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80016e6:	e003      	b.n	80016f0 <LoopCopyDataInit>

080016e8 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80016e8:	4b0b      	ldr	r3, [pc, #44]	; (8001718 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80016ea:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80016ec:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80016ee:	3104      	adds	r1, #4

080016f0 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80016f0:	480a      	ldr	r0, [pc, #40]	; (800171c <LoopForever+0xa>)
	ldr	r3, =_edata
 80016f2:	4b0b      	ldr	r3, [pc, #44]	; (8001720 <LoopForever+0xe>)
	adds	r2, r0, r1
 80016f4:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80016f6:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80016f8:	d3f6      	bcc.n	80016e8 <CopyDataInit>
	ldr	r2, =_sbss
 80016fa:	4a0a      	ldr	r2, [pc, #40]	; (8001724 <LoopForever+0x12>)
	b	LoopFillZerobss
 80016fc:	e002      	b.n	8001704 <LoopFillZerobss>

080016fe <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80016fe:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001700:	f842 3b04 	str.w	r3, [r2], #4

08001704 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001704:	4b08      	ldr	r3, [pc, #32]	; (8001728 <LoopForever+0x16>)
	cmp	r2, r3
 8001706:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001708:	d3f9      	bcc.n	80016fe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800170a:	f003 f907 	bl	800491c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800170e:	f7ff fccf 	bl	80010b0 <main>

08001712 <LoopForever>:

LoopForever:
    b LoopForever
 8001712:	e7fe      	b.n	8001712 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001714:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8001718:	080049e4 	.word	0x080049e4
	ldr	r0, =_sdata
 800171c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001720:	20000064 	.word	0x20000064
	ldr	r2, =_sbss
 8001724:	20000064 	.word	0x20000064
	ldr	r3, = _ebss
 8001728:	200001b8 	.word	0x200001b8

0800172c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800172c:	e7fe      	b.n	800172c <ADC1_2_IRQHandler>
	...

08001730 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b082      	sub	sp, #8
 8001734:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001736:	2300      	movs	r3, #0
 8001738:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800173a:	4b0c      	ldr	r3, [pc, #48]	; (800176c <HAL_Init+0x3c>)
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	4a0b      	ldr	r2, [pc, #44]	; (800176c <HAL_Init+0x3c>)
 8001740:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001744:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001746:	2003      	movs	r0, #3
 8001748:	f000 f962 	bl	8001a10 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800174c:	2000      	movs	r0, #0
 800174e:	f000 f80f 	bl	8001770 <HAL_InitTick>
 8001752:	4603      	mov	r3, r0
 8001754:	2b00      	cmp	r3, #0
 8001756:	d002      	beq.n	800175e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001758:	2301      	movs	r3, #1
 800175a:	71fb      	strb	r3, [r7, #7]
 800175c:	e001      	b.n	8001762 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800175e:	f7ff fe39 	bl	80013d4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001762:	79fb      	ldrb	r3, [r7, #7]
}
 8001764:	4618      	mov	r0, r3
 8001766:	3708      	adds	r7, #8
 8001768:	46bd      	mov	sp, r7
 800176a:	bd80      	pop	{r7, pc}
 800176c:	40022000 	.word	0x40022000

08001770 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b084      	sub	sp, #16
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001778:	2300      	movs	r3, #0
 800177a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800177c:	4b17      	ldr	r3, [pc, #92]	; (80017dc <HAL_InitTick+0x6c>)
 800177e:	781b      	ldrb	r3, [r3, #0]
 8001780:	2b00      	cmp	r3, #0
 8001782:	d023      	beq.n	80017cc <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001784:	4b16      	ldr	r3, [pc, #88]	; (80017e0 <HAL_InitTick+0x70>)
 8001786:	681a      	ldr	r2, [r3, #0]
 8001788:	4b14      	ldr	r3, [pc, #80]	; (80017dc <HAL_InitTick+0x6c>)
 800178a:	781b      	ldrb	r3, [r3, #0]
 800178c:	4619      	mov	r1, r3
 800178e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001792:	fbb3 f3f1 	udiv	r3, r3, r1
 8001796:	fbb2 f3f3 	udiv	r3, r2, r3
 800179a:	4618      	mov	r0, r3
 800179c:	f000 f96d 	bl	8001a7a <HAL_SYSTICK_Config>
 80017a0:	4603      	mov	r3, r0
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d10f      	bne.n	80017c6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	2b0f      	cmp	r3, #15
 80017aa:	d809      	bhi.n	80017c0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80017ac:	2200      	movs	r2, #0
 80017ae:	6879      	ldr	r1, [r7, #4]
 80017b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80017b4:	f000 f937 	bl	8001a26 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80017b8:	4a0a      	ldr	r2, [pc, #40]	; (80017e4 <HAL_InitTick+0x74>)
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	6013      	str	r3, [r2, #0]
 80017be:	e007      	b.n	80017d0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80017c0:	2301      	movs	r3, #1
 80017c2:	73fb      	strb	r3, [r7, #15]
 80017c4:	e004      	b.n	80017d0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80017c6:	2301      	movs	r3, #1
 80017c8:	73fb      	strb	r3, [r7, #15]
 80017ca:	e001      	b.n	80017d0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80017cc:	2301      	movs	r3, #1
 80017ce:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80017d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80017d2:	4618      	mov	r0, r3
 80017d4:	3710      	adds	r7, #16
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bd80      	pop	{r7, pc}
 80017da:	bf00      	nop
 80017dc:	20000060 	.word	0x20000060
 80017e0:	20000058 	.word	0x20000058
 80017e4:	2000005c 	.word	0x2000005c

080017e8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017e8:	b480      	push	{r7}
 80017ea:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80017ec:	4b06      	ldr	r3, [pc, #24]	; (8001808 <HAL_IncTick+0x20>)
 80017ee:	781b      	ldrb	r3, [r3, #0]
 80017f0:	461a      	mov	r2, r3
 80017f2:	4b06      	ldr	r3, [pc, #24]	; (800180c <HAL_IncTick+0x24>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	4413      	add	r3, r2
 80017f8:	4a04      	ldr	r2, [pc, #16]	; (800180c <HAL_IncTick+0x24>)
 80017fa:	6013      	str	r3, [r2, #0]
}
 80017fc:	bf00      	nop
 80017fe:	46bd      	mov	sp, r7
 8001800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001804:	4770      	bx	lr
 8001806:	bf00      	nop
 8001808:	20000060 	.word	0x20000060
 800180c:	200001b4 	.word	0x200001b4

08001810 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001810:	b480      	push	{r7}
 8001812:	af00      	add	r7, sp, #0
  return uwTick;
 8001814:	4b03      	ldr	r3, [pc, #12]	; (8001824 <HAL_GetTick+0x14>)
 8001816:	681b      	ldr	r3, [r3, #0]
}
 8001818:	4618      	mov	r0, r3
 800181a:	46bd      	mov	sp, r7
 800181c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001820:	4770      	bx	lr
 8001822:	bf00      	nop
 8001824:	200001b4 	.word	0x200001b4

08001828 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b084      	sub	sp, #16
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001830:	f7ff ffee 	bl	8001810 <HAL_GetTick>
 8001834:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001840:	d005      	beq.n	800184e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001842:	4b0a      	ldr	r3, [pc, #40]	; (800186c <HAL_Delay+0x44>)
 8001844:	781b      	ldrb	r3, [r3, #0]
 8001846:	461a      	mov	r2, r3
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	4413      	add	r3, r2
 800184c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800184e:	bf00      	nop
 8001850:	f7ff ffde 	bl	8001810 <HAL_GetTick>
 8001854:	4602      	mov	r2, r0
 8001856:	68bb      	ldr	r3, [r7, #8]
 8001858:	1ad3      	subs	r3, r2, r3
 800185a:	68fa      	ldr	r2, [r7, #12]
 800185c:	429a      	cmp	r2, r3
 800185e:	d8f7      	bhi.n	8001850 <HAL_Delay+0x28>
  {
  }
}
 8001860:	bf00      	nop
 8001862:	bf00      	nop
 8001864:	3710      	adds	r7, #16
 8001866:	46bd      	mov	sp, r7
 8001868:	bd80      	pop	{r7, pc}
 800186a:	bf00      	nop
 800186c:	20000060 	.word	0x20000060

08001870 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001870:	b480      	push	{r7}
 8001872:	b085      	sub	sp, #20
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	f003 0307 	and.w	r3, r3, #7
 800187e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001880:	4b0c      	ldr	r3, [pc, #48]	; (80018b4 <__NVIC_SetPriorityGrouping+0x44>)
 8001882:	68db      	ldr	r3, [r3, #12]
 8001884:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001886:	68ba      	ldr	r2, [r7, #8]
 8001888:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800188c:	4013      	ands	r3, r2
 800188e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001894:	68bb      	ldr	r3, [r7, #8]
 8001896:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001898:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800189c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80018a2:	4a04      	ldr	r2, [pc, #16]	; (80018b4 <__NVIC_SetPriorityGrouping+0x44>)
 80018a4:	68bb      	ldr	r3, [r7, #8]
 80018a6:	60d3      	str	r3, [r2, #12]
}
 80018a8:	bf00      	nop
 80018aa:	3714      	adds	r7, #20
 80018ac:	46bd      	mov	sp, r7
 80018ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b2:	4770      	bx	lr
 80018b4:	e000ed00 	.word	0xe000ed00

080018b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80018b8:	b480      	push	{r7}
 80018ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018bc:	4b04      	ldr	r3, [pc, #16]	; (80018d0 <__NVIC_GetPriorityGrouping+0x18>)
 80018be:	68db      	ldr	r3, [r3, #12]
 80018c0:	0a1b      	lsrs	r3, r3, #8
 80018c2:	f003 0307 	and.w	r3, r3, #7
}
 80018c6:	4618      	mov	r0, r3
 80018c8:	46bd      	mov	sp, r7
 80018ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ce:	4770      	bx	lr
 80018d0:	e000ed00 	.word	0xe000ed00

080018d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018d4:	b480      	push	{r7}
 80018d6:	b083      	sub	sp, #12
 80018d8:	af00      	add	r7, sp, #0
 80018da:	4603      	mov	r3, r0
 80018dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	db0b      	blt.n	80018fe <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80018e6:	79fb      	ldrb	r3, [r7, #7]
 80018e8:	f003 021f 	and.w	r2, r3, #31
 80018ec:	4907      	ldr	r1, [pc, #28]	; (800190c <__NVIC_EnableIRQ+0x38>)
 80018ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018f2:	095b      	lsrs	r3, r3, #5
 80018f4:	2001      	movs	r0, #1
 80018f6:	fa00 f202 	lsl.w	r2, r0, r2
 80018fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80018fe:	bf00      	nop
 8001900:	370c      	adds	r7, #12
 8001902:	46bd      	mov	sp, r7
 8001904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001908:	4770      	bx	lr
 800190a:	bf00      	nop
 800190c:	e000e100 	.word	0xe000e100

08001910 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001910:	b480      	push	{r7}
 8001912:	b083      	sub	sp, #12
 8001914:	af00      	add	r7, sp, #0
 8001916:	4603      	mov	r3, r0
 8001918:	6039      	str	r1, [r7, #0]
 800191a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800191c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001920:	2b00      	cmp	r3, #0
 8001922:	db0a      	blt.n	800193a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001924:	683b      	ldr	r3, [r7, #0]
 8001926:	b2da      	uxtb	r2, r3
 8001928:	490c      	ldr	r1, [pc, #48]	; (800195c <__NVIC_SetPriority+0x4c>)
 800192a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800192e:	0112      	lsls	r2, r2, #4
 8001930:	b2d2      	uxtb	r2, r2
 8001932:	440b      	add	r3, r1
 8001934:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001938:	e00a      	b.n	8001950 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800193a:	683b      	ldr	r3, [r7, #0]
 800193c:	b2da      	uxtb	r2, r3
 800193e:	4908      	ldr	r1, [pc, #32]	; (8001960 <__NVIC_SetPriority+0x50>)
 8001940:	79fb      	ldrb	r3, [r7, #7]
 8001942:	f003 030f 	and.w	r3, r3, #15
 8001946:	3b04      	subs	r3, #4
 8001948:	0112      	lsls	r2, r2, #4
 800194a:	b2d2      	uxtb	r2, r2
 800194c:	440b      	add	r3, r1
 800194e:	761a      	strb	r2, [r3, #24]
}
 8001950:	bf00      	nop
 8001952:	370c      	adds	r7, #12
 8001954:	46bd      	mov	sp, r7
 8001956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195a:	4770      	bx	lr
 800195c:	e000e100 	.word	0xe000e100
 8001960:	e000ed00 	.word	0xe000ed00

08001964 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001964:	b480      	push	{r7}
 8001966:	b089      	sub	sp, #36	; 0x24
 8001968:	af00      	add	r7, sp, #0
 800196a:	60f8      	str	r0, [r7, #12]
 800196c:	60b9      	str	r1, [r7, #8]
 800196e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	f003 0307 	and.w	r3, r3, #7
 8001976:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001978:	69fb      	ldr	r3, [r7, #28]
 800197a:	f1c3 0307 	rsb	r3, r3, #7
 800197e:	2b04      	cmp	r3, #4
 8001980:	bf28      	it	cs
 8001982:	2304      	movcs	r3, #4
 8001984:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001986:	69fb      	ldr	r3, [r7, #28]
 8001988:	3304      	adds	r3, #4
 800198a:	2b06      	cmp	r3, #6
 800198c:	d902      	bls.n	8001994 <NVIC_EncodePriority+0x30>
 800198e:	69fb      	ldr	r3, [r7, #28]
 8001990:	3b03      	subs	r3, #3
 8001992:	e000      	b.n	8001996 <NVIC_EncodePriority+0x32>
 8001994:	2300      	movs	r3, #0
 8001996:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001998:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800199c:	69bb      	ldr	r3, [r7, #24]
 800199e:	fa02 f303 	lsl.w	r3, r2, r3
 80019a2:	43da      	mvns	r2, r3
 80019a4:	68bb      	ldr	r3, [r7, #8]
 80019a6:	401a      	ands	r2, r3
 80019a8:	697b      	ldr	r3, [r7, #20]
 80019aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80019ac:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80019b0:	697b      	ldr	r3, [r7, #20]
 80019b2:	fa01 f303 	lsl.w	r3, r1, r3
 80019b6:	43d9      	mvns	r1, r3
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019bc:	4313      	orrs	r3, r2
         );
}
 80019be:	4618      	mov	r0, r3
 80019c0:	3724      	adds	r7, #36	; 0x24
 80019c2:	46bd      	mov	sp, r7
 80019c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c8:	4770      	bx	lr
	...

080019cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b082      	sub	sp, #8
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	3b01      	subs	r3, #1
 80019d8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80019dc:	d301      	bcc.n	80019e2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80019de:	2301      	movs	r3, #1
 80019e0:	e00f      	b.n	8001a02 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80019e2:	4a0a      	ldr	r2, [pc, #40]	; (8001a0c <SysTick_Config+0x40>)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	3b01      	subs	r3, #1
 80019e8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80019ea:	210f      	movs	r1, #15
 80019ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80019f0:	f7ff ff8e 	bl	8001910 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019f4:	4b05      	ldr	r3, [pc, #20]	; (8001a0c <SysTick_Config+0x40>)
 80019f6:	2200      	movs	r2, #0
 80019f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019fa:	4b04      	ldr	r3, [pc, #16]	; (8001a0c <SysTick_Config+0x40>)
 80019fc:	2207      	movs	r2, #7
 80019fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a00:	2300      	movs	r3, #0
}
 8001a02:	4618      	mov	r0, r3
 8001a04:	3708      	adds	r7, #8
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bd80      	pop	{r7, pc}
 8001a0a:	bf00      	nop
 8001a0c:	e000e010 	.word	0xe000e010

08001a10 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b082      	sub	sp, #8
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a18:	6878      	ldr	r0, [r7, #4]
 8001a1a:	f7ff ff29 	bl	8001870 <__NVIC_SetPriorityGrouping>
}
 8001a1e:	bf00      	nop
 8001a20:	3708      	adds	r7, #8
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bd80      	pop	{r7, pc}

08001a26 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a26:	b580      	push	{r7, lr}
 8001a28:	b086      	sub	sp, #24
 8001a2a:	af00      	add	r7, sp, #0
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	60b9      	str	r1, [r7, #8]
 8001a30:	607a      	str	r2, [r7, #4]
 8001a32:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001a34:	2300      	movs	r3, #0
 8001a36:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001a38:	f7ff ff3e 	bl	80018b8 <__NVIC_GetPriorityGrouping>
 8001a3c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a3e:	687a      	ldr	r2, [r7, #4]
 8001a40:	68b9      	ldr	r1, [r7, #8]
 8001a42:	6978      	ldr	r0, [r7, #20]
 8001a44:	f7ff ff8e 	bl	8001964 <NVIC_EncodePriority>
 8001a48:	4602      	mov	r2, r0
 8001a4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a4e:	4611      	mov	r1, r2
 8001a50:	4618      	mov	r0, r3
 8001a52:	f7ff ff5d 	bl	8001910 <__NVIC_SetPriority>
}
 8001a56:	bf00      	nop
 8001a58:	3718      	adds	r7, #24
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	bd80      	pop	{r7, pc}

08001a5e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a5e:	b580      	push	{r7, lr}
 8001a60:	b082      	sub	sp, #8
 8001a62:	af00      	add	r7, sp, #0
 8001a64:	4603      	mov	r3, r0
 8001a66:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	f7ff ff31 	bl	80018d4 <__NVIC_EnableIRQ>
}
 8001a72:	bf00      	nop
 8001a74:	3708      	adds	r7, #8
 8001a76:	46bd      	mov	sp, r7
 8001a78:	bd80      	pop	{r7, pc}

08001a7a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a7a:	b580      	push	{r7, lr}
 8001a7c:	b082      	sub	sp, #8
 8001a7e:	af00      	add	r7, sp, #0
 8001a80:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a82:	6878      	ldr	r0, [r7, #4]
 8001a84:	f7ff ffa2 	bl	80019cc <SysTick_Config>
 8001a88:	4603      	mov	r3, r0
}
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	3708      	adds	r7, #8
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	bd80      	pop	{r7, pc}

08001a92 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8001a92:	b580      	push	{r7, lr}
 8001a94:	b082      	sub	sp, #8
 8001a96:	af00      	add	r7, sp, #0
 8001a98:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d101      	bne.n	8001aa4 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8001aa0:	2301      	movs	r3, #1
 8001aa2:	e014      	b.n	8001ace <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	791b      	ldrb	r3, [r3, #4]
 8001aa8:	b2db      	uxtb	r3, r3
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d105      	bne.n	8001aba <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8001ab4:	6878      	ldr	r0, [r7, #4]
 8001ab6:	f7ff fcb1 	bl	800141c <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	2202      	movs	r2, #2
 8001abe:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	2201      	movs	r2, #1
 8001aca:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8001acc:	2300      	movs	r3, #0
}
 8001ace:	4618      	mov	r0, r3
 8001ad0:	3708      	adds	r7, #8
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bd80      	pop	{r7, pc}

08001ad6 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (when supported)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8001ad6:	b480      	push	{r7}
 8001ad8:	b083      	sub	sp, #12
 8001ada:	af00      	add	r7, sp, #0
 8001adc:	6078      	str	r0, [r7, #4]
 8001ade:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	795b      	ldrb	r3, [r3, #5]
 8001ae4:	2b01      	cmp	r3, #1
 8001ae6:	d101      	bne.n	8001aec <HAL_DAC_Start+0x16>
 8001ae8:	2302      	movs	r3, #2
 8001aea:	e03b      	b.n	8001b64 <HAL_DAC_Start+0x8e>
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	2201      	movs	r2, #1
 8001af0:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	2202      	movs	r2, #2
 8001af6:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	6819      	ldr	r1, [r3, #0]
 8001afe:	683b      	ldr	r3, [r7, #0]
 8001b00:	f003 0310 	and.w	r3, r3, #16
 8001b04:	2201      	movs	r2, #1
 8001b06:	409a      	lsls	r2, r3
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	430a      	orrs	r2, r1
 8001b0e:	601a      	str	r2, [r3, #0]

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx                                     */

#if defined (STM32L431xx) || defined (STM32L432xx) || defined (STM32L433xx) || defined (STM32L442xx) || defined (STM32L443xx) || \
    defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || defined (STM32L496xx) || defined (STM32L4A6xx)
  if(Channel == DAC_CHANNEL_1)
 8001b10:	683b      	ldr	r3, [r7, #0]
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d10f      	bne.n	8001b36 <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_CR_TEN1)
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 8001b20:	2b04      	cmp	r3, #4
 8001b22:	d118      	bne.n	8001b56 <HAL_DAC_Start+0x80>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	685a      	ldr	r2, [r3, #4]
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f042 0201 	orr.w	r2, r2, #1
 8001b32:	605a      	str	r2, [r3, #4]
 8001b34:	e00f      	b.n	8001b56 <HAL_DAC_Start+0x80>
    }
  }
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == DAC_CR_TEN2)
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8001b40:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001b44:	d107      	bne.n	8001b56 <HAL_DAC_Start+0x80>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	685a      	ldr	r2, [r3, #4]
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f042 0202 	orr.w	r2, r2, #2
 8001b54:	605a      	str	r2, [r3, #4]
    /* Enable the selected DAC software conversion */
    SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
  }
#endif /* STM32L451xx STM32L452xx STM32L462xx */
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	2201      	movs	r2, #1
 8001b5a:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	2200      	movs	r2, #0
 8001b60:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001b62:	2300      	movs	r3, #0
}
 8001b64:	4618      	mov	r0, r3
 8001b66:	370c      	adds	r7, #12
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6e:	4770      	bx	lr

08001b70 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b088      	sub	sp, #32
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	60f8      	str	r0, [r7, #12]
 8001b78:	60b9      	str	r1, [r7, #8]
 8001b7a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	61fb      	str	r3, [r7, #28]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	795b      	ldrb	r3, [r3, #5]
 8001b84:	2b01      	cmp	r3, #1
 8001b86:	d101      	bne.n	8001b8c <HAL_DAC_ConfigChannel+0x1c>
 8001b88:	2302      	movs	r3, #2
 8001b8a:	e107      	b.n	8001d9c <HAL_DAC_ConfigChannel+0x22c>
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	2201      	movs	r2, #1
 8001b90:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	2202      	movs	r2, #2
 8001b96:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8001b98:	68bb      	ldr	r3, [r7, #8]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	2b04      	cmp	r3, #4
 8001b9e:	d174      	bne.n	8001c8a <HAL_DAC_ConfigChannel+0x11a>
  /* Sample on old configuration */
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8001ba0:	f7ff fe36 	bl	8001810 <HAL_GetTick>
 8001ba4:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d134      	bne.n	8001c16 <HAL_DAC_ConfigChannel+0xa6>
    {

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8001bac:	e011      	b.n	8001bd2 <HAL_DAC_ConfigChannel+0x62>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8001bae:	f7ff fe2f 	bl	8001810 <HAL_GetTick>
 8001bb2:	4602      	mov	r2, r0
 8001bb4:	69fb      	ldr	r3, [r7, #28]
 8001bb6:	1ad3      	subs	r3, r2, r3
 8001bb8:	2b01      	cmp	r3, #1
 8001bba:	d90a      	bls.n	8001bd2 <HAL_DAC_ConfigChannel+0x62>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	691b      	ldr	r3, [r3, #16]
 8001bc0:	f043 0208 	orr.w	r2, r3, #8
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	2203      	movs	r2, #3
 8001bcc:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8001bce:	2303      	movs	r3, #3
 8001bd0:	e0e4      	b.n	8001d9c <HAL_DAC_ConfigChannel+0x22c>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001bd8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d1e6      	bne.n	8001bae <HAL_DAC_ConfigChannel+0x3e>
        }
      }
      HAL_Delay(1);
 8001be0:	2001      	movs	r0, #1
 8001be2:	f7ff fe21 	bl	8001828 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	68ba      	ldr	r2, [r7, #8]
 8001bec:	6992      	ldr	r2, [r2, #24]
 8001bee:	641a      	str	r2, [r3, #64]	; 0x40
 8001bf0:	e01e      	b.n	8001c30 <HAL_DAC_ConfigChannel+0xc0>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8001bf2:	f7ff fe0d 	bl	8001810 <HAL_GetTick>
 8001bf6:	4602      	mov	r2, r0
 8001bf8:	69fb      	ldr	r3, [r7, #28]
 8001bfa:	1ad3      	subs	r3, r2, r3
 8001bfc:	2b01      	cmp	r3, #1
 8001bfe:	d90a      	bls.n	8001c16 <HAL_DAC_ConfigChannel+0xa6>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	691b      	ldr	r3, [r3, #16]
 8001c04:	f043 0208 	orr.w	r2, r3, #8
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	2203      	movs	r2, #3
 8001c10:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8001c12:	2303      	movs	r3, #3
 8001c14:	e0c2      	b.n	8001d9c <HAL_DAC_ConfigChannel+0x22c>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	dbe8      	blt.n	8001bf2 <HAL_DAC_ConfigChannel+0x82>
        }
      }
      HAL_Delay(1U);
 8001c20:	2001      	movs	r0, #1
 8001c22:	f7ff fe01 	bl	8001828 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	68ba      	ldr	r2, [r7, #8]
 8001c2c:	6992      	ldr	r2, [r2, #24]
 8001c2e:	645a      	str	r2, [r3, #68]	; 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	f003 0310 	and.w	r3, r3, #16
 8001c3c:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8001c40:	fa01 f303 	lsl.w	r3, r1, r3
 8001c44:	43db      	mvns	r3, r3
 8001c46:	ea02 0103 	and.w	r1, r2, r3
 8001c4a:	68bb      	ldr	r3, [r7, #8]
 8001c4c:	69da      	ldr	r2, [r3, #28]
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	f003 0310 	and.w	r3, r3, #16
 8001c54:	409a      	lsls	r2, r3
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	430a      	orrs	r2, r1
 8001c5c:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	f003 0310 	and.w	r3, r3, #16
 8001c6a:	21ff      	movs	r1, #255	; 0xff
 8001c6c:	fa01 f303 	lsl.w	r3, r1, r3
 8001c70:	43db      	mvns	r3, r3
 8001c72:	ea02 0103 	and.w	r1, r2, r3
 8001c76:	68bb      	ldr	r3, [r7, #8]
 8001c78:	6a1a      	ldr	r2, [r3, #32]
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	f003 0310 	and.w	r3, r3, #16
 8001c80:	409a      	lsls	r2, r3
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	430a      	orrs	r2, r1
 8001c88:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8001c8a:	68bb      	ldr	r3, [r7, #8]
 8001c8c:	691b      	ldr	r3, [r3, #16]
 8001c8e:	2b01      	cmp	r3, #1
 8001c90:	d11d      	bne.n	8001cce <HAL_DAC_ConfigChannel+0x15e>
  /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c98:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	f003 0310 	and.w	r3, r3, #16
 8001ca0:	221f      	movs	r2, #31
 8001ca2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca6:	43db      	mvns	r3, r3
 8001ca8:	69ba      	ldr	r2, [r7, #24]
 8001caa:	4013      	ands	r3, r2
 8001cac:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8001cae:	68bb      	ldr	r3, [r7, #8]
 8001cb0:	695b      	ldr	r3, [r3, #20]
 8001cb2:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	f003 0310 	and.w	r3, r3, #16
 8001cba:	697a      	ldr	r2, [r7, #20]
 8001cbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc0:	69ba      	ldr	r2, [r7, #24]
 8001cc2:	4313      	orrs	r3, r2
 8001cc4:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	69ba      	ldr	r2, [r7, #24]
 8001ccc:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001cd4:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	f003 0310 	and.w	r3, r3, #16
 8001cdc:	2207      	movs	r2, #7
 8001cde:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce2:	43db      	mvns	r3, r3
 8001ce4:	69ba      	ldr	r2, [r7, #24]
 8001ce6:	4013      	ands	r3, r2
 8001ce8:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 8001cea:	68bb      	ldr	r3, [r7, #8]
 8001cec:	681a      	ldr	r2, [r3, #0]
 8001cee:	68bb      	ldr	r3, [r7, #8]
 8001cf0:	689b      	ldr	r3, [r3, #8]
 8001cf2:	431a      	orrs	r2, r3
 8001cf4:	68bb      	ldr	r3, [r7, #8]
 8001cf6:	68db      	ldr	r3, [r3, #12]
 8001cf8:	4313      	orrs	r3, r2
 8001cfa:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	f003 0310 	and.w	r3, r3, #16
 8001d02:	697a      	ldr	r2, [r7, #20]
 8001d04:	fa02 f303 	lsl.w	r3, r2, r3
 8001d08:	69ba      	ldr	r2, [r7, #24]
 8001d0a:	4313      	orrs	r3, r2
 8001d0c:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	69ba      	ldr	r2, [r7, #24]
 8001d14:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	6819      	ldr	r1, [r3, #0]
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	f003 0310 	and.w	r3, r3, #16
 8001d22:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001d26:	fa02 f303 	lsl.w	r3, r2, r3
 8001d2a:	43da      	mvns	r2, r3
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	400a      	ands	r2, r1
 8001d32:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	f003 0310 	and.w	r3, r3, #16
 8001d42:	f640 72fc 	movw	r2, #4092	; 0xffc
 8001d46:	fa02 f303 	lsl.w	r3, r2, r3
 8001d4a:	43db      	mvns	r3, r3
 8001d4c:	69ba      	ldr	r2, [r7, #24]
 8001d4e:	4013      	ands	r3, r2
 8001d50:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8001d52:	68bb      	ldr	r3, [r7, #8]
 8001d54:	685b      	ldr	r3, [r3, #4]
 8001d56:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	f003 0310 	and.w	r3, r3, #16
 8001d5e:	697a      	ldr	r2, [r7, #20]
 8001d60:	fa02 f303 	lsl.w	r3, r2, r3
 8001d64:	69ba      	ldr	r2, [r7, #24]
 8001d66:	4313      	orrs	r3, r2
 8001d68:	61bb      	str	r3, [r7, #24]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	69ba      	ldr	r2, [r7, #24]
 8001d70:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	6819      	ldr	r1, [r3, #0]
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	f003 0310 	and.w	r3, r3, #16
 8001d7e:	22c0      	movs	r2, #192	; 0xc0
 8001d80:	fa02 f303 	lsl.w	r3, r2, r3
 8001d84:	43da      	mvns	r2, r3
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	400a      	ands	r2, r1
 8001d8c:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	2201      	movs	r2, #1
 8001d92:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	2200      	movs	r2, #0
 8001d98:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001d9a:	2300      	movs	r3, #0
}
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	3720      	adds	r7, #32
 8001da0:	46bd      	mov	sp, r7
 8001da2:	bd80      	pop	{r7, pc}

08001da4 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001da4:	b480      	push	{r7}
 8001da6:	b085      	sub	sp, #20
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001dac:	2300      	movs	r3, #0
 8001dae:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001db6:	b2db      	uxtb	r3, r3
 8001db8:	2b02      	cmp	r3, #2
 8001dba:	d008      	beq.n	8001dce <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	2204      	movs	r2, #4
 8001dc0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001dca:	2301      	movs	r3, #1
 8001dcc:	e022      	b.n	8001e14 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	681a      	ldr	r2, [r3, #0]
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f022 020e 	bic.w	r2, r2, #14
 8001ddc:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	681a      	ldr	r2, [r3, #0]
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f022 0201 	bic.w	r2, r2, #1
 8001dec:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001df2:	f003 021c 	and.w	r2, r3, #28
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dfa:	2101      	movs	r1, #1
 8001dfc:	fa01 f202 	lsl.w	r2, r1, r2
 8001e00:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	2201      	movs	r2, #1
 8001e06:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8001e12:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8001e14:	4618      	mov	r0, r3
 8001e16:	3714      	adds	r7, #20
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1e:	4770      	bx	lr

08001e20 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b084      	sub	sp, #16
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001e28:	2300      	movs	r3, #0
 8001e2a:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001e32:	b2db      	uxtb	r3, r3
 8001e34:	2b02      	cmp	r3, #2
 8001e36:	d005      	beq.n	8001e44 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	2204      	movs	r2, #4
 8001e3c:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001e3e:	2301      	movs	r3, #1
 8001e40:	73fb      	strb	r3, [r7, #15]
 8001e42:	e029      	b.n	8001e98 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	681a      	ldr	r2, [r3, #0]
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f022 020e 	bic.w	r2, r2, #14
 8001e52:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	681a      	ldr	r2, [r3, #0]
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f022 0201 	bic.w	r2, r2, #1
 8001e62:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e68:	f003 021c 	and.w	r2, r3, #28
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e70:	2101      	movs	r1, #1
 8001e72:	fa01 f202 	lsl.w	r2, r1, r2
 8001e76:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	2201      	movs	r2, #1
 8001e7c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	2200      	movs	r2, #0
 8001e84:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d003      	beq.n	8001e98 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e94:	6878      	ldr	r0, [r7, #4]
 8001e96:	4798      	blx	r3
    }
  }
  return status;
 8001e98:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	3710      	adds	r7, #16
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	bd80      	pop	{r7, pc}
	...

08001ea4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	b087      	sub	sp, #28
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
 8001eac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001eae:	2300      	movs	r3, #0
 8001eb0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001eb2:	e17f      	b.n	80021b4 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	681a      	ldr	r2, [r3, #0]
 8001eb8:	2101      	movs	r1, #1
 8001eba:	697b      	ldr	r3, [r7, #20]
 8001ebc:	fa01 f303 	lsl.w	r3, r1, r3
 8001ec0:	4013      	ands	r3, r2
 8001ec2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	f000 8171 	beq.w	80021ae <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	685b      	ldr	r3, [r3, #4]
 8001ed0:	2b01      	cmp	r3, #1
 8001ed2:	d00b      	beq.n	8001eec <HAL_GPIO_Init+0x48>
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	685b      	ldr	r3, [r3, #4]
 8001ed8:	2b02      	cmp	r3, #2
 8001eda:	d007      	beq.n	8001eec <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001edc:	683b      	ldr	r3, [r7, #0]
 8001ede:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001ee0:	2b11      	cmp	r3, #17
 8001ee2:	d003      	beq.n	8001eec <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	685b      	ldr	r3, [r3, #4]
 8001ee8:	2b12      	cmp	r3, #18
 8001eea:	d130      	bne.n	8001f4e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	689b      	ldr	r3, [r3, #8]
 8001ef0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001ef2:	697b      	ldr	r3, [r7, #20]
 8001ef4:	005b      	lsls	r3, r3, #1
 8001ef6:	2203      	movs	r2, #3
 8001ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8001efc:	43db      	mvns	r3, r3
 8001efe:	693a      	ldr	r2, [r7, #16]
 8001f00:	4013      	ands	r3, r2
 8001f02:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	68da      	ldr	r2, [r3, #12]
 8001f08:	697b      	ldr	r3, [r7, #20]
 8001f0a:	005b      	lsls	r3, r3, #1
 8001f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f10:	693a      	ldr	r2, [r7, #16]
 8001f12:	4313      	orrs	r3, r2
 8001f14:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	693a      	ldr	r2, [r7, #16]
 8001f1a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	685b      	ldr	r3, [r3, #4]
 8001f20:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001f22:	2201      	movs	r2, #1
 8001f24:	697b      	ldr	r3, [r7, #20]
 8001f26:	fa02 f303 	lsl.w	r3, r2, r3
 8001f2a:	43db      	mvns	r3, r3
 8001f2c:	693a      	ldr	r2, [r7, #16]
 8001f2e:	4013      	ands	r3, r2
 8001f30:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	685b      	ldr	r3, [r3, #4]
 8001f36:	091b      	lsrs	r3, r3, #4
 8001f38:	f003 0201 	and.w	r2, r3, #1
 8001f3c:	697b      	ldr	r3, [r7, #20]
 8001f3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f42:	693a      	ldr	r2, [r7, #16]
 8001f44:	4313      	orrs	r3, r2
 8001f46:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	693a      	ldr	r2, [r7, #16]
 8001f4c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001f4e:	683b      	ldr	r3, [r7, #0]
 8001f50:	685b      	ldr	r3, [r3, #4]
 8001f52:	f003 0303 	and.w	r3, r3, #3
 8001f56:	2b03      	cmp	r3, #3
 8001f58:	d118      	bne.n	8001f8c <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f5e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001f60:	2201      	movs	r2, #1
 8001f62:	697b      	ldr	r3, [r7, #20]
 8001f64:	fa02 f303 	lsl.w	r3, r2, r3
 8001f68:	43db      	mvns	r3, r3
 8001f6a:	693a      	ldr	r2, [r7, #16]
 8001f6c:	4013      	ands	r3, r2
 8001f6e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	685b      	ldr	r3, [r3, #4]
 8001f74:	08db      	lsrs	r3, r3, #3
 8001f76:	f003 0201 	and.w	r2, r3, #1
 8001f7a:	697b      	ldr	r3, [r7, #20]
 8001f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f80:	693a      	ldr	r2, [r7, #16]
 8001f82:	4313      	orrs	r3, r2
 8001f84:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	693a      	ldr	r2, [r7, #16]
 8001f8a:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	68db      	ldr	r3, [r3, #12]
 8001f90:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001f92:	697b      	ldr	r3, [r7, #20]
 8001f94:	005b      	lsls	r3, r3, #1
 8001f96:	2203      	movs	r2, #3
 8001f98:	fa02 f303 	lsl.w	r3, r2, r3
 8001f9c:	43db      	mvns	r3, r3
 8001f9e:	693a      	ldr	r2, [r7, #16]
 8001fa0:	4013      	ands	r3, r2
 8001fa2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	689a      	ldr	r2, [r3, #8]
 8001fa8:	697b      	ldr	r3, [r7, #20]
 8001faa:	005b      	lsls	r3, r3, #1
 8001fac:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb0:	693a      	ldr	r2, [r7, #16]
 8001fb2:	4313      	orrs	r3, r2
 8001fb4:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	693a      	ldr	r2, [r7, #16]
 8001fba:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	685b      	ldr	r3, [r3, #4]
 8001fc0:	2b02      	cmp	r3, #2
 8001fc2:	d003      	beq.n	8001fcc <HAL_GPIO_Init+0x128>
 8001fc4:	683b      	ldr	r3, [r7, #0]
 8001fc6:	685b      	ldr	r3, [r3, #4]
 8001fc8:	2b12      	cmp	r3, #18
 8001fca:	d123      	bne.n	8002014 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001fcc:	697b      	ldr	r3, [r7, #20]
 8001fce:	08da      	lsrs	r2, r3, #3
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	3208      	adds	r2, #8
 8001fd4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001fd8:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001fda:	697b      	ldr	r3, [r7, #20]
 8001fdc:	f003 0307 	and.w	r3, r3, #7
 8001fe0:	009b      	lsls	r3, r3, #2
 8001fe2:	220f      	movs	r2, #15
 8001fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe8:	43db      	mvns	r3, r3
 8001fea:	693a      	ldr	r2, [r7, #16]
 8001fec:	4013      	ands	r3, r2
 8001fee:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	691a      	ldr	r2, [r3, #16]
 8001ff4:	697b      	ldr	r3, [r7, #20]
 8001ff6:	f003 0307 	and.w	r3, r3, #7
 8001ffa:	009b      	lsls	r3, r3, #2
 8001ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8002000:	693a      	ldr	r2, [r7, #16]
 8002002:	4313      	orrs	r3, r2
 8002004:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002006:	697b      	ldr	r3, [r7, #20]
 8002008:	08da      	lsrs	r2, r3, #3
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	3208      	adds	r2, #8
 800200e:	6939      	ldr	r1, [r7, #16]
 8002010:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800201a:	697b      	ldr	r3, [r7, #20]
 800201c:	005b      	lsls	r3, r3, #1
 800201e:	2203      	movs	r2, #3
 8002020:	fa02 f303 	lsl.w	r3, r2, r3
 8002024:	43db      	mvns	r3, r3
 8002026:	693a      	ldr	r2, [r7, #16]
 8002028:	4013      	ands	r3, r2
 800202a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	685b      	ldr	r3, [r3, #4]
 8002030:	f003 0203 	and.w	r2, r3, #3
 8002034:	697b      	ldr	r3, [r7, #20]
 8002036:	005b      	lsls	r3, r3, #1
 8002038:	fa02 f303 	lsl.w	r3, r2, r3
 800203c:	693a      	ldr	r2, [r7, #16]
 800203e:	4313      	orrs	r3, r2
 8002040:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	693a      	ldr	r2, [r7, #16]
 8002046:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002048:	683b      	ldr	r3, [r7, #0]
 800204a:	685b      	ldr	r3, [r3, #4]
 800204c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002050:	2b00      	cmp	r3, #0
 8002052:	f000 80ac 	beq.w	80021ae <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002056:	4b5f      	ldr	r3, [pc, #380]	; (80021d4 <HAL_GPIO_Init+0x330>)
 8002058:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800205a:	4a5e      	ldr	r2, [pc, #376]	; (80021d4 <HAL_GPIO_Init+0x330>)
 800205c:	f043 0301 	orr.w	r3, r3, #1
 8002060:	6613      	str	r3, [r2, #96]	; 0x60
 8002062:	4b5c      	ldr	r3, [pc, #368]	; (80021d4 <HAL_GPIO_Init+0x330>)
 8002064:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002066:	f003 0301 	and.w	r3, r3, #1
 800206a:	60bb      	str	r3, [r7, #8]
 800206c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800206e:	4a5a      	ldr	r2, [pc, #360]	; (80021d8 <HAL_GPIO_Init+0x334>)
 8002070:	697b      	ldr	r3, [r7, #20]
 8002072:	089b      	lsrs	r3, r3, #2
 8002074:	3302      	adds	r3, #2
 8002076:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800207a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800207c:	697b      	ldr	r3, [r7, #20]
 800207e:	f003 0303 	and.w	r3, r3, #3
 8002082:	009b      	lsls	r3, r3, #2
 8002084:	220f      	movs	r2, #15
 8002086:	fa02 f303 	lsl.w	r3, r2, r3
 800208a:	43db      	mvns	r3, r3
 800208c:	693a      	ldr	r2, [r7, #16]
 800208e:	4013      	ands	r3, r2
 8002090:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002098:	d025      	beq.n	80020e6 <HAL_GPIO_Init+0x242>
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	4a4f      	ldr	r2, [pc, #316]	; (80021dc <HAL_GPIO_Init+0x338>)
 800209e:	4293      	cmp	r3, r2
 80020a0:	d01f      	beq.n	80020e2 <HAL_GPIO_Init+0x23e>
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	4a4e      	ldr	r2, [pc, #312]	; (80021e0 <HAL_GPIO_Init+0x33c>)
 80020a6:	4293      	cmp	r3, r2
 80020a8:	d019      	beq.n	80020de <HAL_GPIO_Init+0x23a>
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	4a4d      	ldr	r2, [pc, #308]	; (80021e4 <HAL_GPIO_Init+0x340>)
 80020ae:	4293      	cmp	r3, r2
 80020b0:	d013      	beq.n	80020da <HAL_GPIO_Init+0x236>
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	4a4c      	ldr	r2, [pc, #304]	; (80021e8 <HAL_GPIO_Init+0x344>)
 80020b6:	4293      	cmp	r3, r2
 80020b8:	d00d      	beq.n	80020d6 <HAL_GPIO_Init+0x232>
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	4a4b      	ldr	r2, [pc, #300]	; (80021ec <HAL_GPIO_Init+0x348>)
 80020be:	4293      	cmp	r3, r2
 80020c0:	d007      	beq.n	80020d2 <HAL_GPIO_Init+0x22e>
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	4a4a      	ldr	r2, [pc, #296]	; (80021f0 <HAL_GPIO_Init+0x34c>)
 80020c6:	4293      	cmp	r3, r2
 80020c8:	d101      	bne.n	80020ce <HAL_GPIO_Init+0x22a>
 80020ca:	2306      	movs	r3, #6
 80020cc:	e00c      	b.n	80020e8 <HAL_GPIO_Init+0x244>
 80020ce:	2307      	movs	r3, #7
 80020d0:	e00a      	b.n	80020e8 <HAL_GPIO_Init+0x244>
 80020d2:	2305      	movs	r3, #5
 80020d4:	e008      	b.n	80020e8 <HAL_GPIO_Init+0x244>
 80020d6:	2304      	movs	r3, #4
 80020d8:	e006      	b.n	80020e8 <HAL_GPIO_Init+0x244>
 80020da:	2303      	movs	r3, #3
 80020dc:	e004      	b.n	80020e8 <HAL_GPIO_Init+0x244>
 80020de:	2302      	movs	r3, #2
 80020e0:	e002      	b.n	80020e8 <HAL_GPIO_Init+0x244>
 80020e2:	2301      	movs	r3, #1
 80020e4:	e000      	b.n	80020e8 <HAL_GPIO_Init+0x244>
 80020e6:	2300      	movs	r3, #0
 80020e8:	697a      	ldr	r2, [r7, #20]
 80020ea:	f002 0203 	and.w	r2, r2, #3
 80020ee:	0092      	lsls	r2, r2, #2
 80020f0:	4093      	lsls	r3, r2
 80020f2:	693a      	ldr	r2, [r7, #16]
 80020f4:	4313      	orrs	r3, r2
 80020f6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80020f8:	4937      	ldr	r1, [pc, #220]	; (80021d8 <HAL_GPIO_Init+0x334>)
 80020fa:	697b      	ldr	r3, [r7, #20]
 80020fc:	089b      	lsrs	r3, r3, #2
 80020fe:	3302      	adds	r3, #2
 8002100:	693a      	ldr	r2, [r7, #16]
 8002102:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002106:	4b3b      	ldr	r3, [pc, #236]	; (80021f4 <HAL_GPIO_Init+0x350>)
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	43db      	mvns	r3, r3
 8002110:	693a      	ldr	r2, [r7, #16]
 8002112:	4013      	ands	r3, r2
 8002114:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002116:	683b      	ldr	r3, [r7, #0]
 8002118:	685b      	ldr	r3, [r3, #4]
 800211a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800211e:	2b00      	cmp	r3, #0
 8002120:	d003      	beq.n	800212a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002122:	693a      	ldr	r2, [r7, #16]
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	4313      	orrs	r3, r2
 8002128:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800212a:	4a32      	ldr	r2, [pc, #200]	; (80021f4 <HAL_GPIO_Init+0x350>)
 800212c:	693b      	ldr	r3, [r7, #16]
 800212e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8002130:	4b30      	ldr	r3, [pc, #192]	; (80021f4 <HAL_GPIO_Init+0x350>)
 8002132:	685b      	ldr	r3, [r3, #4]
 8002134:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	43db      	mvns	r3, r3
 800213a:	693a      	ldr	r2, [r7, #16]
 800213c:	4013      	ands	r3, r2
 800213e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	685b      	ldr	r3, [r3, #4]
 8002144:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002148:	2b00      	cmp	r3, #0
 800214a:	d003      	beq.n	8002154 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 800214c:	693a      	ldr	r2, [r7, #16]
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	4313      	orrs	r3, r2
 8002152:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002154:	4a27      	ldr	r2, [pc, #156]	; (80021f4 <HAL_GPIO_Init+0x350>)
 8002156:	693b      	ldr	r3, [r7, #16]
 8002158:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800215a:	4b26      	ldr	r3, [pc, #152]	; (80021f4 <HAL_GPIO_Init+0x350>)
 800215c:	689b      	ldr	r3, [r3, #8]
 800215e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	43db      	mvns	r3, r3
 8002164:	693a      	ldr	r2, [r7, #16]
 8002166:	4013      	ands	r3, r2
 8002168:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800216a:	683b      	ldr	r3, [r7, #0]
 800216c:	685b      	ldr	r3, [r3, #4]
 800216e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002172:	2b00      	cmp	r3, #0
 8002174:	d003      	beq.n	800217e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8002176:	693a      	ldr	r2, [r7, #16]
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	4313      	orrs	r3, r2
 800217c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800217e:	4a1d      	ldr	r2, [pc, #116]	; (80021f4 <HAL_GPIO_Init+0x350>)
 8002180:	693b      	ldr	r3, [r7, #16]
 8002182:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002184:	4b1b      	ldr	r3, [pc, #108]	; (80021f4 <HAL_GPIO_Init+0x350>)
 8002186:	68db      	ldr	r3, [r3, #12]
 8002188:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	43db      	mvns	r3, r3
 800218e:	693a      	ldr	r2, [r7, #16]
 8002190:	4013      	ands	r3, r2
 8002192:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	685b      	ldr	r3, [r3, #4]
 8002198:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800219c:	2b00      	cmp	r3, #0
 800219e:	d003      	beq.n	80021a8 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80021a0:	693a      	ldr	r2, [r7, #16]
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	4313      	orrs	r3, r2
 80021a6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80021a8:	4a12      	ldr	r2, [pc, #72]	; (80021f4 <HAL_GPIO_Init+0x350>)
 80021aa:	693b      	ldr	r3, [r7, #16]
 80021ac:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80021ae:	697b      	ldr	r3, [r7, #20]
 80021b0:	3301      	adds	r3, #1
 80021b2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	681a      	ldr	r2, [r3, #0]
 80021b8:	697b      	ldr	r3, [r7, #20]
 80021ba:	fa22 f303 	lsr.w	r3, r2, r3
 80021be:	2b00      	cmp	r3, #0
 80021c0:	f47f ae78 	bne.w	8001eb4 <HAL_GPIO_Init+0x10>
  }
}
 80021c4:	bf00      	nop
 80021c6:	bf00      	nop
 80021c8:	371c      	adds	r7, #28
 80021ca:	46bd      	mov	sp, r7
 80021cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d0:	4770      	bx	lr
 80021d2:	bf00      	nop
 80021d4:	40021000 	.word	0x40021000
 80021d8:	40010000 	.word	0x40010000
 80021dc:	48000400 	.word	0x48000400
 80021e0:	48000800 	.word	0x48000800
 80021e4:	48000c00 	.word	0x48000c00
 80021e8:	48001000 	.word	0x48001000
 80021ec:	48001400 	.word	0x48001400
 80021f0:	48001800 	.word	0x48001800
 80021f4:	40010400 	.word	0x40010400

080021f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80021f8:	b480      	push	{r7}
 80021fa:	b083      	sub	sp, #12
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
 8002200:	460b      	mov	r3, r1
 8002202:	807b      	strh	r3, [r7, #2]
 8002204:	4613      	mov	r3, r2
 8002206:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002208:	787b      	ldrb	r3, [r7, #1]
 800220a:	2b00      	cmp	r3, #0
 800220c:	d003      	beq.n	8002216 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800220e:	887a      	ldrh	r2, [r7, #2]
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002214:	e002      	b.n	800221c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002216:	887a      	ldrh	r2, [r7, #2]
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800221c:	bf00      	nop
 800221e:	370c      	adds	r7, #12
 8002220:	46bd      	mov	sp, r7
 8002222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002226:	4770      	bx	lr

08002228 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002228:	b480      	push	{r7}
 800222a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800222c:	4b04      	ldr	r3, [pc, #16]	; (8002240 <HAL_PWREx_GetVoltageRange+0x18>)
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002234:	4618      	mov	r0, r3
 8002236:	46bd      	mov	sp, r7
 8002238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223c:	4770      	bx	lr
 800223e:	bf00      	nop
 8002240:	40007000 	.word	0x40007000

08002244 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002244:	b480      	push	{r7}
 8002246:	b085      	sub	sp, #20
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002252:	d130      	bne.n	80022b6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002254:	4b23      	ldr	r3, [pc, #140]	; (80022e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800225c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002260:	d038      	beq.n	80022d4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002262:	4b20      	ldr	r3, [pc, #128]	; (80022e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800226a:	4a1e      	ldr	r2, [pc, #120]	; (80022e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800226c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002270:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002272:	4b1d      	ldr	r3, [pc, #116]	; (80022e8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	2232      	movs	r2, #50	; 0x32
 8002278:	fb02 f303 	mul.w	r3, r2, r3
 800227c:	4a1b      	ldr	r2, [pc, #108]	; (80022ec <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800227e:	fba2 2303 	umull	r2, r3, r2, r3
 8002282:	0c9b      	lsrs	r3, r3, #18
 8002284:	3301      	adds	r3, #1
 8002286:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002288:	e002      	b.n	8002290 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	3b01      	subs	r3, #1
 800228e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002290:	4b14      	ldr	r3, [pc, #80]	; (80022e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002292:	695b      	ldr	r3, [r3, #20]
 8002294:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002298:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800229c:	d102      	bne.n	80022a4 <HAL_PWREx_ControlVoltageScaling+0x60>
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d1f2      	bne.n	800228a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80022a4:	4b0f      	ldr	r3, [pc, #60]	; (80022e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80022a6:	695b      	ldr	r3, [r3, #20]
 80022a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80022b0:	d110      	bne.n	80022d4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80022b2:	2303      	movs	r3, #3
 80022b4:	e00f      	b.n	80022d6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80022b6:	4b0b      	ldr	r3, [pc, #44]	; (80022e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80022be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80022c2:	d007      	beq.n	80022d4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80022c4:	4b07      	ldr	r3, [pc, #28]	; (80022e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80022cc:	4a05      	ldr	r2, [pc, #20]	; (80022e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80022ce:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80022d2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80022d4:	2300      	movs	r3, #0
}
 80022d6:	4618      	mov	r0, r3
 80022d8:	3714      	adds	r7, #20
 80022da:	46bd      	mov	sp, r7
 80022dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e0:	4770      	bx	lr
 80022e2:	bf00      	nop
 80022e4:	40007000 	.word	0x40007000
 80022e8:	20000058 	.word	0x20000058
 80022ec:	431bde83 	.word	0x431bde83

080022f0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b088      	sub	sp, #32
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d101      	bne.n	8002302 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80022fe:	2301      	movs	r3, #1
 8002300:	e3d4      	b.n	8002aac <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002302:	4ba1      	ldr	r3, [pc, #644]	; (8002588 <HAL_RCC_OscConfig+0x298>)
 8002304:	689b      	ldr	r3, [r3, #8]
 8002306:	f003 030c 	and.w	r3, r3, #12
 800230a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800230c:	4b9e      	ldr	r3, [pc, #632]	; (8002588 <HAL_RCC_OscConfig+0x298>)
 800230e:	68db      	ldr	r3, [r3, #12]
 8002310:	f003 0303 	and.w	r3, r3, #3
 8002314:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f003 0310 	and.w	r3, r3, #16
 800231e:	2b00      	cmp	r3, #0
 8002320:	f000 80e4 	beq.w	80024ec <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002324:	69bb      	ldr	r3, [r7, #24]
 8002326:	2b00      	cmp	r3, #0
 8002328:	d007      	beq.n	800233a <HAL_RCC_OscConfig+0x4a>
 800232a:	69bb      	ldr	r3, [r7, #24]
 800232c:	2b0c      	cmp	r3, #12
 800232e:	f040 808b 	bne.w	8002448 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002332:	697b      	ldr	r3, [r7, #20]
 8002334:	2b01      	cmp	r3, #1
 8002336:	f040 8087 	bne.w	8002448 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800233a:	4b93      	ldr	r3, [pc, #588]	; (8002588 <HAL_RCC_OscConfig+0x298>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f003 0302 	and.w	r3, r3, #2
 8002342:	2b00      	cmp	r3, #0
 8002344:	d005      	beq.n	8002352 <HAL_RCC_OscConfig+0x62>
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	699b      	ldr	r3, [r3, #24]
 800234a:	2b00      	cmp	r3, #0
 800234c:	d101      	bne.n	8002352 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800234e:	2301      	movs	r3, #1
 8002350:	e3ac      	b.n	8002aac <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	6a1a      	ldr	r2, [r3, #32]
 8002356:	4b8c      	ldr	r3, [pc, #560]	; (8002588 <HAL_RCC_OscConfig+0x298>)
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f003 0308 	and.w	r3, r3, #8
 800235e:	2b00      	cmp	r3, #0
 8002360:	d004      	beq.n	800236c <HAL_RCC_OscConfig+0x7c>
 8002362:	4b89      	ldr	r3, [pc, #548]	; (8002588 <HAL_RCC_OscConfig+0x298>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800236a:	e005      	b.n	8002378 <HAL_RCC_OscConfig+0x88>
 800236c:	4b86      	ldr	r3, [pc, #536]	; (8002588 <HAL_RCC_OscConfig+0x298>)
 800236e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002372:	091b      	lsrs	r3, r3, #4
 8002374:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002378:	4293      	cmp	r3, r2
 800237a:	d223      	bcs.n	80023c4 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	6a1b      	ldr	r3, [r3, #32]
 8002380:	4618      	mov	r0, r3
 8002382:	f000 fd41 	bl	8002e08 <RCC_SetFlashLatencyFromMSIRange>
 8002386:	4603      	mov	r3, r0
 8002388:	2b00      	cmp	r3, #0
 800238a:	d001      	beq.n	8002390 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 800238c:	2301      	movs	r3, #1
 800238e:	e38d      	b.n	8002aac <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002390:	4b7d      	ldr	r3, [pc, #500]	; (8002588 <HAL_RCC_OscConfig+0x298>)
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	4a7c      	ldr	r2, [pc, #496]	; (8002588 <HAL_RCC_OscConfig+0x298>)
 8002396:	f043 0308 	orr.w	r3, r3, #8
 800239a:	6013      	str	r3, [r2, #0]
 800239c:	4b7a      	ldr	r3, [pc, #488]	; (8002588 <HAL_RCC_OscConfig+0x298>)
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	6a1b      	ldr	r3, [r3, #32]
 80023a8:	4977      	ldr	r1, [pc, #476]	; (8002588 <HAL_RCC_OscConfig+0x298>)
 80023aa:	4313      	orrs	r3, r2
 80023ac:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80023ae:	4b76      	ldr	r3, [pc, #472]	; (8002588 <HAL_RCC_OscConfig+0x298>)
 80023b0:	685b      	ldr	r3, [r3, #4]
 80023b2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	69db      	ldr	r3, [r3, #28]
 80023ba:	021b      	lsls	r3, r3, #8
 80023bc:	4972      	ldr	r1, [pc, #456]	; (8002588 <HAL_RCC_OscConfig+0x298>)
 80023be:	4313      	orrs	r3, r2
 80023c0:	604b      	str	r3, [r1, #4]
 80023c2:	e025      	b.n	8002410 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80023c4:	4b70      	ldr	r3, [pc, #448]	; (8002588 <HAL_RCC_OscConfig+0x298>)
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	4a6f      	ldr	r2, [pc, #444]	; (8002588 <HAL_RCC_OscConfig+0x298>)
 80023ca:	f043 0308 	orr.w	r3, r3, #8
 80023ce:	6013      	str	r3, [r2, #0]
 80023d0:	4b6d      	ldr	r3, [pc, #436]	; (8002588 <HAL_RCC_OscConfig+0x298>)
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	6a1b      	ldr	r3, [r3, #32]
 80023dc:	496a      	ldr	r1, [pc, #424]	; (8002588 <HAL_RCC_OscConfig+0x298>)
 80023de:	4313      	orrs	r3, r2
 80023e0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80023e2:	4b69      	ldr	r3, [pc, #420]	; (8002588 <HAL_RCC_OscConfig+0x298>)
 80023e4:	685b      	ldr	r3, [r3, #4]
 80023e6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	69db      	ldr	r3, [r3, #28]
 80023ee:	021b      	lsls	r3, r3, #8
 80023f0:	4965      	ldr	r1, [pc, #404]	; (8002588 <HAL_RCC_OscConfig+0x298>)
 80023f2:	4313      	orrs	r3, r2
 80023f4:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80023f6:	69bb      	ldr	r3, [r7, #24]
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d109      	bne.n	8002410 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	6a1b      	ldr	r3, [r3, #32]
 8002400:	4618      	mov	r0, r3
 8002402:	f000 fd01 	bl	8002e08 <RCC_SetFlashLatencyFromMSIRange>
 8002406:	4603      	mov	r3, r0
 8002408:	2b00      	cmp	r3, #0
 800240a:	d001      	beq.n	8002410 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 800240c:	2301      	movs	r3, #1
 800240e:	e34d      	b.n	8002aac <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002410:	f000 fc36 	bl	8002c80 <HAL_RCC_GetSysClockFreq>
 8002414:	4602      	mov	r2, r0
 8002416:	4b5c      	ldr	r3, [pc, #368]	; (8002588 <HAL_RCC_OscConfig+0x298>)
 8002418:	689b      	ldr	r3, [r3, #8]
 800241a:	091b      	lsrs	r3, r3, #4
 800241c:	f003 030f 	and.w	r3, r3, #15
 8002420:	495a      	ldr	r1, [pc, #360]	; (800258c <HAL_RCC_OscConfig+0x29c>)
 8002422:	5ccb      	ldrb	r3, [r1, r3]
 8002424:	f003 031f 	and.w	r3, r3, #31
 8002428:	fa22 f303 	lsr.w	r3, r2, r3
 800242c:	4a58      	ldr	r2, [pc, #352]	; (8002590 <HAL_RCC_OscConfig+0x2a0>)
 800242e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002430:	4b58      	ldr	r3, [pc, #352]	; (8002594 <HAL_RCC_OscConfig+0x2a4>)
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	4618      	mov	r0, r3
 8002436:	f7ff f99b 	bl	8001770 <HAL_InitTick>
 800243a:	4603      	mov	r3, r0
 800243c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800243e:	7bfb      	ldrb	r3, [r7, #15]
 8002440:	2b00      	cmp	r3, #0
 8002442:	d052      	beq.n	80024ea <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002444:	7bfb      	ldrb	r3, [r7, #15]
 8002446:	e331      	b.n	8002aac <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	699b      	ldr	r3, [r3, #24]
 800244c:	2b00      	cmp	r3, #0
 800244e:	d032      	beq.n	80024b6 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002450:	4b4d      	ldr	r3, [pc, #308]	; (8002588 <HAL_RCC_OscConfig+0x298>)
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	4a4c      	ldr	r2, [pc, #304]	; (8002588 <HAL_RCC_OscConfig+0x298>)
 8002456:	f043 0301 	orr.w	r3, r3, #1
 800245a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800245c:	f7ff f9d8 	bl	8001810 <HAL_GetTick>
 8002460:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002462:	e008      	b.n	8002476 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002464:	f7ff f9d4 	bl	8001810 <HAL_GetTick>
 8002468:	4602      	mov	r2, r0
 800246a:	693b      	ldr	r3, [r7, #16]
 800246c:	1ad3      	subs	r3, r2, r3
 800246e:	2b02      	cmp	r3, #2
 8002470:	d901      	bls.n	8002476 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002472:	2303      	movs	r3, #3
 8002474:	e31a      	b.n	8002aac <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002476:	4b44      	ldr	r3, [pc, #272]	; (8002588 <HAL_RCC_OscConfig+0x298>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f003 0302 	and.w	r3, r3, #2
 800247e:	2b00      	cmp	r3, #0
 8002480:	d0f0      	beq.n	8002464 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002482:	4b41      	ldr	r3, [pc, #260]	; (8002588 <HAL_RCC_OscConfig+0x298>)
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	4a40      	ldr	r2, [pc, #256]	; (8002588 <HAL_RCC_OscConfig+0x298>)
 8002488:	f043 0308 	orr.w	r3, r3, #8
 800248c:	6013      	str	r3, [r2, #0]
 800248e:	4b3e      	ldr	r3, [pc, #248]	; (8002588 <HAL_RCC_OscConfig+0x298>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	6a1b      	ldr	r3, [r3, #32]
 800249a:	493b      	ldr	r1, [pc, #236]	; (8002588 <HAL_RCC_OscConfig+0x298>)
 800249c:	4313      	orrs	r3, r2
 800249e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80024a0:	4b39      	ldr	r3, [pc, #228]	; (8002588 <HAL_RCC_OscConfig+0x298>)
 80024a2:	685b      	ldr	r3, [r3, #4]
 80024a4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	69db      	ldr	r3, [r3, #28]
 80024ac:	021b      	lsls	r3, r3, #8
 80024ae:	4936      	ldr	r1, [pc, #216]	; (8002588 <HAL_RCC_OscConfig+0x298>)
 80024b0:	4313      	orrs	r3, r2
 80024b2:	604b      	str	r3, [r1, #4]
 80024b4:	e01a      	b.n	80024ec <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80024b6:	4b34      	ldr	r3, [pc, #208]	; (8002588 <HAL_RCC_OscConfig+0x298>)
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	4a33      	ldr	r2, [pc, #204]	; (8002588 <HAL_RCC_OscConfig+0x298>)
 80024bc:	f023 0301 	bic.w	r3, r3, #1
 80024c0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80024c2:	f7ff f9a5 	bl	8001810 <HAL_GetTick>
 80024c6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80024c8:	e008      	b.n	80024dc <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80024ca:	f7ff f9a1 	bl	8001810 <HAL_GetTick>
 80024ce:	4602      	mov	r2, r0
 80024d0:	693b      	ldr	r3, [r7, #16]
 80024d2:	1ad3      	subs	r3, r2, r3
 80024d4:	2b02      	cmp	r3, #2
 80024d6:	d901      	bls.n	80024dc <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80024d8:	2303      	movs	r3, #3
 80024da:	e2e7      	b.n	8002aac <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80024dc:	4b2a      	ldr	r3, [pc, #168]	; (8002588 <HAL_RCC_OscConfig+0x298>)
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f003 0302 	and.w	r3, r3, #2
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d1f0      	bne.n	80024ca <HAL_RCC_OscConfig+0x1da>
 80024e8:	e000      	b.n	80024ec <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80024ea:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f003 0301 	and.w	r3, r3, #1
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d074      	beq.n	80025e2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80024f8:	69bb      	ldr	r3, [r7, #24]
 80024fa:	2b08      	cmp	r3, #8
 80024fc:	d005      	beq.n	800250a <HAL_RCC_OscConfig+0x21a>
 80024fe:	69bb      	ldr	r3, [r7, #24]
 8002500:	2b0c      	cmp	r3, #12
 8002502:	d10e      	bne.n	8002522 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002504:	697b      	ldr	r3, [r7, #20]
 8002506:	2b03      	cmp	r3, #3
 8002508:	d10b      	bne.n	8002522 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800250a:	4b1f      	ldr	r3, [pc, #124]	; (8002588 <HAL_RCC_OscConfig+0x298>)
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002512:	2b00      	cmp	r3, #0
 8002514:	d064      	beq.n	80025e0 <HAL_RCC_OscConfig+0x2f0>
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	685b      	ldr	r3, [r3, #4]
 800251a:	2b00      	cmp	r3, #0
 800251c:	d160      	bne.n	80025e0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800251e:	2301      	movs	r3, #1
 8002520:	e2c4      	b.n	8002aac <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	685b      	ldr	r3, [r3, #4]
 8002526:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800252a:	d106      	bne.n	800253a <HAL_RCC_OscConfig+0x24a>
 800252c:	4b16      	ldr	r3, [pc, #88]	; (8002588 <HAL_RCC_OscConfig+0x298>)
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	4a15      	ldr	r2, [pc, #84]	; (8002588 <HAL_RCC_OscConfig+0x298>)
 8002532:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002536:	6013      	str	r3, [r2, #0]
 8002538:	e01d      	b.n	8002576 <HAL_RCC_OscConfig+0x286>
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	685b      	ldr	r3, [r3, #4]
 800253e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002542:	d10c      	bne.n	800255e <HAL_RCC_OscConfig+0x26e>
 8002544:	4b10      	ldr	r3, [pc, #64]	; (8002588 <HAL_RCC_OscConfig+0x298>)
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	4a0f      	ldr	r2, [pc, #60]	; (8002588 <HAL_RCC_OscConfig+0x298>)
 800254a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800254e:	6013      	str	r3, [r2, #0]
 8002550:	4b0d      	ldr	r3, [pc, #52]	; (8002588 <HAL_RCC_OscConfig+0x298>)
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	4a0c      	ldr	r2, [pc, #48]	; (8002588 <HAL_RCC_OscConfig+0x298>)
 8002556:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800255a:	6013      	str	r3, [r2, #0]
 800255c:	e00b      	b.n	8002576 <HAL_RCC_OscConfig+0x286>
 800255e:	4b0a      	ldr	r3, [pc, #40]	; (8002588 <HAL_RCC_OscConfig+0x298>)
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	4a09      	ldr	r2, [pc, #36]	; (8002588 <HAL_RCC_OscConfig+0x298>)
 8002564:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002568:	6013      	str	r3, [r2, #0]
 800256a:	4b07      	ldr	r3, [pc, #28]	; (8002588 <HAL_RCC_OscConfig+0x298>)
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	4a06      	ldr	r2, [pc, #24]	; (8002588 <HAL_RCC_OscConfig+0x298>)
 8002570:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002574:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	685b      	ldr	r3, [r3, #4]
 800257a:	2b00      	cmp	r3, #0
 800257c:	d01c      	beq.n	80025b8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800257e:	f7ff f947 	bl	8001810 <HAL_GetTick>
 8002582:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002584:	e011      	b.n	80025aa <HAL_RCC_OscConfig+0x2ba>
 8002586:	bf00      	nop
 8002588:	40021000 	.word	0x40021000
 800258c:	0800498c 	.word	0x0800498c
 8002590:	20000058 	.word	0x20000058
 8002594:	2000005c 	.word	0x2000005c
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002598:	f7ff f93a 	bl	8001810 <HAL_GetTick>
 800259c:	4602      	mov	r2, r0
 800259e:	693b      	ldr	r3, [r7, #16]
 80025a0:	1ad3      	subs	r3, r2, r3
 80025a2:	2b64      	cmp	r3, #100	; 0x64
 80025a4:	d901      	bls.n	80025aa <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80025a6:	2303      	movs	r3, #3
 80025a8:	e280      	b.n	8002aac <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80025aa:	4baf      	ldr	r3, [pc, #700]	; (8002868 <HAL_RCC_OscConfig+0x578>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d0f0      	beq.n	8002598 <HAL_RCC_OscConfig+0x2a8>
 80025b6:	e014      	b.n	80025e2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025b8:	f7ff f92a 	bl	8001810 <HAL_GetTick>
 80025bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80025be:	e008      	b.n	80025d2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80025c0:	f7ff f926 	bl	8001810 <HAL_GetTick>
 80025c4:	4602      	mov	r2, r0
 80025c6:	693b      	ldr	r3, [r7, #16]
 80025c8:	1ad3      	subs	r3, r2, r3
 80025ca:	2b64      	cmp	r3, #100	; 0x64
 80025cc:	d901      	bls.n	80025d2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80025ce:	2303      	movs	r3, #3
 80025d0:	e26c      	b.n	8002aac <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80025d2:	4ba5      	ldr	r3, [pc, #660]	; (8002868 <HAL_RCC_OscConfig+0x578>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d1f0      	bne.n	80025c0 <HAL_RCC_OscConfig+0x2d0>
 80025de:	e000      	b.n	80025e2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f003 0302 	and.w	r3, r3, #2
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d060      	beq.n	80026b0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80025ee:	69bb      	ldr	r3, [r7, #24]
 80025f0:	2b04      	cmp	r3, #4
 80025f2:	d005      	beq.n	8002600 <HAL_RCC_OscConfig+0x310>
 80025f4:	69bb      	ldr	r3, [r7, #24]
 80025f6:	2b0c      	cmp	r3, #12
 80025f8:	d119      	bne.n	800262e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80025fa:	697b      	ldr	r3, [r7, #20]
 80025fc:	2b02      	cmp	r3, #2
 80025fe:	d116      	bne.n	800262e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002600:	4b99      	ldr	r3, [pc, #612]	; (8002868 <HAL_RCC_OscConfig+0x578>)
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002608:	2b00      	cmp	r3, #0
 800260a:	d005      	beq.n	8002618 <HAL_RCC_OscConfig+0x328>
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	68db      	ldr	r3, [r3, #12]
 8002610:	2b00      	cmp	r3, #0
 8002612:	d101      	bne.n	8002618 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002614:	2301      	movs	r3, #1
 8002616:	e249      	b.n	8002aac <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002618:	4b93      	ldr	r3, [pc, #588]	; (8002868 <HAL_RCC_OscConfig+0x578>)
 800261a:	685b      	ldr	r3, [r3, #4]
 800261c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	691b      	ldr	r3, [r3, #16]
 8002624:	061b      	lsls	r3, r3, #24
 8002626:	4990      	ldr	r1, [pc, #576]	; (8002868 <HAL_RCC_OscConfig+0x578>)
 8002628:	4313      	orrs	r3, r2
 800262a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800262c:	e040      	b.n	80026b0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	68db      	ldr	r3, [r3, #12]
 8002632:	2b00      	cmp	r3, #0
 8002634:	d023      	beq.n	800267e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002636:	4b8c      	ldr	r3, [pc, #560]	; (8002868 <HAL_RCC_OscConfig+0x578>)
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	4a8b      	ldr	r2, [pc, #556]	; (8002868 <HAL_RCC_OscConfig+0x578>)
 800263c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002640:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002642:	f7ff f8e5 	bl	8001810 <HAL_GetTick>
 8002646:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002648:	e008      	b.n	800265c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800264a:	f7ff f8e1 	bl	8001810 <HAL_GetTick>
 800264e:	4602      	mov	r2, r0
 8002650:	693b      	ldr	r3, [r7, #16]
 8002652:	1ad3      	subs	r3, r2, r3
 8002654:	2b02      	cmp	r3, #2
 8002656:	d901      	bls.n	800265c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002658:	2303      	movs	r3, #3
 800265a:	e227      	b.n	8002aac <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800265c:	4b82      	ldr	r3, [pc, #520]	; (8002868 <HAL_RCC_OscConfig+0x578>)
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002664:	2b00      	cmp	r3, #0
 8002666:	d0f0      	beq.n	800264a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002668:	4b7f      	ldr	r3, [pc, #508]	; (8002868 <HAL_RCC_OscConfig+0x578>)
 800266a:	685b      	ldr	r3, [r3, #4]
 800266c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	691b      	ldr	r3, [r3, #16]
 8002674:	061b      	lsls	r3, r3, #24
 8002676:	497c      	ldr	r1, [pc, #496]	; (8002868 <HAL_RCC_OscConfig+0x578>)
 8002678:	4313      	orrs	r3, r2
 800267a:	604b      	str	r3, [r1, #4]
 800267c:	e018      	b.n	80026b0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800267e:	4b7a      	ldr	r3, [pc, #488]	; (8002868 <HAL_RCC_OscConfig+0x578>)
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	4a79      	ldr	r2, [pc, #484]	; (8002868 <HAL_RCC_OscConfig+0x578>)
 8002684:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002688:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800268a:	f7ff f8c1 	bl	8001810 <HAL_GetTick>
 800268e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002690:	e008      	b.n	80026a4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002692:	f7ff f8bd 	bl	8001810 <HAL_GetTick>
 8002696:	4602      	mov	r2, r0
 8002698:	693b      	ldr	r3, [r7, #16]
 800269a:	1ad3      	subs	r3, r2, r3
 800269c:	2b02      	cmp	r3, #2
 800269e:	d901      	bls.n	80026a4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80026a0:	2303      	movs	r3, #3
 80026a2:	e203      	b.n	8002aac <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80026a4:	4b70      	ldr	r3, [pc, #448]	; (8002868 <HAL_RCC_OscConfig+0x578>)
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d1f0      	bne.n	8002692 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f003 0308 	and.w	r3, r3, #8
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d03c      	beq.n	8002736 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	695b      	ldr	r3, [r3, #20]
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d01c      	beq.n	80026fe <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80026c4:	4b68      	ldr	r3, [pc, #416]	; (8002868 <HAL_RCC_OscConfig+0x578>)
 80026c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80026ca:	4a67      	ldr	r2, [pc, #412]	; (8002868 <HAL_RCC_OscConfig+0x578>)
 80026cc:	f043 0301 	orr.w	r3, r3, #1
 80026d0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026d4:	f7ff f89c 	bl	8001810 <HAL_GetTick>
 80026d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80026da:	e008      	b.n	80026ee <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80026dc:	f7ff f898 	bl	8001810 <HAL_GetTick>
 80026e0:	4602      	mov	r2, r0
 80026e2:	693b      	ldr	r3, [r7, #16]
 80026e4:	1ad3      	subs	r3, r2, r3
 80026e6:	2b02      	cmp	r3, #2
 80026e8:	d901      	bls.n	80026ee <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80026ea:	2303      	movs	r3, #3
 80026ec:	e1de      	b.n	8002aac <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80026ee:	4b5e      	ldr	r3, [pc, #376]	; (8002868 <HAL_RCC_OscConfig+0x578>)
 80026f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80026f4:	f003 0302 	and.w	r3, r3, #2
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d0ef      	beq.n	80026dc <HAL_RCC_OscConfig+0x3ec>
 80026fc:	e01b      	b.n	8002736 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80026fe:	4b5a      	ldr	r3, [pc, #360]	; (8002868 <HAL_RCC_OscConfig+0x578>)
 8002700:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002704:	4a58      	ldr	r2, [pc, #352]	; (8002868 <HAL_RCC_OscConfig+0x578>)
 8002706:	f023 0301 	bic.w	r3, r3, #1
 800270a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800270e:	f7ff f87f 	bl	8001810 <HAL_GetTick>
 8002712:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002714:	e008      	b.n	8002728 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002716:	f7ff f87b 	bl	8001810 <HAL_GetTick>
 800271a:	4602      	mov	r2, r0
 800271c:	693b      	ldr	r3, [r7, #16]
 800271e:	1ad3      	subs	r3, r2, r3
 8002720:	2b02      	cmp	r3, #2
 8002722:	d901      	bls.n	8002728 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002724:	2303      	movs	r3, #3
 8002726:	e1c1      	b.n	8002aac <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002728:	4b4f      	ldr	r3, [pc, #316]	; (8002868 <HAL_RCC_OscConfig+0x578>)
 800272a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800272e:	f003 0302 	and.w	r3, r3, #2
 8002732:	2b00      	cmp	r3, #0
 8002734:	d1ef      	bne.n	8002716 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f003 0304 	and.w	r3, r3, #4
 800273e:	2b00      	cmp	r3, #0
 8002740:	f000 80a6 	beq.w	8002890 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002744:	2300      	movs	r3, #0
 8002746:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002748:	4b47      	ldr	r3, [pc, #284]	; (8002868 <HAL_RCC_OscConfig+0x578>)
 800274a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800274c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002750:	2b00      	cmp	r3, #0
 8002752:	d10d      	bne.n	8002770 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002754:	4b44      	ldr	r3, [pc, #272]	; (8002868 <HAL_RCC_OscConfig+0x578>)
 8002756:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002758:	4a43      	ldr	r2, [pc, #268]	; (8002868 <HAL_RCC_OscConfig+0x578>)
 800275a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800275e:	6593      	str	r3, [r2, #88]	; 0x58
 8002760:	4b41      	ldr	r3, [pc, #260]	; (8002868 <HAL_RCC_OscConfig+0x578>)
 8002762:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002764:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002768:	60bb      	str	r3, [r7, #8]
 800276a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800276c:	2301      	movs	r3, #1
 800276e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002770:	4b3e      	ldr	r3, [pc, #248]	; (800286c <HAL_RCC_OscConfig+0x57c>)
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002778:	2b00      	cmp	r3, #0
 800277a:	d118      	bne.n	80027ae <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800277c:	4b3b      	ldr	r3, [pc, #236]	; (800286c <HAL_RCC_OscConfig+0x57c>)
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	4a3a      	ldr	r2, [pc, #232]	; (800286c <HAL_RCC_OscConfig+0x57c>)
 8002782:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002786:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002788:	f7ff f842 	bl	8001810 <HAL_GetTick>
 800278c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800278e:	e008      	b.n	80027a2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002790:	f7ff f83e 	bl	8001810 <HAL_GetTick>
 8002794:	4602      	mov	r2, r0
 8002796:	693b      	ldr	r3, [r7, #16]
 8002798:	1ad3      	subs	r3, r2, r3
 800279a:	2b02      	cmp	r3, #2
 800279c:	d901      	bls.n	80027a2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800279e:	2303      	movs	r3, #3
 80027a0:	e184      	b.n	8002aac <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80027a2:	4b32      	ldr	r3, [pc, #200]	; (800286c <HAL_RCC_OscConfig+0x57c>)
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d0f0      	beq.n	8002790 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	689b      	ldr	r3, [r3, #8]
 80027b2:	2b01      	cmp	r3, #1
 80027b4:	d108      	bne.n	80027c8 <HAL_RCC_OscConfig+0x4d8>
 80027b6:	4b2c      	ldr	r3, [pc, #176]	; (8002868 <HAL_RCC_OscConfig+0x578>)
 80027b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027bc:	4a2a      	ldr	r2, [pc, #168]	; (8002868 <HAL_RCC_OscConfig+0x578>)
 80027be:	f043 0301 	orr.w	r3, r3, #1
 80027c2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80027c6:	e024      	b.n	8002812 <HAL_RCC_OscConfig+0x522>
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	689b      	ldr	r3, [r3, #8]
 80027cc:	2b05      	cmp	r3, #5
 80027ce:	d110      	bne.n	80027f2 <HAL_RCC_OscConfig+0x502>
 80027d0:	4b25      	ldr	r3, [pc, #148]	; (8002868 <HAL_RCC_OscConfig+0x578>)
 80027d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027d6:	4a24      	ldr	r2, [pc, #144]	; (8002868 <HAL_RCC_OscConfig+0x578>)
 80027d8:	f043 0304 	orr.w	r3, r3, #4
 80027dc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80027e0:	4b21      	ldr	r3, [pc, #132]	; (8002868 <HAL_RCC_OscConfig+0x578>)
 80027e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027e6:	4a20      	ldr	r2, [pc, #128]	; (8002868 <HAL_RCC_OscConfig+0x578>)
 80027e8:	f043 0301 	orr.w	r3, r3, #1
 80027ec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80027f0:	e00f      	b.n	8002812 <HAL_RCC_OscConfig+0x522>
 80027f2:	4b1d      	ldr	r3, [pc, #116]	; (8002868 <HAL_RCC_OscConfig+0x578>)
 80027f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027f8:	4a1b      	ldr	r2, [pc, #108]	; (8002868 <HAL_RCC_OscConfig+0x578>)
 80027fa:	f023 0301 	bic.w	r3, r3, #1
 80027fe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002802:	4b19      	ldr	r3, [pc, #100]	; (8002868 <HAL_RCC_OscConfig+0x578>)
 8002804:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002808:	4a17      	ldr	r2, [pc, #92]	; (8002868 <HAL_RCC_OscConfig+0x578>)
 800280a:	f023 0304 	bic.w	r3, r3, #4
 800280e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	689b      	ldr	r3, [r3, #8]
 8002816:	2b00      	cmp	r3, #0
 8002818:	d016      	beq.n	8002848 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800281a:	f7fe fff9 	bl	8001810 <HAL_GetTick>
 800281e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002820:	e00a      	b.n	8002838 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002822:	f7fe fff5 	bl	8001810 <HAL_GetTick>
 8002826:	4602      	mov	r2, r0
 8002828:	693b      	ldr	r3, [r7, #16]
 800282a:	1ad3      	subs	r3, r2, r3
 800282c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002830:	4293      	cmp	r3, r2
 8002832:	d901      	bls.n	8002838 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8002834:	2303      	movs	r3, #3
 8002836:	e139      	b.n	8002aac <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002838:	4b0b      	ldr	r3, [pc, #44]	; (8002868 <HAL_RCC_OscConfig+0x578>)
 800283a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800283e:	f003 0302 	and.w	r3, r3, #2
 8002842:	2b00      	cmp	r3, #0
 8002844:	d0ed      	beq.n	8002822 <HAL_RCC_OscConfig+0x532>
 8002846:	e01a      	b.n	800287e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002848:	f7fe ffe2 	bl	8001810 <HAL_GetTick>
 800284c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800284e:	e00f      	b.n	8002870 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002850:	f7fe ffde 	bl	8001810 <HAL_GetTick>
 8002854:	4602      	mov	r2, r0
 8002856:	693b      	ldr	r3, [r7, #16]
 8002858:	1ad3      	subs	r3, r2, r3
 800285a:	f241 3288 	movw	r2, #5000	; 0x1388
 800285e:	4293      	cmp	r3, r2
 8002860:	d906      	bls.n	8002870 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002862:	2303      	movs	r3, #3
 8002864:	e122      	b.n	8002aac <HAL_RCC_OscConfig+0x7bc>
 8002866:	bf00      	nop
 8002868:	40021000 	.word	0x40021000
 800286c:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002870:	4b90      	ldr	r3, [pc, #576]	; (8002ab4 <HAL_RCC_OscConfig+0x7c4>)
 8002872:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002876:	f003 0302 	and.w	r3, r3, #2
 800287a:	2b00      	cmp	r3, #0
 800287c:	d1e8      	bne.n	8002850 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800287e:	7ffb      	ldrb	r3, [r7, #31]
 8002880:	2b01      	cmp	r3, #1
 8002882:	d105      	bne.n	8002890 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002884:	4b8b      	ldr	r3, [pc, #556]	; (8002ab4 <HAL_RCC_OscConfig+0x7c4>)
 8002886:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002888:	4a8a      	ldr	r2, [pc, #552]	; (8002ab4 <HAL_RCC_OscConfig+0x7c4>)
 800288a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800288e:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002894:	2b00      	cmp	r3, #0
 8002896:	f000 8108 	beq.w	8002aaa <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800289e:	2b02      	cmp	r3, #2
 80028a0:	f040 80d0 	bne.w	8002a44 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80028a4:	4b83      	ldr	r3, [pc, #524]	; (8002ab4 <HAL_RCC_OscConfig+0x7c4>)
 80028a6:	68db      	ldr	r3, [r3, #12]
 80028a8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80028aa:	697b      	ldr	r3, [r7, #20]
 80028ac:	f003 0203 	and.w	r2, r3, #3
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028b4:	429a      	cmp	r2, r3
 80028b6:	d130      	bne.n	800291a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80028b8:	697b      	ldr	r3, [r7, #20]
 80028ba:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028c2:	3b01      	subs	r3, #1
 80028c4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80028c6:	429a      	cmp	r2, r3
 80028c8:	d127      	bne.n	800291a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80028ca:	697b      	ldr	r3, [r7, #20]
 80028cc:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028d4:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80028d6:	429a      	cmp	r2, r3
 80028d8:	d11f      	bne.n	800291a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80028da:	697b      	ldr	r3, [r7, #20]
 80028dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028e0:	687a      	ldr	r2, [r7, #4]
 80028e2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80028e4:	2a07      	cmp	r2, #7
 80028e6:	bf14      	ite	ne
 80028e8:	2201      	movne	r2, #1
 80028ea:	2200      	moveq	r2, #0
 80028ec:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80028ee:	4293      	cmp	r3, r2
 80028f0:	d113      	bne.n	800291a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80028f2:	697b      	ldr	r3, [r7, #20]
 80028f4:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028fc:	085b      	lsrs	r3, r3, #1
 80028fe:	3b01      	subs	r3, #1
 8002900:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002902:	429a      	cmp	r2, r3
 8002904:	d109      	bne.n	800291a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002906:	697b      	ldr	r3, [r7, #20]
 8002908:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002910:	085b      	lsrs	r3, r3, #1
 8002912:	3b01      	subs	r3, #1
 8002914:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002916:	429a      	cmp	r2, r3
 8002918:	d06e      	beq.n	80029f8 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800291a:	69bb      	ldr	r3, [r7, #24]
 800291c:	2b0c      	cmp	r3, #12
 800291e:	d069      	beq.n	80029f4 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002920:	4b64      	ldr	r3, [pc, #400]	; (8002ab4 <HAL_RCC_OscConfig+0x7c4>)
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002928:	2b00      	cmp	r3, #0
 800292a:	d105      	bne.n	8002938 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800292c:	4b61      	ldr	r3, [pc, #388]	; (8002ab4 <HAL_RCC_OscConfig+0x7c4>)
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002934:	2b00      	cmp	r3, #0
 8002936:	d001      	beq.n	800293c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002938:	2301      	movs	r3, #1
 800293a:	e0b7      	b.n	8002aac <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800293c:	4b5d      	ldr	r3, [pc, #372]	; (8002ab4 <HAL_RCC_OscConfig+0x7c4>)
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	4a5c      	ldr	r2, [pc, #368]	; (8002ab4 <HAL_RCC_OscConfig+0x7c4>)
 8002942:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002946:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002948:	f7fe ff62 	bl	8001810 <HAL_GetTick>
 800294c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800294e:	e008      	b.n	8002962 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002950:	f7fe ff5e 	bl	8001810 <HAL_GetTick>
 8002954:	4602      	mov	r2, r0
 8002956:	693b      	ldr	r3, [r7, #16]
 8002958:	1ad3      	subs	r3, r2, r3
 800295a:	2b02      	cmp	r3, #2
 800295c:	d901      	bls.n	8002962 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800295e:	2303      	movs	r3, #3
 8002960:	e0a4      	b.n	8002aac <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002962:	4b54      	ldr	r3, [pc, #336]	; (8002ab4 <HAL_RCC_OscConfig+0x7c4>)
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800296a:	2b00      	cmp	r3, #0
 800296c:	d1f0      	bne.n	8002950 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800296e:	4b51      	ldr	r3, [pc, #324]	; (8002ab4 <HAL_RCC_OscConfig+0x7c4>)
 8002970:	68da      	ldr	r2, [r3, #12]
 8002972:	4b51      	ldr	r3, [pc, #324]	; (8002ab8 <HAL_RCC_OscConfig+0x7c8>)
 8002974:	4013      	ands	r3, r2
 8002976:	687a      	ldr	r2, [r7, #4]
 8002978:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800297a:	687a      	ldr	r2, [r7, #4]
 800297c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800297e:	3a01      	subs	r2, #1
 8002980:	0112      	lsls	r2, r2, #4
 8002982:	4311      	orrs	r1, r2
 8002984:	687a      	ldr	r2, [r7, #4]
 8002986:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002988:	0212      	lsls	r2, r2, #8
 800298a:	4311      	orrs	r1, r2
 800298c:	687a      	ldr	r2, [r7, #4]
 800298e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002990:	0852      	lsrs	r2, r2, #1
 8002992:	3a01      	subs	r2, #1
 8002994:	0552      	lsls	r2, r2, #21
 8002996:	4311      	orrs	r1, r2
 8002998:	687a      	ldr	r2, [r7, #4]
 800299a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800299c:	0852      	lsrs	r2, r2, #1
 800299e:	3a01      	subs	r2, #1
 80029a0:	0652      	lsls	r2, r2, #25
 80029a2:	4311      	orrs	r1, r2
 80029a4:	687a      	ldr	r2, [r7, #4]
 80029a6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80029a8:	0912      	lsrs	r2, r2, #4
 80029aa:	0452      	lsls	r2, r2, #17
 80029ac:	430a      	orrs	r2, r1
 80029ae:	4941      	ldr	r1, [pc, #260]	; (8002ab4 <HAL_RCC_OscConfig+0x7c4>)
 80029b0:	4313      	orrs	r3, r2
 80029b2:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80029b4:	4b3f      	ldr	r3, [pc, #252]	; (8002ab4 <HAL_RCC_OscConfig+0x7c4>)
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	4a3e      	ldr	r2, [pc, #248]	; (8002ab4 <HAL_RCC_OscConfig+0x7c4>)
 80029ba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80029be:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80029c0:	4b3c      	ldr	r3, [pc, #240]	; (8002ab4 <HAL_RCC_OscConfig+0x7c4>)
 80029c2:	68db      	ldr	r3, [r3, #12]
 80029c4:	4a3b      	ldr	r2, [pc, #236]	; (8002ab4 <HAL_RCC_OscConfig+0x7c4>)
 80029c6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80029ca:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80029cc:	f7fe ff20 	bl	8001810 <HAL_GetTick>
 80029d0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80029d2:	e008      	b.n	80029e6 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029d4:	f7fe ff1c 	bl	8001810 <HAL_GetTick>
 80029d8:	4602      	mov	r2, r0
 80029da:	693b      	ldr	r3, [r7, #16]
 80029dc:	1ad3      	subs	r3, r2, r3
 80029de:	2b02      	cmp	r3, #2
 80029e0:	d901      	bls.n	80029e6 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80029e2:	2303      	movs	r3, #3
 80029e4:	e062      	b.n	8002aac <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80029e6:	4b33      	ldr	r3, [pc, #204]	; (8002ab4 <HAL_RCC_OscConfig+0x7c4>)
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d0f0      	beq.n	80029d4 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80029f2:	e05a      	b.n	8002aaa <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80029f4:	2301      	movs	r3, #1
 80029f6:	e059      	b.n	8002aac <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80029f8:	4b2e      	ldr	r3, [pc, #184]	; (8002ab4 <HAL_RCC_OscConfig+0x7c4>)
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d152      	bne.n	8002aaa <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002a04:	4b2b      	ldr	r3, [pc, #172]	; (8002ab4 <HAL_RCC_OscConfig+0x7c4>)
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	4a2a      	ldr	r2, [pc, #168]	; (8002ab4 <HAL_RCC_OscConfig+0x7c4>)
 8002a0a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002a0e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002a10:	4b28      	ldr	r3, [pc, #160]	; (8002ab4 <HAL_RCC_OscConfig+0x7c4>)
 8002a12:	68db      	ldr	r3, [r3, #12]
 8002a14:	4a27      	ldr	r2, [pc, #156]	; (8002ab4 <HAL_RCC_OscConfig+0x7c4>)
 8002a16:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002a1a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002a1c:	f7fe fef8 	bl	8001810 <HAL_GetTick>
 8002a20:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a22:	e008      	b.n	8002a36 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a24:	f7fe fef4 	bl	8001810 <HAL_GetTick>
 8002a28:	4602      	mov	r2, r0
 8002a2a:	693b      	ldr	r3, [r7, #16]
 8002a2c:	1ad3      	subs	r3, r2, r3
 8002a2e:	2b02      	cmp	r3, #2
 8002a30:	d901      	bls.n	8002a36 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002a32:	2303      	movs	r3, #3
 8002a34:	e03a      	b.n	8002aac <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a36:	4b1f      	ldr	r3, [pc, #124]	; (8002ab4 <HAL_RCC_OscConfig+0x7c4>)
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d0f0      	beq.n	8002a24 <HAL_RCC_OscConfig+0x734>
 8002a42:	e032      	b.n	8002aaa <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002a44:	69bb      	ldr	r3, [r7, #24]
 8002a46:	2b0c      	cmp	r3, #12
 8002a48:	d02d      	beq.n	8002aa6 <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a4a:	4b1a      	ldr	r3, [pc, #104]	; (8002ab4 <HAL_RCC_OscConfig+0x7c4>)
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	4a19      	ldr	r2, [pc, #100]	; (8002ab4 <HAL_RCC_OscConfig+0x7c4>)
 8002a50:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002a54:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8002a56:	4b17      	ldr	r3, [pc, #92]	; (8002ab4 <HAL_RCC_OscConfig+0x7c4>)
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d105      	bne.n	8002a6e <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002a62:	4b14      	ldr	r3, [pc, #80]	; (8002ab4 <HAL_RCC_OscConfig+0x7c4>)
 8002a64:	68db      	ldr	r3, [r3, #12]
 8002a66:	4a13      	ldr	r2, [pc, #76]	; (8002ab4 <HAL_RCC_OscConfig+0x7c4>)
 8002a68:	f023 0303 	bic.w	r3, r3, #3
 8002a6c:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002a6e:	4b11      	ldr	r3, [pc, #68]	; (8002ab4 <HAL_RCC_OscConfig+0x7c4>)
 8002a70:	68db      	ldr	r3, [r3, #12]
 8002a72:	4a10      	ldr	r2, [pc, #64]	; (8002ab4 <HAL_RCC_OscConfig+0x7c4>)
 8002a74:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002a78:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a7c:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a7e:	f7fe fec7 	bl	8001810 <HAL_GetTick>
 8002a82:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002a84:	e008      	b.n	8002a98 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a86:	f7fe fec3 	bl	8001810 <HAL_GetTick>
 8002a8a:	4602      	mov	r2, r0
 8002a8c:	693b      	ldr	r3, [r7, #16]
 8002a8e:	1ad3      	subs	r3, r2, r3
 8002a90:	2b02      	cmp	r3, #2
 8002a92:	d901      	bls.n	8002a98 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8002a94:	2303      	movs	r3, #3
 8002a96:	e009      	b.n	8002aac <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002a98:	4b06      	ldr	r3, [pc, #24]	; (8002ab4 <HAL_RCC_OscConfig+0x7c4>)
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d1f0      	bne.n	8002a86 <HAL_RCC_OscConfig+0x796>
 8002aa4:	e001      	b.n	8002aaa <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002aa6:	2301      	movs	r3, #1
 8002aa8:	e000      	b.n	8002aac <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8002aaa:	2300      	movs	r3, #0
}
 8002aac:	4618      	mov	r0, r3
 8002aae:	3720      	adds	r7, #32
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	bd80      	pop	{r7, pc}
 8002ab4:	40021000 	.word	0x40021000
 8002ab8:	f99d808c 	.word	0xf99d808c

08002abc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b084      	sub	sp, #16
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
 8002ac4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d101      	bne.n	8002ad0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002acc:	2301      	movs	r3, #1
 8002ace:	e0c8      	b.n	8002c62 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002ad0:	4b66      	ldr	r3, [pc, #408]	; (8002c6c <HAL_RCC_ClockConfig+0x1b0>)
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f003 0307 	and.w	r3, r3, #7
 8002ad8:	683a      	ldr	r2, [r7, #0]
 8002ada:	429a      	cmp	r2, r3
 8002adc:	d910      	bls.n	8002b00 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ade:	4b63      	ldr	r3, [pc, #396]	; (8002c6c <HAL_RCC_ClockConfig+0x1b0>)
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f023 0207 	bic.w	r2, r3, #7
 8002ae6:	4961      	ldr	r1, [pc, #388]	; (8002c6c <HAL_RCC_ClockConfig+0x1b0>)
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	4313      	orrs	r3, r2
 8002aec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002aee:	4b5f      	ldr	r3, [pc, #380]	; (8002c6c <HAL_RCC_ClockConfig+0x1b0>)
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f003 0307 	and.w	r3, r3, #7
 8002af6:	683a      	ldr	r2, [r7, #0]
 8002af8:	429a      	cmp	r2, r3
 8002afa:	d001      	beq.n	8002b00 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002afc:	2301      	movs	r3, #1
 8002afe:	e0b0      	b.n	8002c62 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f003 0301 	and.w	r3, r3, #1
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d04c      	beq.n	8002ba6 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	685b      	ldr	r3, [r3, #4]
 8002b10:	2b03      	cmp	r3, #3
 8002b12:	d107      	bne.n	8002b24 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b14:	4b56      	ldr	r3, [pc, #344]	; (8002c70 <HAL_RCC_ClockConfig+0x1b4>)
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d121      	bne.n	8002b64 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8002b20:	2301      	movs	r3, #1
 8002b22:	e09e      	b.n	8002c62 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	685b      	ldr	r3, [r3, #4]
 8002b28:	2b02      	cmp	r3, #2
 8002b2a:	d107      	bne.n	8002b3c <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002b2c:	4b50      	ldr	r3, [pc, #320]	; (8002c70 <HAL_RCC_ClockConfig+0x1b4>)
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d115      	bne.n	8002b64 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002b38:	2301      	movs	r3, #1
 8002b3a:	e092      	b.n	8002c62 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	685b      	ldr	r3, [r3, #4]
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d107      	bne.n	8002b54 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002b44:	4b4a      	ldr	r3, [pc, #296]	; (8002c70 <HAL_RCC_ClockConfig+0x1b4>)
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f003 0302 	and.w	r3, r3, #2
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d109      	bne.n	8002b64 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002b50:	2301      	movs	r3, #1
 8002b52:	e086      	b.n	8002c62 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002b54:	4b46      	ldr	r3, [pc, #280]	; (8002c70 <HAL_RCC_ClockConfig+0x1b4>)
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d101      	bne.n	8002b64 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002b60:	2301      	movs	r3, #1
 8002b62:	e07e      	b.n	8002c62 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002b64:	4b42      	ldr	r3, [pc, #264]	; (8002c70 <HAL_RCC_ClockConfig+0x1b4>)
 8002b66:	689b      	ldr	r3, [r3, #8]
 8002b68:	f023 0203 	bic.w	r2, r3, #3
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	685b      	ldr	r3, [r3, #4]
 8002b70:	493f      	ldr	r1, [pc, #252]	; (8002c70 <HAL_RCC_ClockConfig+0x1b4>)
 8002b72:	4313      	orrs	r3, r2
 8002b74:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b76:	f7fe fe4b 	bl	8001810 <HAL_GetTick>
 8002b7a:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b7c:	e00a      	b.n	8002b94 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b7e:	f7fe fe47 	bl	8001810 <HAL_GetTick>
 8002b82:	4602      	mov	r2, r0
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	1ad3      	subs	r3, r2, r3
 8002b88:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b8c:	4293      	cmp	r3, r2
 8002b8e:	d901      	bls.n	8002b94 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8002b90:	2303      	movs	r3, #3
 8002b92:	e066      	b.n	8002c62 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b94:	4b36      	ldr	r3, [pc, #216]	; (8002c70 <HAL_RCC_ClockConfig+0x1b4>)
 8002b96:	689b      	ldr	r3, [r3, #8]
 8002b98:	f003 020c 	and.w	r2, r3, #12
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	685b      	ldr	r3, [r3, #4]
 8002ba0:	009b      	lsls	r3, r3, #2
 8002ba2:	429a      	cmp	r2, r3
 8002ba4:	d1eb      	bne.n	8002b7e <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f003 0302 	and.w	r3, r3, #2
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d008      	beq.n	8002bc4 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002bb2:	4b2f      	ldr	r3, [pc, #188]	; (8002c70 <HAL_RCC_ClockConfig+0x1b4>)
 8002bb4:	689b      	ldr	r3, [r3, #8]
 8002bb6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	689b      	ldr	r3, [r3, #8]
 8002bbe:	492c      	ldr	r1, [pc, #176]	; (8002c70 <HAL_RCC_ClockConfig+0x1b4>)
 8002bc0:	4313      	orrs	r3, r2
 8002bc2:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002bc4:	4b29      	ldr	r3, [pc, #164]	; (8002c6c <HAL_RCC_ClockConfig+0x1b0>)
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f003 0307 	and.w	r3, r3, #7
 8002bcc:	683a      	ldr	r2, [r7, #0]
 8002bce:	429a      	cmp	r2, r3
 8002bd0:	d210      	bcs.n	8002bf4 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bd2:	4b26      	ldr	r3, [pc, #152]	; (8002c6c <HAL_RCC_ClockConfig+0x1b0>)
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f023 0207 	bic.w	r2, r3, #7
 8002bda:	4924      	ldr	r1, [pc, #144]	; (8002c6c <HAL_RCC_ClockConfig+0x1b0>)
 8002bdc:	683b      	ldr	r3, [r7, #0]
 8002bde:	4313      	orrs	r3, r2
 8002be0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002be2:	4b22      	ldr	r3, [pc, #136]	; (8002c6c <HAL_RCC_ClockConfig+0x1b0>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f003 0307 	and.w	r3, r3, #7
 8002bea:	683a      	ldr	r2, [r7, #0]
 8002bec:	429a      	cmp	r2, r3
 8002bee:	d001      	beq.n	8002bf4 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8002bf0:	2301      	movs	r3, #1
 8002bf2:	e036      	b.n	8002c62 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f003 0304 	and.w	r3, r3, #4
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d008      	beq.n	8002c12 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c00:	4b1b      	ldr	r3, [pc, #108]	; (8002c70 <HAL_RCC_ClockConfig+0x1b4>)
 8002c02:	689b      	ldr	r3, [r3, #8]
 8002c04:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	68db      	ldr	r3, [r3, #12]
 8002c0c:	4918      	ldr	r1, [pc, #96]	; (8002c70 <HAL_RCC_ClockConfig+0x1b4>)
 8002c0e:	4313      	orrs	r3, r2
 8002c10:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f003 0308 	and.w	r3, r3, #8
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d009      	beq.n	8002c32 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002c1e:	4b14      	ldr	r3, [pc, #80]	; (8002c70 <HAL_RCC_ClockConfig+0x1b4>)
 8002c20:	689b      	ldr	r3, [r3, #8]
 8002c22:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	691b      	ldr	r3, [r3, #16]
 8002c2a:	00db      	lsls	r3, r3, #3
 8002c2c:	4910      	ldr	r1, [pc, #64]	; (8002c70 <HAL_RCC_ClockConfig+0x1b4>)
 8002c2e:	4313      	orrs	r3, r2
 8002c30:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002c32:	f000 f825 	bl	8002c80 <HAL_RCC_GetSysClockFreq>
 8002c36:	4602      	mov	r2, r0
 8002c38:	4b0d      	ldr	r3, [pc, #52]	; (8002c70 <HAL_RCC_ClockConfig+0x1b4>)
 8002c3a:	689b      	ldr	r3, [r3, #8]
 8002c3c:	091b      	lsrs	r3, r3, #4
 8002c3e:	f003 030f 	and.w	r3, r3, #15
 8002c42:	490c      	ldr	r1, [pc, #48]	; (8002c74 <HAL_RCC_ClockConfig+0x1b8>)
 8002c44:	5ccb      	ldrb	r3, [r1, r3]
 8002c46:	f003 031f 	and.w	r3, r3, #31
 8002c4a:	fa22 f303 	lsr.w	r3, r2, r3
 8002c4e:	4a0a      	ldr	r2, [pc, #40]	; (8002c78 <HAL_RCC_ClockConfig+0x1bc>)
 8002c50:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002c52:	4b0a      	ldr	r3, [pc, #40]	; (8002c7c <HAL_RCC_ClockConfig+0x1c0>)
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	4618      	mov	r0, r3
 8002c58:	f7fe fd8a 	bl	8001770 <HAL_InitTick>
 8002c5c:	4603      	mov	r3, r0
 8002c5e:	72fb      	strb	r3, [r7, #11]

  return status;
 8002c60:	7afb      	ldrb	r3, [r7, #11]
}
 8002c62:	4618      	mov	r0, r3
 8002c64:	3710      	adds	r7, #16
 8002c66:	46bd      	mov	sp, r7
 8002c68:	bd80      	pop	{r7, pc}
 8002c6a:	bf00      	nop
 8002c6c:	40022000 	.word	0x40022000
 8002c70:	40021000 	.word	0x40021000
 8002c74:	0800498c 	.word	0x0800498c
 8002c78:	20000058 	.word	0x20000058
 8002c7c:	2000005c 	.word	0x2000005c

08002c80 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c80:	b480      	push	{r7}
 8002c82:	b089      	sub	sp, #36	; 0x24
 8002c84:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002c86:	2300      	movs	r3, #0
 8002c88:	61fb      	str	r3, [r7, #28]
 8002c8a:	2300      	movs	r3, #0
 8002c8c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002c8e:	4b3e      	ldr	r3, [pc, #248]	; (8002d88 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c90:	689b      	ldr	r3, [r3, #8]
 8002c92:	f003 030c 	and.w	r3, r3, #12
 8002c96:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002c98:	4b3b      	ldr	r3, [pc, #236]	; (8002d88 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c9a:	68db      	ldr	r3, [r3, #12]
 8002c9c:	f003 0303 	and.w	r3, r3, #3
 8002ca0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002ca2:	693b      	ldr	r3, [r7, #16]
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d005      	beq.n	8002cb4 <HAL_RCC_GetSysClockFreq+0x34>
 8002ca8:	693b      	ldr	r3, [r7, #16]
 8002caa:	2b0c      	cmp	r3, #12
 8002cac:	d121      	bne.n	8002cf2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	2b01      	cmp	r3, #1
 8002cb2:	d11e      	bne.n	8002cf2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002cb4:	4b34      	ldr	r3, [pc, #208]	; (8002d88 <HAL_RCC_GetSysClockFreq+0x108>)
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f003 0308 	and.w	r3, r3, #8
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d107      	bne.n	8002cd0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002cc0:	4b31      	ldr	r3, [pc, #196]	; (8002d88 <HAL_RCC_GetSysClockFreq+0x108>)
 8002cc2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002cc6:	0a1b      	lsrs	r3, r3, #8
 8002cc8:	f003 030f 	and.w	r3, r3, #15
 8002ccc:	61fb      	str	r3, [r7, #28]
 8002cce:	e005      	b.n	8002cdc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002cd0:	4b2d      	ldr	r3, [pc, #180]	; (8002d88 <HAL_RCC_GetSysClockFreq+0x108>)
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	091b      	lsrs	r3, r3, #4
 8002cd6:	f003 030f 	and.w	r3, r3, #15
 8002cda:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002cdc:	4a2b      	ldr	r2, [pc, #172]	; (8002d8c <HAL_RCC_GetSysClockFreq+0x10c>)
 8002cde:	69fb      	ldr	r3, [r7, #28]
 8002ce0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ce4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002ce6:	693b      	ldr	r3, [r7, #16]
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d10d      	bne.n	8002d08 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002cec:	69fb      	ldr	r3, [r7, #28]
 8002cee:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002cf0:	e00a      	b.n	8002d08 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002cf2:	693b      	ldr	r3, [r7, #16]
 8002cf4:	2b04      	cmp	r3, #4
 8002cf6:	d102      	bne.n	8002cfe <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002cf8:	4b25      	ldr	r3, [pc, #148]	; (8002d90 <HAL_RCC_GetSysClockFreq+0x110>)
 8002cfa:	61bb      	str	r3, [r7, #24]
 8002cfc:	e004      	b.n	8002d08 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002cfe:	693b      	ldr	r3, [r7, #16]
 8002d00:	2b08      	cmp	r3, #8
 8002d02:	d101      	bne.n	8002d08 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002d04:	4b23      	ldr	r3, [pc, #140]	; (8002d94 <HAL_RCC_GetSysClockFreq+0x114>)
 8002d06:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002d08:	693b      	ldr	r3, [r7, #16]
 8002d0a:	2b0c      	cmp	r3, #12
 8002d0c:	d134      	bne.n	8002d78 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002d0e:	4b1e      	ldr	r3, [pc, #120]	; (8002d88 <HAL_RCC_GetSysClockFreq+0x108>)
 8002d10:	68db      	ldr	r3, [r3, #12]
 8002d12:	f003 0303 	and.w	r3, r3, #3
 8002d16:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002d18:	68bb      	ldr	r3, [r7, #8]
 8002d1a:	2b02      	cmp	r3, #2
 8002d1c:	d003      	beq.n	8002d26 <HAL_RCC_GetSysClockFreq+0xa6>
 8002d1e:	68bb      	ldr	r3, [r7, #8]
 8002d20:	2b03      	cmp	r3, #3
 8002d22:	d003      	beq.n	8002d2c <HAL_RCC_GetSysClockFreq+0xac>
 8002d24:	e005      	b.n	8002d32 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002d26:	4b1a      	ldr	r3, [pc, #104]	; (8002d90 <HAL_RCC_GetSysClockFreq+0x110>)
 8002d28:	617b      	str	r3, [r7, #20]
      break;
 8002d2a:	e005      	b.n	8002d38 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002d2c:	4b19      	ldr	r3, [pc, #100]	; (8002d94 <HAL_RCC_GetSysClockFreq+0x114>)
 8002d2e:	617b      	str	r3, [r7, #20]
      break;
 8002d30:	e002      	b.n	8002d38 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002d32:	69fb      	ldr	r3, [r7, #28]
 8002d34:	617b      	str	r3, [r7, #20]
      break;
 8002d36:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002d38:	4b13      	ldr	r3, [pc, #76]	; (8002d88 <HAL_RCC_GetSysClockFreq+0x108>)
 8002d3a:	68db      	ldr	r3, [r3, #12]
 8002d3c:	091b      	lsrs	r3, r3, #4
 8002d3e:	f003 0307 	and.w	r3, r3, #7
 8002d42:	3301      	adds	r3, #1
 8002d44:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002d46:	4b10      	ldr	r3, [pc, #64]	; (8002d88 <HAL_RCC_GetSysClockFreq+0x108>)
 8002d48:	68db      	ldr	r3, [r3, #12]
 8002d4a:	0a1b      	lsrs	r3, r3, #8
 8002d4c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002d50:	697a      	ldr	r2, [r7, #20]
 8002d52:	fb02 f203 	mul.w	r2, r2, r3
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d5c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002d5e:	4b0a      	ldr	r3, [pc, #40]	; (8002d88 <HAL_RCC_GetSysClockFreq+0x108>)
 8002d60:	68db      	ldr	r3, [r3, #12]
 8002d62:	0e5b      	lsrs	r3, r3, #25
 8002d64:	f003 0303 	and.w	r3, r3, #3
 8002d68:	3301      	adds	r3, #1
 8002d6a:	005b      	lsls	r3, r3, #1
 8002d6c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002d6e:	697a      	ldr	r2, [r7, #20]
 8002d70:	683b      	ldr	r3, [r7, #0]
 8002d72:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d76:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002d78:	69bb      	ldr	r3, [r7, #24]
}
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	3724      	adds	r7, #36	; 0x24
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d84:	4770      	bx	lr
 8002d86:	bf00      	nop
 8002d88:	40021000 	.word	0x40021000
 8002d8c:	080049a4 	.word	0x080049a4
 8002d90:	00f42400 	.word	0x00f42400
 8002d94:	007a1200 	.word	0x007a1200

08002d98 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d98:	b480      	push	{r7}
 8002d9a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002d9c:	4b03      	ldr	r3, [pc, #12]	; (8002dac <HAL_RCC_GetHCLKFreq+0x14>)
 8002d9e:	681b      	ldr	r3, [r3, #0]
}
 8002da0:	4618      	mov	r0, r3
 8002da2:	46bd      	mov	sp, r7
 8002da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da8:	4770      	bx	lr
 8002daa:	bf00      	nop
 8002dac:	20000058 	.word	0x20000058

08002db0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002db4:	f7ff fff0 	bl	8002d98 <HAL_RCC_GetHCLKFreq>
 8002db8:	4602      	mov	r2, r0
 8002dba:	4b06      	ldr	r3, [pc, #24]	; (8002dd4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002dbc:	689b      	ldr	r3, [r3, #8]
 8002dbe:	0a1b      	lsrs	r3, r3, #8
 8002dc0:	f003 0307 	and.w	r3, r3, #7
 8002dc4:	4904      	ldr	r1, [pc, #16]	; (8002dd8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002dc6:	5ccb      	ldrb	r3, [r1, r3]
 8002dc8:	f003 031f 	and.w	r3, r3, #31
 8002dcc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	bd80      	pop	{r7, pc}
 8002dd4:	40021000 	.word	0x40021000
 8002dd8:	0800499c 	.word	0x0800499c

08002ddc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002de0:	f7ff ffda 	bl	8002d98 <HAL_RCC_GetHCLKFreq>
 8002de4:	4602      	mov	r2, r0
 8002de6:	4b06      	ldr	r3, [pc, #24]	; (8002e00 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002de8:	689b      	ldr	r3, [r3, #8]
 8002dea:	0adb      	lsrs	r3, r3, #11
 8002dec:	f003 0307 	and.w	r3, r3, #7
 8002df0:	4904      	ldr	r1, [pc, #16]	; (8002e04 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002df2:	5ccb      	ldrb	r3, [r1, r3]
 8002df4:	f003 031f 	and.w	r3, r3, #31
 8002df8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	bd80      	pop	{r7, pc}
 8002e00:	40021000 	.word	0x40021000
 8002e04:	0800499c 	.word	0x0800499c

08002e08 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b086      	sub	sp, #24
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002e10:	2300      	movs	r3, #0
 8002e12:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002e14:	4b2a      	ldr	r3, [pc, #168]	; (8002ec0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002e16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d003      	beq.n	8002e28 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002e20:	f7ff fa02 	bl	8002228 <HAL_PWREx_GetVoltageRange>
 8002e24:	6178      	str	r0, [r7, #20]
 8002e26:	e014      	b.n	8002e52 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002e28:	4b25      	ldr	r3, [pc, #148]	; (8002ec0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002e2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e2c:	4a24      	ldr	r2, [pc, #144]	; (8002ec0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002e2e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e32:	6593      	str	r3, [r2, #88]	; 0x58
 8002e34:	4b22      	ldr	r3, [pc, #136]	; (8002ec0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002e36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e3c:	60fb      	str	r3, [r7, #12]
 8002e3e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002e40:	f7ff f9f2 	bl	8002228 <HAL_PWREx_GetVoltageRange>
 8002e44:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002e46:	4b1e      	ldr	r3, [pc, #120]	; (8002ec0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002e48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e4a:	4a1d      	ldr	r2, [pc, #116]	; (8002ec0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002e4c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e50:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002e52:	697b      	ldr	r3, [r7, #20]
 8002e54:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002e58:	d10b      	bne.n	8002e72 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	2b80      	cmp	r3, #128	; 0x80
 8002e5e:	d919      	bls.n	8002e94 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	2ba0      	cmp	r3, #160	; 0xa0
 8002e64:	d902      	bls.n	8002e6c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002e66:	2302      	movs	r3, #2
 8002e68:	613b      	str	r3, [r7, #16]
 8002e6a:	e013      	b.n	8002e94 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002e6c:	2301      	movs	r3, #1
 8002e6e:	613b      	str	r3, [r7, #16]
 8002e70:	e010      	b.n	8002e94 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	2b80      	cmp	r3, #128	; 0x80
 8002e76:	d902      	bls.n	8002e7e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002e78:	2303      	movs	r3, #3
 8002e7a:	613b      	str	r3, [r7, #16]
 8002e7c:	e00a      	b.n	8002e94 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	2b80      	cmp	r3, #128	; 0x80
 8002e82:	d102      	bne.n	8002e8a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002e84:	2302      	movs	r3, #2
 8002e86:	613b      	str	r3, [r7, #16]
 8002e88:	e004      	b.n	8002e94 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	2b70      	cmp	r3, #112	; 0x70
 8002e8e:	d101      	bne.n	8002e94 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002e90:	2301      	movs	r3, #1
 8002e92:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002e94:	4b0b      	ldr	r3, [pc, #44]	; (8002ec4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f023 0207 	bic.w	r2, r3, #7
 8002e9c:	4909      	ldr	r1, [pc, #36]	; (8002ec4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002e9e:	693b      	ldr	r3, [r7, #16]
 8002ea0:	4313      	orrs	r3, r2
 8002ea2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002ea4:	4b07      	ldr	r3, [pc, #28]	; (8002ec4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f003 0307 	and.w	r3, r3, #7
 8002eac:	693a      	ldr	r2, [r7, #16]
 8002eae:	429a      	cmp	r2, r3
 8002eb0:	d001      	beq.n	8002eb6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002eb2:	2301      	movs	r3, #1
 8002eb4:	e000      	b.n	8002eb8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002eb6:	2300      	movs	r3, #0
}
 8002eb8:	4618      	mov	r0, r3
 8002eba:	3718      	adds	r7, #24
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	bd80      	pop	{r7, pc}
 8002ec0:	40021000 	.word	0x40021000
 8002ec4:	40022000 	.word	0x40022000

08002ec8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	b086      	sub	sp, #24
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002ed0:	2300      	movs	r3, #0
 8002ed2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002ed4:	2300      	movs	r3, #0
 8002ed6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d041      	beq.n	8002f68 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002ee8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002eec:	d02a      	beq.n	8002f44 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002eee:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002ef2:	d824      	bhi.n	8002f3e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002ef4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002ef8:	d008      	beq.n	8002f0c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002efa:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002efe:	d81e      	bhi.n	8002f3e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d00a      	beq.n	8002f1a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002f04:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002f08:	d010      	beq.n	8002f2c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002f0a:	e018      	b.n	8002f3e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002f0c:	4b86      	ldr	r3, [pc, #536]	; (8003128 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f0e:	68db      	ldr	r3, [r3, #12]
 8002f10:	4a85      	ldr	r2, [pc, #532]	; (8003128 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f12:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f16:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002f18:	e015      	b.n	8002f46 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	3304      	adds	r3, #4
 8002f1e:	2100      	movs	r1, #0
 8002f20:	4618      	mov	r0, r3
 8002f22:	f000 fabb 	bl	800349c <RCCEx_PLLSAI1_Config>
 8002f26:	4603      	mov	r3, r0
 8002f28:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002f2a:	e00c      	b.n	8002f46 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	3320      	adds	r3, #32
 8002f30:	2100      	movs	r1, #0
 8002f32:	4618      	mov	r0, r3
 8002f34:	f000 fba6 	bl	8003684 <RCCEx_PLLSAI2_Config>
 8002f38:	4603      	mov	r3, r0
 8002f3a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002f3c:	e003      	b.n	8002f46 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002f3e:	2301      	movs	r3, #1
 8002f40:	74fb      	strb	r3, [r7, #19]
      break;
 8002f42:	e000      	b.n	8002f46 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002f44:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002f46:	7cfb      	ldrb	r3, [r7, #19]
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d10b      	bne.n	8002f64 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002f4c:	4b76      	ldr	r3, [pc, #472]	; (8003128 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f52:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002f5a:	4973      	ldr	r1, [pc, #460]	; (8003128 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f5c:	4313      	orrs	r3, r2
 8002f5e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002f62:	e001      	b.n	8002f68 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f64:	7cfb      	ldrb	r3, [r7, #19]
 8002f66:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d041      	beq.n	8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002f78:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002f7c:	d02a      	beq.n	8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002f7e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002f82:	d824      	bhi.n	8002fce <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002f84:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002f88:	d008      	beq.n	8002f9c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002f8a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002f8e:	d81e      	bhi.n	8002fce <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d00a      	beq.n	8002faa <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002f94:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002f98:	d010      	beq.n	8002fbc <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002f9a:	e018      	b.n	8002fce <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002f9c:	4b62      	ldr	r3, [pc, #392]	; (8003128 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f9e:	68db      	ldr	r3, [r3, #12]
 8002fa0:	4a61      	ldr	r2, [pc, #388]	; (8003128 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002fa2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fa6:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002fa8:	e015      	b.n	8002fd6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	3304      	adds	r3, #4
 8002fae:	2100      	movs	r1, #0
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	f000 fa73 	bl	800349c <RCCEx_PLLSAI1_Config>
 8002fb6:	4603      	mov	r3, r0
 8002fb8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002fba:	e00c      	b.n	8002fd6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	3320      	adds	r3, #32
 8002fc0:	2100      	movs	r1, #0
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	f000 fb5e 	bl	8003684 <RCCEx_PLLSAI2_Config>
 8002fc8:	4603      	mov	r3, r0
 8002fca:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002fcc:	e003      	b.n	8002fd6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002fce:	2301      	movs	r3, #1
 8002fd0:	74fb      	strb	r3, [r7, #19]
      break;
 8002fd2:	e000      	b.n	8002fd6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002fd4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002fd6:	7cfb      	ldrb	r3, [r7, #19]
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d10b      	bne.n	8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002fdc:	4b52      	ldr	r3, [pc, #328]	; (8003128 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002fde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fe2:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002fea:	494f      	ldr	r1, [pc, #316]	; (8003128 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002fec:	4313      	orrs	r3, r2
 8002fee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002ff2:	e001      	b.n	8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ff4:	7cfb      	ldrb	r3, [r7, #19]
 8002ff6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003000:	2b00      	cmp	r3, #0
 8003002:	f000 80a0 	beq.w	8003146 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003006:	2300      	movs	r3, #0
 8003008:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800300a:	4b47      	ldr	r3, [pc, #284]	; (8003128 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800300c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800300e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003012:	2b00      	cmp	r3, #0
 8003014:	d101      	bne.n	800301a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8003016:	2301      	movs	r3, #1
 8003018:	e000      	b.n	800301c <HAL_RCCEx_PeriphCLKConfig+0x154>
 800301a:	2300      	movs	r3, #0
 800301c:	2b00      	cmp	r3, #0
 800301e:	d00d      	beq.n	800303c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003020:	4b41      	ldr	r3, [pc, #260]	; (8003128 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003022:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003024:	4a40      	ldr	r2, [pc, #256]	; (8003128 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003026:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800302a:	6593      	str	r3, [r2, #88]	; 0x58
 800302c:	4b3e      	ldr	r3, [pc, #248]	; (8003128 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800302e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003030:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003034:	60bb      	str	r3, [r7, #8]
 8003036:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003038:	2301      	movs	r3, #1
 800303a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800303c:	4b3b      	ldr	r3, [pc, #236]	; (800312c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	4a3a      	ldr	r2, [pc, #232]	; (800312c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003042:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003046:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003048:	f7fe fbe2 	bl	8001810 <HAL_GetTick>
 800304c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800304e:	e009      	b.n	8003064 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003050:	f7fe fbde 	bl	8001810 <HAL_GetTick>
 8003054:	4602      	mov	r2, r0
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	1ad3      	subs	r3, r2, r3
 800305a:	2b02      	cmp	r3, #2
 800305c:	d902      	bls.n	8003064 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800305e:	2303      	movs	r3, #3
 8003060:	74fb      	strb	r3, [r7, #19]
        break;
 8003062:	e005      	b.n	8003070 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003064:	4b31      	ldr	r3, [pc, #196]	; (800312c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800306c:	2b00      	cmp	r3, #0
 800306e:	d0ef      	beq.n	8003050 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003070:	7cfb      	ldrb	r3, [r7, #19]
 8003072:	2b00      	cmp	r3, #0
 8003074:	d15c      	bne.n	8003130 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003076:	4b2c      	ldr	r3, [pc, #176]	; (8003128 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003078:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800307c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003080:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003082:	697b      	ldr	r3, [r7, #20]
 8003084:	2b00      	cmp	r3, #0
 8003086:	d01f      	beq.n	80030c8 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800308e:	697a      	ldr	r2, [r7, #20]
 8003090:	429a      	cmp	r2, r3
 8003092:	d019      	beq.n	80030c8 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003094:	4b24      	ldr	r3, [pc, #144]	; (8003128 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003096:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800309a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800309e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80030a0:	4b21      	ldr	r3, [pc, #132]	; (8003128 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80030a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030a6:	4a20      	ldr	r2, [pc, #128]	; (8003128 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80030a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030ac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80030b0:	4b1d      	ldr	r3, [pc, #116]	; (8003128 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80030b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030b6:	4a1c      	ldr	r2, [pc, #112]	; (8003128 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80030b8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80030bc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80030c0:	4a19      	ldr	r2, [pc, #100]	; (8003128 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80030c2:	697b      	ldr	r3, [r7, #20]
 80030c4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80030c8:	697b      	ldr	r3, [r7, #20]
 80030ca:	f003 0301 	and.w	r3, r3, #1
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d016      	beq.n	8003100 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030d2:	f7fe fb9d 	bl	8001810 <HAL_GetTick>
 80030d6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80030d8:	e00b      	b.n	80030f2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030da:	f7fe fb99 	bl	8001810 <HAL_GetTick>
 80030de:	4602      	mov	r2, r0
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	1ad3      	subs	r3, r2, r3
 80030e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80030e8:	4293      	cmp	r3, r2
 80030ea:	d902      	bls.n	80030f2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80030ec:	2303      	movs	r3, #3
 80030ee:	74fb      	strb	r3, [r7, #19]
            break;
 80030f0:	e006      	b.n	8003100 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80030f2:	4b0d      	ldr	r3, [pc, #52]	; (8003128 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80030f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030f8:	f003 0302 	and.w	r3, r3, #2
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d0ec      	beq.n	80030da <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003100:	7cfb      	ldrb	r3, [r7, #19]
 8003102:	2b00      	cmp	r3, #0
 8003104:	d10c      	bne.n	8003120 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003106:	4b08      	ldr	r3, [pc, #32]	; (8003128 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003108:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800310c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003116:	4904      	ldr	r1, [pc, #16]	; (8003128 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003118:	4313      	orrs	r3, r2
 800311a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800311e:	e009      	b.n	8003134 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003120:	7cfb      	ldrb	r3, [r7, #19]
 8003122:	74bb      	strb	r3, [r7, #18]
 8003124:	e006      	b.n	8003134 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8003126:	bf00      	nop
 8003128:	40021000 	.word	0x40021000
 800312c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003130:	7cfb      	ldrb	r3, [r7, #19]
 8003132:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003134:	7c7b      	ldrb	r3, [r7, #17]
 8003136:	2b01      	cmp	r3, #1
 8003138:	d105      	bne.n	8003146 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800313a:	4b9e      	ldr	r3, [pc, #632]	; (80033b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800313c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800313e:	4a9d      	ldr	r2, [pc, #628]	; (80033b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003140:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003144:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f003 0301 	and.w	r3, r3, #1
 800314e:	2b00      	cmp	r3, #0
 8003150:	d00a      	beq.n	8003168 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003152:	4b98      	ldr	r3, [pc, #608]	; (80033b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003154:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003158:	f023 0203 	bic.w	r2, r3, #3
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003160:	4994      	ldr	r1, [pc, #592]	; (80033b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003162:	4313      	orrs	r3, r2
 8003164:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f003 0302 	and.w	r3, r3, #2
 8003170:	2b00      	cmp	r3, #0
 8003172:	d00a      	beq.n	800318a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003174:	4b8f      	ldr	r3, [pc, #572]	; (80033b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003176:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800317a:	f023 020c 	bic.w	r2, r3, #12
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003182:	498c      	ldr	r1, [pc, #560]	; (80033b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003184:	4313      	orrs	r3, r2
 8003186:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f003 0304 	and.w	r3, r3, #4
 8003192:	2b00      	cmp	r3, #0
 8003194:	d00a      	beq.n	80031ac <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003196:	4b87      	ldr	r3, [pc, #540]	; (80033b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003198:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800319c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031a4:	4983      	ldr	r1, [pc, #524]	; (80033b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031a6:	4313      	orrs	r3, r2
 80031a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f003 0308 	and.w	r3, r3, #8
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d00a      	beq.n	80031ce <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80031b8:	4b7e      	ldr	r3, [pc, #504]	; (80033b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031be:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031c6:	497b      	ldr	r1, [pc, #492]	; (80033b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031c8:	4313      	orrs	r3, r2
 80031ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f003 0310 	and.w	r3, r3, #16
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d00a      	beq.n	80031f0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80031da:	4b76      	ldr	r3, [pc, #472]	; (80033b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031e0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80031e8:	4972      	ldr	r1, [pc, #456]	; (80033b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031ea:	4313      	orrs	r3, r2
 80031ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f003 0320 	and.w	r3, r3, #32
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d00a      	beq.n	8003212 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80031fc:	4b6d      	ldr	r3, [pc, #436]	; (80033b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003202:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800320a:	496a      	ldr	r1, [pc, #424]	; (80033b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800320c:	4313      	orrs	r3, r2
 800320e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800321a:	2b00      	cmp	r3, #0
 800321c:	d00a      	beq.n	8003234 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800321e:	4b65      	ldr	r3, [pc, #404]	; (80033b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003220:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003224:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800322c:	4961      	ldr	r1, [pc, #388]	; (80033b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800322e:	4313      	orrs	r3, r2
 8003230:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800323c:	2b00      	cmp	r3, #0
 800323e:	d00a      	beq.n	8003256 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003240:	4b5c      	ldr	r3, [pc, #368]	; (80033b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003242:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003246:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800324e:	4959      	ldr	r1, [pc, #356]	; (80033b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003250:	4313      	orrs	r3, r2
 8003252:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800325e:	2b00      	cmp	r3, #0
 8003260:	d00a      	beq.n	8003278 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003262:	4b54      	ldr	r3, [pc, #336]	; (80033b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003264:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003268:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003270:	4950      	ldr	r1, [pc, #320]	; (80033b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003272:	4313      	orrs	r3, r2
 8003274:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003280:	2b00      	cmp	r3, #0
 8003282:	d00a      	beq.n	800329a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003284:	4b4b      	ldr	r3, [pc, #300]	; (80033b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003286:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800328a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003292:	4948      	ldr	r1, [pc, #288]	; (80033b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003294:	4313      	orrs	r3, r2
 8003296:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d00a      	beq.n	80032bc <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80032a6:	4b43      	ldr	r3, [pc, #268]	; (80033b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032ac:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032b4:	493f      	ldr	r1, [pc, #252]	; (80033b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032b6:	4313      	orrs	r3, r2
 80032b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d028      	beq.n	800331a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80032c8:	4b3a      	ldr	r3, [pc, #232]	; (80033b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032ce:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80032d6:	4937      	ldr	r1, [pc, #220]	; (80033b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032d8:	4313      	orrs	r3, r2
 80032da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80032e2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80032e6:	d106      	bne.n	80032f6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80032e8:	4b32      	ldr	r3, [pc, #200]	; (80033b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032ea:	68db      	ldr	r3, [r3, #12]
 80032ec:	4a31      	ldr	r2, [pc, #196]	; (80033b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032ee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80032f2:	60d3      	str	r3, [r2, #12]
 80032f4:	e011      	b.n	800331a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80032fa:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80032fe:	d10c      	bne.n	800331a <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	3304      	adds	r3, #4
 8003304:	2101      	movs	r1, #1
 8003306:	4618      	mov	r0, r3
 8003308:	f000 f8c8 	bl	800349c <RCCEx_PLLSAI1_Config>
 800330c:	4603      	mov	r3, r0
 800330e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003310:	7cfb      	ldrb	r3, [r7, #19]
 8003312:	2b00      	cmp	r3, #0
 8003314:	d001      	beq.n	800331a <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8003316:	7cfb      	ldrb	r3, [r7, #19]
 8003318:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003322:	2b00      	cmp	r3, #0
 8003324:	d028      	beq.n	8003378 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003326:	4b23      	ldr	r3, [pc, #140]	; (80033b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003328:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800332c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003334:	491f      	ldr	r1, [pc, #124]	; (80033b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003336:	4313      	orrs	r3, r2
 8003338:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003340:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003344:	d106      	bne.n	8003354 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003346:	4b1b      	ldr	r3, [pc, #108]	; (80033b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003348:	68db      	ldr	r3, [r3, #12]
 800334a:	4a1a      	ldr	r2, [pc, #104]	; (80033b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800334c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003350:	60d3      	str	r3, [r2, #12]
 8003352:	e011      	b.n	8003378 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003358:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800335c:	d10c      	bne.n	8003378 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	3304      	adds	r3, #4
 8003362:	2101      	movs	r1, #1
 8003364:	4618      	mov	r0, r3
 8003366:	f000 f899 	bl	800349c <RCCEx_PLLSAI1_Config>
 800336a:	4603      	mov	r3, r0
 800336c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800336e:	7cfb      	ldrb	r3, [r7, #19]
 8003370:	2b00      	cmp	r3, #0
 8003372:	d001      	beq.n	8003378 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003374:	7cfb      	ldrb	r3, [r7, #19]
 8003376:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003380:	2b00      	cmp	r3, #0
 8003382:	d02b      	beq.n	80033dc <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003384:	4b0b      	ldr	r3, [pc, #44]	; (80033b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003386:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800338a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003392:	4908      	ldr	r1, [pc, #32]	; (80033b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003394:	4313      	orrs	r3, r2
 8003396:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800339e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80033a2:	d109      	bne.n	80033b8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80033a4:	4b03      	ldr	r3, [pc, #12]	; (80033b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033a6:	68db      	ldr	r3, [r3, #12]
 80033a8:	4a02      	ldr	r2, [pc, #8]	; (80033b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033aa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80033ae:	60d3      	str	r3, [r2, #12]
 80033b0:	e014      	b.n	80033dc <HAL_RCCEx_PeriphCLKConfig+0x514>
 80033b2:	bf00      	nop
 80033b4:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80033bc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80033c0:	d10c      	bne.n	80033dc <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	3304      	adds	r3, #4
 80033c6:	2101      	movs	r1, #1
 80033c8:	4618      	mov	r0, r3
 80033ca:	f000 f867 	bl	800349c <RCCEx_PLLSAI1_Config>
 80033ce:	4603      	mov	r3, r0
 80033d0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80033d2:	7cfb      	ldrb	r3, [r7, #19]
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d001      	beq.n	80033dc <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80033d8:	7cfb      	ldrb	r3, [r7, #19]
 80033da:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d02f      	beq.n	8003448 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80033e8:	4b2b      	ldr	r3, [pc, #172]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80033ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033ee:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80033f6:	4928      	ldr	r1, [pc, #160]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80033f8:	4313      	orrs	r3, r2
 80033fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003402:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003406:	d10d      	bne.n	8003424 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	3304      	adds	r3, #4
 800340c:	2102      	movs	r1, #2
 800340e:	4618      	mov	r0, r3
 8003410:	f000 f844 	bl	800349c <RCCEx_PLLSAI1_Config>
 8003414:	4603      	mov	r3, r0
 8003416:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003418:	7cfb      	ldrb	r3, [r7, #19]
 800341a:	2b00      	cmp	r3, #0
 800341c:	d014      	beq.n	8003448 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800341e:	7cfb      	ldrb	r3, [r7, #19]
 8003420:	74bb      	strb	r3, [r7, #18]
 8003422:	e011      	b.n	8003448 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003428:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800342c:	d10c      	bne.n	8003448 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	3320      	adds	r3, #32
 8003432:	2102      	movs	r1, #2
 8003434:	4618      	mov	r0, r3
 8003436:	f000 f925 	bl	8003684 <RCCEx_PLLSAI2_Config>
 800343a:	4603      	mov	r3, r0
 800343c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800343e:	7cfb      	ldrb	r3, [r7, #19]
 8003440:	2b00      	cmp	r3, #0
 8003442:	d001      	beq.n	8003448 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003444:	7cfb      	ldrb	r3, [r7, #19]
 8003446:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003450:	2b00      	cmp	r3, #0
 8003452:	d00a      	beq.n	800346a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003454:	4b10      	ldr	r3, [pc, #64]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003456:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800345a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003462:	490d      	ldr	r1, [pc, #52]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003464:	4313      	orrs	r3, r2
 8003466:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003472:	2b00      	cmp	r3, #0
 8003474:	d00b      	beq.n	800348e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003476:	4b08      	ldr	r3, [pc, #32]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003478:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800347c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003486:	4904      	ldr	r1, [pc, #16]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003488:	4313      	orrs	r3, r2
 800348a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800348e:	7cbb      	ldrb	r3, [r7, #18]
}
 8003490:	4618      	mov	r0, r3
 8003492:	3718      	adds	r7, #24
 8003494:	46bd      	mov	sp, r7
 8003496:	bd80      	pop	{r7, pc}
 8003498:	40021000 	.word	0x40021000

0800349c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800349c:	b580      	push	{r7, lr}
 800349e:	b084      	sub	sp, #16
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]
 80034a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80034a6:	2300      	movs	r3, #0
 80034a8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80034aa:	4b75      	ldr	r3, [pc, #468]	; (8003680 <RCCEx_PLLSAI1_Config+0x1e4>)
 80034ac:	68db      	ldr	r3, [r3, #12]
 80034ae:	f003 0303 	and.w	r3, r3, #3
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d018      	beq.n	80034e8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80034b6:	4b72      	ldr	r3, [pc, #456]	; (8003680 <RCCEx_PLLSAI1_Config+0x1e4>)
 80034b8:	68db      	ldr	r3, [r3, #12]
 80034ba:	f003 0203 	and.w	r2, r3, #3
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	429a      	cmp	r2, r3
 80034c4:	d10d      	bne.n	80034e2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
       ||
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d009      	beq.n	80034e2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80034ce:	4b6c      	ldr	r3, [pc, #432]	; (8003680 <RCCEx_PLLSAI1_Config+0x1e4>)
 80034d0:	68db      	ldr	r3, [r3, #12]
 80034d2:	091b      	lsrs	r3, r3, #4
 80034d4:	f003 0307 	and.w	r3, r3, #7
 80034d8:	1c5a      	adds	r2, r3, #1
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	685b      	ldr	r3, [r3, #4]
       ||
 80034de:	429a      	cmp	r2, r3
 80034e0:	d047      	beq.n	8003572 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80034e2:	2301      	movs	r3, #1
 80034e4:	73fb      	strb	r3, [r7, #15]
 80034e6:	e044      	b.n	8003572 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	2b03      	cmp	r3, #3
 80034ee:	d018      	beq.n	8003522 <RCCEx_PLLSAI1_Config+0x86>
 80034f0:	2b03      	cmp	r3, #3
 80034f2:	d825      	bhi.n	8003540 <RCCEx_PLLSAI1_Config+0xa4>
 80034f4:	2b01      	cmp	r3, #1
 80034f6:	d002      	beq.n	80034fe <RCCEx_PLLSAI1_Config+0x62>
 80034f8:	2b02      	cmp	r3, #2
 80034fa:	d009      	beq.n	8003510 <RCCEx_PLLSAI1_Config+0x74>
 80034fc:	e020      	b.n	8003540 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80034fe:	4b60      	ldr	r3, [pc, #384]	; (8003680 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f003 0302 	and.w	r3, r3, #2
 8003506:	2b00      	cmp	r3, #0
 8003508:	d11d      	bne.n	8003546 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800350a:	2301      	movs	r3, #1
 800350c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800350e:	e01a      	b.n	8003546 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003510:	4b5b      	ldr	r3, [pc, #364]	; (8003680 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003518:	2b00      	cmp	r3, #0
 800351a:	d116      	bne.n	800354a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800351c:	2301      	movs	r3, #1
 800351e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003520:	e013      	b.n	800354a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003522:	4b57      	ldr	r3, [pc, #348]	; (8003680 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800352a:	2b00      	cmp	r3, #0
 800352c:	d10f      	bne.n	800354e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800352e:	4b54      	ldr	r3, [pc, #336]	; (8003680 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003536:	2b00      	cmp	r3, #0
 8003538:	d109      	bne.n	800354e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800353a:	2301      	movs	r3, #1
 800353c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800353e:	e006      	b.n	800354e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003540:	2301      	movs	r3, #1
 8003542:	73fb      	strb	r3, [r7, #15]
      break;
 8003544:	e004      	b.n	8003550 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003546:	bf00      	nop
 8003548:	e002      	b.n	8003550 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800354a:	bf00      	nop
 800354c:	e000      	b.n	8003550 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800354e:	bf00      	nop
    }

    if(status == HAL_OK)
 8003550:	7bfb      	ldrb	r3, [r7, #15]
 8003552:	2b00      	cmp	r3, #0
 8003554:	d10d      	bne.n	8003572 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003556:	4b4a      	ldr	r3, [pc, #296]	; (8003680 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003558:	68db      	ldr	r3, [r3, #12]
 800355a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	6819      	ldr	r1, [r3, #0]
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	685b      	ldr	r3, [r3, #4]
 8003566:	3b01      	subs	r3, #1
 8003568:	011b      	lsls	r3, r3, #4
 800356a:	430b      	orrs	r3, r1
 800356c:	4944      	ldr	r1, [pc, #272]	; (8003680 <RCCEx_PLLSAI1_Config+0x1e4>)
 800356e:	4313      	orrs	r3, r2
 8003570:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003572:	7bfb      	ldrb	r3, [r7, #15]
 8003574:	2b00      	cmp	r3, #0
 8003576:	d17d      	bne.n	8003674 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003578:	4b41      	ldr	r3, [pc, #260]	; (8003680 <RCCEx_PLLSAI1_Config+0x1e4>)
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	4a40      	ldr	r2, [pc, #256]	; (8003680 <RCCEx_PLLSAI1_Config+0x1e4>)
 800357e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003582:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003584:	f7fe f944 	bl	8001810 <HAL_GetTick>
 8003588:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800358a:	e009      	b.n	80035a0 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800358c:	f7fe f940 	bl	8001810 <HAL_GetTick>
 8003590:	4602      	mov	r2, r0
 8003592:	68bb      	ldr	r3, [r7, #8]
 8003594:	1ad3      	subs	r3, r2, r3
 8003596:	2b02      	cmp	r3, #2
 8003598:	d902      	bls.n	80035a0 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800359a:	2303      	movs	r3, #3
 800359c:	73fb      	strb	r3, [r7, #15]
        break;
 800359e:	e005      	b.n	80035ac <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80035a0:	4b37      	ldr	r3, [pc, #220]	; (8003680 <RCCEx_PLLSAI1_Config+0x1e4>)
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d1ef      	bne.n	800358c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80035ac:	7bfb      	ldrb	r3, [r7, #15]
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d160      	bne.n	8003674 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80035b2:	683b      	ldr	r3, [r7, #0]
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d111      	bne.n	80035dc <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80035b8:	4b31      	ldr	r3, [pc, #196]	; (8003680 <RCCEx_PLLSAI1_Config+0x1e4>)
 80035ba:	691b      	ldr	r3, [r3, #16]
 80035bc:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80035c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80035c4:	687a      	ldr	r2, [r7, #4]
 80035c6:	6892      	ldr	r2, [r2, #8]
 80035c8:	0211      	lsls	r1, r2, #8
 80035ca:	687a      	ldr	r2, [r7, #4]
 80035cc:	68d2      	ldr	r2, [r2, #12]
 80035ce:	0912      	lsrs	r2, r2, #4
 80035d0:	0452      	lsls	r2, r2, #17
 80035d2:	430a      	orrs	r2, r1
 80035d4:	492a      	ldr	r1, [pc, #168]	; (8003680 <RCCEx_PLLSAI1_Config+0x1e4>)
 80035d6:	4313      	orrs	r3, r2
 80035d8:	610b      	str	r3, [r1, #16]
 80035da:	e027      	b.n	800362c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80035dc:	683b      	ldr	r3, [r7, #0]
 80035de:	2b01      	cmp	r3, #1
 80035e0:	d112      	bne.n	8003608 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80035e2:	4b27      	ldr	r3, [pc, #156]	; (8003680 <RCCEx_PLLSAI1_Config+0x1e4>)
 80035e4:	691b      	ldr	r3, [r3, #16]
 80035e6:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80035ea:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80035ee:	687a      	ldr	r2, [r7, #4]
 80035f0:	6892      	ldr	r2, [r2, #8]
 80035f2:	0211      	lsls	r1, r2, #8
 80035f4:	687a      	ldr	r2, [r7, #4]
 80035f6:	6912      	ldr	r2, [r2, #16]
 80035f8:	0852      	lsrs	r2, r2, #1
 80035fa:	3a01      	subs	r2, #1
 80035fc:	0552      	lsls	r2, r2, #21
 80035fe:	430a      	orrs	r2, r1
 8003600:	491f      	ldr	r1, [pc, #124]	; (8003680 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003602:	4313      	orrs	r3, r2
 8003604:	610b      	str	r3, [r1, #16]
 8003606:	e011      	b.n	800362c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003608:	4b1d      	ldr	r3, [pc, #116]	; (8003680 <RCCEx_PLLSAI1_Config+0x1e4>)
 800360a:	691b      	ldr	r3, [r3, #16]
 800360c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003610:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003614:	687a      	ldr	r2, [r7, #4]
 8003616:	6892      	ldr	r2, [r2, #8]
 8003618:	0211      	lsls	r1, r2, #8
 800361a:	687a      	ldr	r2, [r7, #4]
 800361c:	6952      	ldr	r2, [r2, #20]
 800361e:	0852      	lsrs	r2, r2, #1
 8003620:	3a01      	subs	r2, #1
 8003622:	0652      	lsls	r2, r2, #25
 8003624:	430a      	orrs	r2, r1
 8003626:	4916      	ldr	r1, [pc, #88]	; (8003680 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003628:	4313      	orrs	r3, r2
 800362a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800362c:	4b14      	ldr	r3, [pc, #80]	; (8003680 <RCCEx_PLLSAI1_Config+0x1e4>)
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	4a13      	ldr	r2, [pc, #76]	; (8003680 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003632:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003636:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003638:	f7fe f8ea 	bl	8001810 <HAL_GetTick>
 800363c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800363e:	e009      	b.n	8003654 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003640:	f7fe f8e6 	bl	8001810 <HAL_GetTick>
 8003644:	4602      	mov	r2, r0
 8003646:	68bb      	ldr	r3, [r7, #8]
 8003648:	1ad3      	subs	r3, r2, r3
 800364a:	2b02      	cmp	r3, #2
 800364c:	d902      	bls.n	8003654 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800364e:	2303      	movs	r3, #3
 8003650:	73fb      	strb	r3, [r7, #15]
          break;
 8003652:	e005      	b.n	8003660 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003654:	4b0a      	ldr	r3, [pc, #40]	; (8003680 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800365c:	2b00      	cmp	r3, #0
 800365e:	d0ef      	beq.n	8003640 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003660:	7bfb      	ldrb	r3, [r7, #15]
 8003662:	2b00      	cmp	r3, #0
 8003664:	d106      	bne.n	8003674 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003666:	4b06      	ldr	r3, [pc, #24]	; (8003680 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003668:	691a      	ldr	r2, [r3, #16]
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	699b      	ldr	r3, [r3, #24]
 800366e:	4904      	ldr	r1, [pc, #16]	; (8003680 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003670:	4313      	orrs	r3, r2
 8003672:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003674:	7bfb      	ldrb	r3, [r7, #15]
}
 8003676:	4618      	mov	r0, r3
 8003678:	3710      	adds	r7, #16
 800367a:	46bd      	mov	sp, r7
 800367c:	bd80      	pop	{r7, pc}
 800367e:	bf00      	nop
 8003680:	40021000 	.word	0x40021000

08003684 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003684:	b580      	push	{r7, lr}
 8003686:	b084      	sub	sp, #16
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]
 800368c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800368e:	2300      	movs	r3, #0
 8003690:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003692:	4b6a      	ldr	r3, [pc, #424]	; (800383c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003694:	68db      	ldr	r3, [r3, #12]
 8003696:	f003 0303 	and.w	r3, r3, #3
 800369a:	2b00      	cmp	r3, #0
 800369c:	d018      	beq.n	80036d0 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800369e:	4b67      	ldr	r3, [pc, #412]	; (800383c <RCCEx_PLLSAI2_Config+0x1b8>)
 80036a0:	68db      	ldr	r3, [r3, #12]
 80036a2:	f003 0203 	and.w	r2, r3, #3
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	429a      	cmp	r2, r3
 80036ac:	d10d      	bne.n	80036ca <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
       ||
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d009      	beq.n	80036ca <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80036b6:	4b61      	ldr	r3, [pc, #388]	; (800383c <RCCEx_PLLSAI2_Config+0x1b8>)
 80036b8:	68db      	ldr	r3, [r3, #12]
 80036ba:	091b      	lsrs	r3, r3, #4
 80036bc:	f003 0307 	and.w	r3, r3, #7
 80036c0:	1c5a      	adds	r2, r3, #1
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	685b      	ldr	r3, [r3, #4]
       ||
 80036c6:	429a      	cmp	r2, r3
 80036c8:	d047      	beq.n	800375a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80036ca:	2301      	movs	r3, #1
 80036cc:	73fb      	strb	r3, [r7, #15]
 80036ce:	e044      	b.n	800375a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	2b03      	cmp	r3, #3
 80036d6:	d018      	beq.n	800370a <RCCEx_PLLSAI2_Config+0x86>
 80036d8:	2b03      	cmp	r3, #3
 80036da:	d825      	bhi.n	8003728 <RCCEx_PLLSAI2_Config+0xa4>
 80036dc:	2b01      	cmp	r3, #1
 80036de:	d002      	beq.n	80036e6 <RCCEx_PLLSAI2_Config+0x62>
 80036e0:	2b02      	cmp	r3, #2
 80036e2:	d009      	beq.n	80036f8 <RCCEx_PLLSAI2_Config+0x74>
 80036e4:	e020      	b.n	8003728 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80036e6:	4b55      	ldr	r3, [pc, #340]	; (800383c <RCCEx_PLLSAI2_Config+0x1b8>)
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f003 0302 	and.w	r3, r3, #2
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d11d      	bne.n	800372e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80036f2:	2301      	movs	r3, #1
 80036f4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80036f6:	e01a      	b.n	800372e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80036f8:	4b50      	ldr	r3, [pc, #320]	; (800383c <RCCEx_PLLSAI2_Config+0x1b8>)
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003700:	2b00      	cmp	r3, #0
 8003702:	d116      	bne.n	8003732 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003704:	2301      	movs	r3, #1
 8003706:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003708:	e013      	b.n	8003732 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800370a:	4b4c      	ldr	r3, [pc, #304]	; (800383c <RCCEx_PLLSAI2_Config+0x1b8>)
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003712:	2b00      	cmp	r3, #0
 8003714:	d10f      	bne.n	8003736 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003716:	4b49      	ldr	r3, [pc, #292]	; (800383c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800371e:	2b00      	cmp	r3, #0
 8003720:	d109      	bne.n	8003736 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003722:	2301      	movs	r3, #1
 8003724:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003726:	e006      	b.n	8003736 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003728:	2301      	movs	r3, #1
 800372a:	73fb      	strb	r3, [r7, #15]
      break;
 800372c:	e004      	b.n	8003738 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800372e:	bf00      	nop
 8003730:	e002      	b.n	8003738 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003732:	bf00      	nop
 8003734:	e000      	b.n	8003738 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003736:	bf00      	nop
    }

    if(status == HAL_OK)
 8003738:	7bfb      	ldrb	r3, [r7, #15]
 800373a:	2b00      	cmp	r3, #0
 800373c:	d10d      	bne.n	800375a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800373e:	4b3f      	ldr	r3, [pc, #252]	; (800383c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003740:	68db      	ldr	r3, [r3, #12]
 8003742:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6819      	ldr	r1, [r3, #0]
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	685b      	ldr	r3, [r3, #4]
 800374e:	3b01      	subs	r3, #1
 8003750:	011b      	lsls	r3, r3, #4
 8003752:	430b      	orrs	r3, r1
 8003754:	4939      	ldr	r1, [pc, #228]	; (800383c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003756:	4313      	orrs	r3, r2
 8003758:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800375a:	7bfb      	ldrb	r3, [r7, #15]
 800375c:	2b00      	cmp	r3, #0
 800375e:	d167      	bne.n	8003830 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003760:	4b36      	ldr	r3, [pc, #216]	; (800383c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	4a35      	ldr	r2, [pc, #212]	; (800383c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003766:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800376a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800376c:	f7fe f850 	bl	8001810 <HAL_GetTick>
 8003770:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003772:	e009      	b.n	8003788 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003774:	f7fe f84c 	bl	8001810 <HAL_GetTick>
 8003778:	4602      	mov	r2, r0
 800377a:	68bb      	ldr	r3, [r7, #8]
 800377c:	1ad3      	subs	r3, r2, r3
 800377e:	2b02      	cmp	r3, #2
 8003780:	d902      	bls.n	8003788 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003782:	2303      	movs	r3, #3
 8003784:	73fb      	strb	r3, [r7, #15]
        break;
 8003786:	e005      	b.n	8003794 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003788:	4b2c      	ldr	r3, [pc, #176]	; (800383c <RCCEx_PLLSAI2_Config+0x1b8>)
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003790:	2b00      	cmp	r3, #0
 8003792:	d1ef      	bne.n	8003774 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003794:	7bfb      	ldrb	r3, [r7, #15]
 8003796:	2b00      	cmp	r3, #0
 8003798:	d14a      	bne.n	8003830 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800379a:	683b      	ldr	r3, [r7, #0]
 800379c:	2b00      	cmp	r3, #0
 800379e:	d111      	bne.n	80037c4 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80037a0:	4b26      	ldr	r3, [pc, #152]	; (800383c <RCCEx_PLLSAI2_Config+0x1b8>)
 80037a2:	695b      	ldr	r3, [r3, #20]
 80037a4:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80037a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80037ac:	687a      	ldr	r2, [r7, #4]
 80037ae:	6892      	ldr	r2, [r2, #8]
 80037b0:	0211      	lsls	r1, r2, #8
 80037b2:	687a      	ldr	r2, [r7, #4]
 80037b4:	68d2      	ldr	r2, [r2, #12]
 80037b6:	0912      	lsrs	r2, r2, #4
 80037b8:	0452      	lsls	r2, r2, #17
 80037ba:	430a      	orrs	r2, r1
 80037bc:	491f      	ldr	r1, [pc, #124]	; (800383c <RCCEx_PLLSAI2_Config+0x1b8>)
 80037be:	4313      	orrs	r3, r2
 80037c0:	614b      	str	r3, [r1, #20]
 80037c2:	e011      	b.n	80037e8 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80037c4:	4b1d      	ldr	r3, [pc, #116]	; (800383c <RCCEx_PLLSAI2_Config+0x1b8>)
 80037c6:	695b      	ldr	r3, [r3, #20]
 80037c8:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80037cc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80037d0:	687a      	ldr	r2, [r7, #4]
 80037d2:	6892      	ldr	r2, [r2, #8]
 80037d4:	0211      	lsls	r1, r2, #8
 80037d6:	687a      	ldr	r2, [r7, #4]
 80037d8:	6912      	ldr	r2, [r2, #16]
 80037da:	0852      	lsrs	r2, r2, #1
 80037dc:	3a01      	subs	r2, #1
 80037de:	0652      	lsls	r2, r2, #25
 80037e0:	430a      	orrs	r2, r1
 80037e2:	4916      	ldr	r1, [pc, #88]	; (800383c <RCCEx_PLLSAI2_Config+0x1b8>)
 80037e4:	4313      	orrs	r3, r2
 80037e6:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80037e8:	4b14      	ldr	r3, [pc, #80]	; (800383c <RCCEx_PLLSAI2_Config+0x1b8>)
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	4a13      	ldr	r2, [pc, #76]	; (800383c <RCCEx_PLLSAI2_Config+0x1b8>)
 80037ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037f2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037f4:	f7fe f80c 	bl	8001810 <HAL_GetTick>
 80037f8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80037fa:	e009      	b.n	8003810 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80037fc:	f7fe f808 	bl	8001810 <HAL_GetTick>
 8003800:	4602      	mov	r2, r0
 8003802:	68bb      	ldr	r3, [r7, #8]
 8003804:	1ad3      	subs	r3, r2, r3
 8003806:	2b02      	cmp	r3, #2
 8003808:	d902      	bls.n	8003810 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800380a:	2303      	movs	r3, #3
 800380c:	73fb      	strb	r3, [r7, #15]
          break;
 800380e:	e005      	b.n	800381c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003810:	4b0a      	ldr	r3, [pc, #40]	; (800383c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003818:	2b00      	cmp	r3, #0
 800381a:	d0ef      	beq.n	80037fc <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 800381c:	7bfb      	ldrb	r3, [r7, #15]
 800381e:	2b00      	cmp	r3, #0
 8003820:	d106      	bne.n	8003830 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003822:	4b06      	ldr	r3, [pc, #24]	; (800383c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003824:	695a      	ldr	r2, [r3, #20]
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	695b      	ldr	r3, [r3, #20]
 800382a:	4904      	ldr	r1, [pc, #16]	; (800383c <RCCEx_PLLSAI2_Config+0x1b8>)
 800382c:	4313      	orrs	r3, r2
 800382e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003830:	7bfb      	ldrb	r3, [r7, #15]
}
 8003832:	4618      	mov	r0, r3
 8003834:	3710      	adds	r7, #16
 8003836:	46bd      	mov	sp, r7
 8003838:	bd80      	pop	{r7, pc}
 800383a:	bf00      	nop
 800383c:	40021000 	.word	0x40021000

08003840 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003840:	b580      	push	{r7, lr}
 8003842:	b082      	sub	sp, #8
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2b00      	cmp	r3, #0
 800384c:	d101      	bne.n	8003852 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800384e:	2301      	movs	r3, #1
 8003850:	e040      	b.n	80038d4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003856:	2b00      	cmp	r3, #0
 8003858:	d106      	bne.n	8003868 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	2200      	movs	r2, #0
 800385e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003862:	6878      	ldr	r0, [r7, #4]
 8003864:	f7fd fe18 	bl	8001498 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	2224      	movs	r2, #36	; 0x24
 800386c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	681a      	ldr	r2, [r3, #0]
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f022 0201 	bic.w	r2, r2, #1
 800387c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800387e:	6878      	ldr	r0, [r7, #4]
 8003880:	f000 fa92 	bl	8003da8 <UART_SetConfig>
 8003884:	4603      	mov	r3, r0
 8003886:	2b01      	cmp	r3, #1
 8003888:	d101      	bne.n	800388e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800388a:	2301      	movs	r3, #1
 800388c:	e022      	b.n	80038d4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003892:	2b00      	cmp	r3, #0
 8003894:	d002      	beq.n	800389c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003896:	6878      	ldr	r0, [r7, #4]
 8003898:	f000 fd10 	bl	80042bc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	685a      	ldr	r2, [r3, #4]
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80038aa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	689a      	ldr	r2, [r3, #8]
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80038ba:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	681a      	ldr	r2, [r3, #0]
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f042 0201 	orr.w	r2, r2, #1
 80038ca:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80038cc:	6878      	ldr	r0, [r7, #4]
 80038ce:	f000 fd97 	bl	8004400 <UART_CheckIdleState>
 80038d2:	4603      	mov	r3, r0
}
 80038d4:	4618      	mov	r0, r3
 80038d6:	3708      	adds	r7, #8
 80038d8:	46bd      	mov	sp, r7
 80038da:	bd80      	pop	{r7, pc}

080038dc <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80038dc:	b580      	push	{r7, lr}
 80038de:	b084      	sub	sp, #16
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	60f8      	str	r0, [r7, #12]
 80038e4:	60b9      	str	r1, [r7, #8]
 80038e6:	4613      	mov	r3, r2
 80038e8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80038ee:	2b20      	cmp	r3, #32
 80038f0:	d131      	bne.n	8003956 <HAL_UART_Receive_IT+0x7a>
  {
    if ((pData == NULL) || (Size == 0U))
 80038f2:	68bb      	ldr	r3, [r7, #8]
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d002      	beq.n	80038fe <HAL_UART_Receive_IT+0x22>
 80038f8:	88fb      	ldrh	r3, [r7, #6]
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d101      	bne.n	8003902 <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 80038fe:	2301      	movs	r3, #1
 8003900:	e02a      	b.n	8003958 <HAL_UART_Receive_IT+0x7c>
    }

    __HAL_LOCK(huart);
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003908:	2b01      	cmp	r3, #1
 800390a:	d101      	bne.n	8003910 <HAL_UART_Receive_IT+0x34>
 800390c:	2302      	movs	r3, #2
 800390e:	e023      	b.n	8003958 <HAL_UART_Receive_IT+0x7c>
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	2201      	movs	r2, #1
 8003914:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	2200      	movs	r2, #0
 800391c:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	4a0f      	ldr	r2, [pc, #60]	; (8003960 <HAL_UART_Receive_IT+0x84>)
 8003924:	4293      	cmp	r3, r2
 8003926:	d00e      	beq.n	8003946 <HAL_UART_Receive_IT+0x6a>
    {
      /* Check that USART RTOEN bit is set */
      if(READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	685b      	ldr	r3, [r3, #4]
 800392e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003932:	2b00      	cmp	r3, #0
 8003934:	d007      	beq.n	8003946 <HAL_UART_Receive_IT+0x6a>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	681a      	ldr	r2, [r3, #0]
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8003944:	601a      	str	r2, [r3, #0]
      }
    }

    return(UART_Start_Receive_IT(huart, pData, Size));
 8003946:	88fb      	ldrh	r3, [r7, #6]
 8003948:	461a      	mov	r2, r3
 800394a:	68b9      	ldr	r1, [r7, #8]
 800394c:	68f8      	ldr	r0, [r7, #12]
 800394e:	f000 fe1d 	bl	800458c <UART_Start_Receive_IT>
 8003952:	4603      	mov	r3, r0
 8003954:	e000      	b.n	8003958 <HAL_UART_Receive_IT+0x7c>
  }
  else
  {
    return HAL_BUSY;
 8003956:	2302      	movs	r3, #2
  }
}
 8003958:	4618      	mov	r0, r3
 800395a:	3710      	adds	r7, #16
 800395c:	46bd      	mov	sp, r7
 800395e:	bd80      	pop	{r7, pc}
 8003960:	40008000 	.word	0x40008000

08003964 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003964:	b580      	push	{r7, lr}
 8003966:	b088      	sub	sp, #32
 8003968:	af00      	add	r7, sp, #0
 800396a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	69db      	ldr	r3, [r3, #28]
 8003972:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	689b      	ldr	r3, [r3, #8]
 8003982:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003984:	69fa      	ldr	r2, [r7, #28]
 8003986:	f640 030f 	movw	r3, #2063	; 0x80f
 800398a:	4013      	ands	r3, r2
 800398c:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 800398e:	693b      	ldr	r3, [r7, #16]
 8003990:	2b00      	cmp	r3, #0
 8003992:	d113      	bne.n	80039bc <HAL_UART_IRQHandler+0x58>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003994:	69fb      	ldr	r3, [r7, #28]
 8003996:	f003 0320 	and.w	r3, r3, #32
 800399a:	2b00      	cmp	r3, #0
 800399c:	d00e      	beq.n	80039bc <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800399e:	69bb      	ldr	r3, [r7, #24]
 80039a0:	f003 0320 	and.w	r3, r3, #32
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d009      	beq.n	80039bc <HAL_UART_IRQHandler+0x58>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	f000 81ce 	beq.w	8003d4e <HAL_UART_IRQHandler+0x3ea>
      {
        huart->RxISR(huart);
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80039b6:	6878      	ldr	r0, [r7, #4]
 80039b8:	4798      	blx	r3
      }
      return;
 80039ba:	e1c8      	b.n	8003d4e <HAL_UART_IRQHandler+0x3ea>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 80039bc:	693b      	ldr	r3, [r7, #16]
 80039be:	2b00      	cmp	r3, #0
 80039c0:	f000 80e3 	beq.w	8003b8a <HAL_UART_IRQHandler+0x226>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80039c4:	697b      	ldr	r3, [r7, #20]
 80039c6:	f003 0301 	and.w	r3, r3, #1
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d105      	bne.n	80039da <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80039ce:	69ba      	ldr	r2, [r7, #24]
 80039d0:	4ba6      	ldr	r3, [pc, #664]	; (8003c6c <HAL_UART_IRQHandler+0x308>)
 80039d2:	4013      	ands	r3, r2
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	f000 80d8 	beq.w	8003b8a <HAL_UART_IRQHandler+0x226>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80039da:	69fb      	ldr	r3, [r7, #28]
 80039dc:	f003 0301 	and.w	r3, r3, #1
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d010      	beq.n	8003a06 <HAL_UART_IRQHandler+0xa2>
 80039e4:	69bb      	ldr	r3, [r7, #24]
 80039e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d00b      	beq.n	8003a06 <HAL_UART_IRQHandler+0xa2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	2201      	movs	r2, #1
 80039f4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80039fc:	f043 0201 	orr.w	r2, r3, #1
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003a06:	69fb      	ldr	r3, [r7, #28]
 8003a08:	f003 0302 	and.w	r3, r3, #2
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d010      	beq.n	8003a32 <HAL_UART_IRQHandler+0xce>
 8003a10:	697b      	ldr	r3, [r7, #20]
 8003a12:	f003 0301 	and.w	r3, r3, #1
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d00b      	beq.n	8003a32 <HAL_UART_IRQHandler+0xce>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	2202      	movs	r2, #2
 8003a20:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003a28:	f043 0204 	orr.w	r2, r3, #4
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003a32:	69fb      	ldr	r3, [r7, #28]
 8003a34:	f003 0304 	and.w	r3, r3, #4
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d010      	beq.n	8003a5e <HAL_UART_IRQHandler+0xfa>
 8003a3c:	697b      	ldr	r3, [r7, #20]
 8003a3e:	f003 0301 	and.w	r3, r3, #1
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d00b      	beq.n	8003a5e <HAL_UART_IRQHandler+0xfa>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	2204      	movs	r2, #4
 8003a4c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003a54:	f043 0202 	orr.w	r2, r3, #2
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003a5e:	69fb      	ldr	r3, [r7, #28]
 8003a60:	f003 0308 	and.w	r3, r3, #8
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d015      	beq.n	8003a94 <HAL_UART_IRQHandler+0x130>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003a68:	69bb      	ldr	r3, [r7, #24]
 8003a6a:	f003 0320 	and.w	r3, r3, #32
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d104      	bne.n	8003a7c <HAL_UART_IRQHandler+0x118>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003a72:	697b      	ldr	r3, [r7, #20]
 8003a74:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d00b      	beq.n	8003a94 <HAL_UART_IRQHandler+0x130>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	2208      	movs	r2, #8
 8003a82:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003a8a:	f043 0208 	orr.w	r2, r3, #8
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003a94:	69fb      	ldr	r3, [r7, #28]
 8003a96:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d011      	beq.n	8003ac2 <HAL_UART_IRQHandler+0x15e>
 8003a9e:	69bb      	ldr	r3, [r7, #24]
 8003aa0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d00c      	beq.n	8003ac2 <HAL_UART_IRQHandler+0x15e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003ab0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003ab8:	f043 0220 	orr.w	r2, r3, #32
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	f000 8142 	beq.w	8003d52 <HAL_UART_IRQHandler+0x3ee>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003ace:	69fb      	ldr	r3, [r7, #28]
 8003ad0:	f003 0320 	and.w	r3, r3, #32
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d00c      	beq.n	8003af2 <HAL_UART_IRQHandler+0x18e>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003ad8:	69bb      	ldr	r3, [r7, #24]
 8003ada:	f003 0320 	and.w	r3, r3, #32
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d007      	beq.n	8003af2 <HAL_UART_IRQHandler+0x18e>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d003      	beq.n	8003af2 <HAL_UART_IRQHandler+0x18e>
        {
          huart->RxISR(huart);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003aee:	6878      	ldr	r0, [r7, #4]
 8003af0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003af8:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	689b      	ldr	r3, [r3, #8]
 8003b00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b04:	2b40      	cmp	r3, #64	; 0x40
 8003b06:	d004      	beq.n	8003b12 <HAL_UART_IRQHandler+0x1ae>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d031      	beq.n	8003b76 <HAL_UART_IRQHandler+0x212>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003b12:	6878      	ldr	r0, [r7, #4]
 8003b14:	f000 fdc2 	bl	800469c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	689b      	ldr	r3, [r3, #8]
 8003b1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b22:	2b40      	cmp	r3, #64	; 0x40
 8003b24:	d123      	bne.n	8003b6e <HAL_UART_IRQHandler+0x20a>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	689a      	ldr	r2, [r3, #8]
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003b34:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d013      	beq.n	8003b66 <HAL_UART_IRQHandler+0x202>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b42:	4a4b      	ldr	r2, [pc, #300]	; (8003c70 <HAL_UART_IRQHandler+0x30c>)
 8003b44:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b4a:	4618      	mov	r0, r3
 8003b4c:	f7fe f968 	bl	8001e20 <HAL_DMA_Abort_IT>
 8003b50:	4603      	mov	r3, r0
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d017      	beq.n	8003b86 <HAL_UART_IRQHandler+0x222>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b5c:	687a      	ldr	r2, [r7, #4]
 8003b5e:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8003b60:	4610      	mov	r0, r2
 8003b62:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b64:	e00f      	b.n	8003b86 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003b66:	6878      	ldr	r0, [r7, #4]
 8003b68:	f000 f908 	bl	8003d7c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b6c:	e00b      	b.n	8003b86 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003b6e:	6878      	ldr	r0, [r7, #4]
 8003b70:	f000 f904 	bl	8003d7c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b74:	e007      	b.n	8003b86 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003b76:	6878      	ldr	r0, [r7, #4]
 8003b78:	f000 f900 	bl	8003d7c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2200      	movs	r2, #0
 8003b80:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8003b84:	e0e5      	b.n	8003d52 <HAL_UART_IRQHandler+0x3ee>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b86:	bf00      	nop
    return;
 8003b88:	e0e3      	b.n	8003d52 <HAL_UART_IRQHandler+0x3ee>

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b8e:	2b01      	cmp	r3, #1
 8003b90:	f040 80a9 	bne.w	8003ce6 <HAL_UART_IRQHandler+0x382>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 8003b94:	69fb      	ldr	r3, [r7, #28]
 8003b96:	f003 0310 	and.w	r3, r3, #16
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	f000 80a3 	beq.w	8003ce6 <HAL_UART_IRQHandler+0x382>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 8003ba0:	69bb      	ldr	r3, [r7, #24]
 8003ba2:	f003 0310 	and.w	r3, r3, #16
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	f000 809d 	beq.w	8003ce6 <HAL_UART_IRQHandler+0x382>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	2210      	movs	r2, #16
 8003bb2:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	689b      	ldr	r3, [r3, #8]
 8003bba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bbe:	2b40      	cmp	r3, #64	; 0x40
 8003bc0:	d158      	bne.n	8003c74 <HAL_UART_IRQHandler+0x310>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	685b      	ldr	r3, [r3, #4]
 8003bca:	813b      	strh	r3, [r7, #8]
      if (  (nb_remaining_rx_data > 0U)
 8003bcc:	893b      	ldrh	r3, [r7, #8]
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	f000 80c1 	beq.w	8003d56 <HAL_UART_IRQHandler+0x3f2>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003bda:	893a      	ldrh	r2, [r7, #8]
 8003bdc:	429a      	cmp	r2, r3
 8003bde:	f080 80ba 	bcs.w	8003d56 <HAL_UART_IRQHandler+0x3f2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	893a      	ldrh	r2, [r7, #8]
 8003be6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f003 0320 	and.w	r3, r3, #32
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d12a      	bne.n	8003c50 <HAL_UART_IRQHandler+0x2ec>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	681a      	ldr	r2, [r3, #0]
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003c08:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	689a      	ldr	r2, [r3, #8]
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f022 0201 	bic.w	r2, r2, #1
 8003c18:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	689a      	ldr	r2, [r3, #8]
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003c28:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	2220      	movs	r2, #32
 8003c2e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	2200      	movs	r2, #0
 8003c34:	661a      	str	r2, [r3, #96]	; 0x60

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	681a      	ldr	r2, [r3, #0]
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f022 0210 	bic.w	r2, r2, #16
 8003c44:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c4a:	4618      	mov	r0, r3
 8003c4c:	f7fe f8aa 	bl	8001da4 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003c5c:	b29b      	uxth	r3, r3
 8003c5e:	1ad3      	subs	r3, r2, r3
 8003c60:	b29b      	uxth	r3, r3
 8003c62:	4619      	mov	r1, r3
 8003c64:	6878      	ldr	r0, [r7, #4]
 8003c66:	f000 f893 	bl	8003d90 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8003c6a:	e074      	b.n	8003d56 <HAL_UART_IRQHandler+0x3f2>
 8003c6c:	04000120 	.word	0x04000120
 8003c70:	080046fb 	.word	0x080046fb
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003c80:	b29b      	uxth	r3, r3
 8003c82:	1ad3      	subs	r3, r2, r3
 8003c84:	817b      	strh	r3, [r7, #10]
      if (  (huart->RxXferCount > 0U)
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003c8c:	b29b      	uxth	r3, r3
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d063      	beq.n	8003d5a <HAL_UART_IRQHandler+0x3f6>
          &&(nb_rx_data > 0U) )
 8003c92:	897b      	ldrh	r3, [r7, #10]
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d060      	beq.n	8003d5a <HAL_UART_IRQHandler+0x3f6>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	681a      	ldr	r2, [r3, #0]
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003ca6:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	689a      	ldr	r2, [r3, #8]
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f022 0201 	bic.w	r2, r2, #1
 8003cb6:	609a      	str	r2, [r3, #8]
#endif

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	2220      	movs	r2, #32
 8003cbc:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2200      	movs	r2, #0
 8003cc8:	665a      	str	r2, [r3, #100]	; 0x64

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	681a      	ldr	r2, [r3, #0]
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f022 0210 	bic.w	r2, r2, #16
 8003cd8:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003cda:	897b      	ldrh	r3, [r7, #10]
 8003cdc:	4619      	mov	r1, r3
 8003cde:	6878      	ldr	r0, [r7, #4]
 8003ce0:	f000 f856 	bl	8003d90 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8003ce4:	e039      	b.n	8003d5a <HAL_UART_IRQHandler+0x3f6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003ce6:	69fb      	ldr	r3, [r7, #28]
 8003ce8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d00d      	beq.n	8003d0c <HAL_UART_IRQHandler+0x3a8>
 8003cf0:	697b      	ldr	r3, [r7, #20]
 8003cf2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d008      	beq.n	8003d0c <HAL_UART_IRQHandler+0x3a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003d02:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003d04:	6878      	ldr	r0, [r7, #4]
 8003d06:	f000 fdff 	bl	8004908 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003d0a:	e029      	b.n	8003d60 <HAL_UART_IRQHandler+0x3fc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003d0c:	69fb      	ldr	r3, [r7, #28]
 8003d0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d00d      	beq.n	8003d32 <HAL_UART_IRQHandler+0x3ce>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003d16:	69bb      	ldr	r3, [r7, #24]
 8003d18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d008      	beq.n	8003d32 <HAL_UART_IRQHandler+0x3ce>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d01a      	beq.n	8003d5e <HAL_UART_IRQHandler+0x3fa>
    {
      huart->TxISR(huart);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003d2c:	6878      	ldr	r0, [r7, #4]
 8003d2e:	4798      	blx	r3
    }
    return;
 8003d30:	e015      	b.n	8003d5e <HAL_UART_IRQHandler+0x3fa>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003d32:	69fb      	ldr	r3, [r7, #28]
 8003d34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d011      	beq.n	8003d60 <HAL_UART_IRQHandler+0x3fc>
 8003d3c:	69bb      	ldr	r3, [r7, #24]
 8003d3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d00c      	beq.n	8003d60 <HAL_UART_IRQHandler+0x3fc>
  {
    UART_EndTransmit_IT(huart);
 8003d46:	6878      	ldr	r0, [r7, #4]
 8003d48:	f000 fced 	bl	8004726 <UART_EndTransmit_IT>
    return;
 8003d4c:	e008      	b.n	8003d60 <HAL_UART_IRQHandler+0x3fc>
      return;
 8003d4e:	bf00      	nop
 8003d50:	e006      	b.n	8003d60 <HAL_UART_IRQHandler+0x3fc>
    return;
 8003d52:	bf00      	nop
 8003d54:	e004      	b.n	8003d60 <HAL_UART_IRQHandler+0x3fc>
      return;
 8003d56:	bf00      	nop
 8003d58:	e002      	b.n	8003d60 <HAL_UART_IRQHandler+0x3fc>
      return;
 8003d5a:	bf00      	nop
 8003d5c:	e000      	b.n	8003d60 <HAL_UART_IRQHandler+0x3fc>
    return;
 8003d5e:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8003d60:	3720      	adds	r7, #32
 8003d62:	46bd      	mov	sp, r7
 8003d64:	bd80      	pop	{r7, pc}
 8003d66:	bf00      	nop

08003d68 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003d68:	b480      	push	{r7}
 8003d6a:	b083      	sub	sp, #12
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003d70:	bf00      	nop
 8003d72:	370c      	adds	r7, #12
 8003d74:	46bd      	mov	sp, r7
 8003d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7a:	4770      	bx	lr

08003d7c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003d7c:	b480      	push	{r7}
 8003d7e:	b083      	sub	sp, #12
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003d84:	bf00      	nop
 8003d86:	370c      	adds	r7, #12
 8003d88:	46bd      	mov	sp, r7
 8003d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8e:	4770      	bx	lr

08003d90 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003d90:	b480      	push	{r7}
 8003d92:	b083      	sub	sp, #12
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	6078      	str	r0, [r7, #4]
 8003d98:	460b      	mov	r3, r1
 8003d9a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003d9c:	bf00      	nop
 8003d9e:	370c      	adds	r7, #12
 8003da0:	46bd      	mov	sp, r7
 8003da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da6:	4770      	bx	lr

08003da8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003da8:	b5b0      	push	{r4, r5, r7, lr}
 8003daa:	b088      	sub	sp, #32
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003db0:	2300      	movs	r3, #0
 8003db2:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	689a      	ldr	r2, [r3, #8]
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	691b      	ldr	r3, [r3, #16]
 8003dbc:	431a      	orrs	r2, r3
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	695b      	ldr	r3, [r3, #20]
 8003dc2:	431a      	orrs	r2, r3
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	69db      	ldr	r3, [r3, #28]
 8003dc8:	4313      	orrs	r3, r2
 8003dca:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	681a      	ldr	r2, [r3, #0]
 8003dd2:	4bad      	ldr	r3, [pc, #692]	; (8004088 <UART_SetConfig+0x2e0>)
 8003dd4:	4013      	ands	r3, r2
 8003dd6:	687a      	ldr	r2, [r7, #4]
 8003dd8:	6812      	ldr	r2, [r2, #0]
 8003dda:	69f9      	ldr	r1, [r7, #28]
 8003ddc:	430b      	orrs	r3, r1
 8003dde:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	685b      	ldr	r3, [r3, #4]
 8003de6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	68da      	ldr	r2, [r3, #12]
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	430a      	orrs	r2, r1
 8003df4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	699b      	ldr	r3, [r3, #24]
 8003dfa:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	4aa2      	ldr	r2, [pc, #648]	; (800408c <UART_SetConfig+0x2e4>)
 8003e02:	4293      	cmp	r3, r2
 8003e04:	d004      	beq.n	8003e10 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6a1b      	ldr	r3, [r3, #32]
 8003e0a:	69fa      	ldr	r2, [r7, #28]
 8003e0c:	4313      	orrs	r3, r2
 8003e0e:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	689b      	ldr	r3, [r3, #8]
 8003e16:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	69fa      	ldr	r2, [r7, #28]
 8003e20:	430a      	orrs	r2, r1
 8003e22:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	4a99      	ldr	r2, [pc, #612]	; (8004090 <UART_SetConfig+0x2e8>)
 8003e2a:	4293      	cmp	r3, r2
 8003e2c:	d121      	bne.n	8003e72 <UART_SetConfig+0xca>
 8003e2e:	4b99      	ldr	r3, [pc, #612]	; (8004094 <UART_SetConfig+0x2ec>)
 8003e30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e34:	f003 0303 	and.w	r3, r3, #3
 8003e38:	2b03      	cmp	r3, #3
 8003e3a:	d817      	bhi.n	8003e6c <UART_SetConfig+0xc4>
 8003e3c:	a201      	add	r2, pc, #4	; (adr r2, 8003e44 <UART_SetConfig+0x9c>)
 8003e3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e42:	bf00      	nop
 8003e44:	08003e55 	.word	0x08003e55
 8003e48:	08003e61 	.word	0x08003e61
 8003e4c:	08003e5b 	.word	0x08003e5b
 8003e50:	08003e67 	.word	0x08003e67
 8003e54:	2301      	movs	r3, #1
 8003e56:	76fb      	strb	r3, [r7, #27]
 8003e58:	e0e7      	b.n	800402a <UART_SetConfig+0x282>
 8003e5a:	2302      	movs	r3, #2
 8003e5c:	76fb      	strb	r3, [r7, #27]
 8003e5e:	e0e4      	b.n	800402a <UART_SetConfig+0x282>
 8003e60:	2304      	movs	r3, #4
 8003e62:	76fb      	strb	r3, [r7, #27]
 8003e64:	e0e1      	b.n	800402a <UART_SetConfig+0x282>
 8003e66:	2308      	movs	r3, #8
 8003e68:	76fb      	strb	r3, [r7, #27]
 8003e6a:	e0de      	b.n	800402a <UART_SetConfig+0x282>
 8003e6c:	2310      	movs	r3, #16
 8003e6e:	76fb      	strb	r3, [r7, #27]
 8003e70:	e0db      	b.n	800402a <UART_SetConfig+0x282>
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	4a88      	ldr	r2, [pc, #544]	; (8004098 <UART_SetConfig+0x2f0>)
 8003e78:	4293      	cmp	r3, r2
 8003e7a:	d132      	bne.n	8003ee2 <UART_SetConfig+0x13a>
 8003e7c:	4b85      	ldr	r3, [pc, #532]	; (8004094 <UART_SetConfig+0x2ec>)
 8003e7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e82:	f003 030c 	and.w	r3, r3, #12
 8003e86:	2b0c      	cmp	r3, #12
 8003e88:	d828      	bhi.n	8003edc <UART_SetConfig+0x134>
 8003e8a:	a201      	add	r2, pc, #4	; (adr r2, 8003e90 <UART_SetConfig+0xe8>)
 8003e8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e90:	08003ec5 	.word	0x08003ec5
 8003e94:	08003edd 	.word	0x08003edd
 8003e98:	08003edd 	.word	0x08003edd
 8003e9c:	08003edd 	.word	0x08003edd
 8003ea0:	08003ed1 	.word	0x08003ed1
 8003ea4:	08003edd 	.word	0x08003edd
 8003ea8:	08003edd 	.word	0x08003edd
 8003eac:	08003edd 	.word	0x08003edd
 8003eb0:	08003ecb 	.word	0x08003ecb
 8003eb4:	08003edd 	.word	0x08003edd
 8003eb8:	08003edd 	.word	0x08003edd
 8003ebc:	08003edd 	.word	0x08003edd
 8003ec0:	08003ed7 	.word	0x08003ed7
 8003ec4:	2300      	movs	r3, #0
 8003ec6:	76fb      	strb	r3, [r7, #27]
 8003ec8:	e0af      	b.n	800402a <UART_SetConfig+0x282>
 8003eca:	2302      	movs	r3, #2
 8003ecc:	76fb      	strb	r3, [r7, #27]
 8003ece:	e0ac      	b.n	800402a <UART_SetConfig+0x282>
 8003ed0:	2304      	movs	r3, #4
 8003ed2:	76fb      	strb	r3, [r7, #27]
 8003ed4:	e0a9      	b.n	800402a <UART_SetConfig+0x282>
 8003ed6:	2308      	movs	r3, #8
 8003ed8:	76fb      	strb	r3, [r7, #27]
 8003eda:	e0a6      	b.n	800402a <UART_SetConfig+0x282>
 8003edc:	2310      	movs	r3, #16
 8003ede:	76fb      	strb	r3, [r7, #27]
 8003ee0:	e0a3      	b.n	800402a <UART_SetConfig+0x282>
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	4a6d      	ldr	r2, [pc, #436]	; (800409c <UART_SetConfig+0x2f4>)
 8003ee8:	4293      	cmp	r3, r2
 8003eea:	d120      	bne.n	8003f2e <UART_SetConfig+0x186>
 8003eec:	4b69      	ldr	r3, [pc, #420]	; (8004094 <UART_SetConfig+0x2ec>)
 8003eee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ef2:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003ef6:	2b30      	cmp	r3, #48	; 0x30
 8003ef8:	d013      	beq.n	8003f22 <UART_SetConfig+0x17a>
 8003efa:	2b30      	cmp	r3, #48	; 0x30
 8003efc:	d814      	bhi.n	8003f28 <UART_SetConfig+0x180>
 8003efe:	2b20      	cmp	r3, #32
 8003f00:	d009      	beq.n	8003f16 <UART_SetConfig+0x16e>
 8003f02:	2b20      	cmp	r3, #32
 8003f04:	d810      	bhi.n	8003f28 <UART_SetConfig+0x180>
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d002      	beq.n	8003f10 <UART_SetConfig+0x168>
 8003f0a:	2b10      	cmp	r3, #16
 8003f0c:	d006      	beq.n	8003f1c <UART_SetConfig+0x174>
 8003f0e:	e00b      	b.n	8003f28 <UART_SetConfig+0x180>
 8003f10:	2300      	movs	r3, #0
 8003f12:	76fb      	strb	r3, [r7, #27]
 8003f14:	e089      	b.n	800402a <UART_SetConfig+0x282>
 8003f16:	2302      	movs	r3, #2
 8003f18:	76fb      	strb	r3, [r7, #27]
 8003f1a:	e086      	b.n	800402a <UART_SetConfig+0x282>
 8003f1c:	2304      	movs	r3, #4
 8003f1e:	76fb      	strb	r3, [r7, #27]
 8003f20:	e083      	b.n	800402a <UART_SetConfig+0x282>
 8003f22:	2308      	movs	r3, #8
 8003f24:	76fb      	strb	r3, [r7, #27]
 8003f26:	e080      	b.n	800402a <UART_SetConfig+0x282>
 8003f28:	2310      	movs	r3, #16
 8003f2a:	76fb      	strb	r3, [r7, #27]
 8003f2c:	e07d      	b.n	800402a <UART_SetConfig+0x282>
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	4a5b      	ldr	r2, [pc, #364]	; (80040a0 <UART_SetConfig+0x2f8>)
 8003f34:	4293      	cmp	r3, r2
 8003f36:	d120      	bne.n	8003f7a <UART_SetConfig+0x1d2>
 8003f38:	4b56      	ldr	r3, [pc, #344]	; (8004094 <UART_SetConfig+0x2ec>)
 8003f3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f3e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003f42:	2bc0      	cmp	r3, #192	; 0xc0
 8003f44:	d013      	beq.n	8003f6e <UART_SetConfig+0x1c6>
 8003f46:	2bc0      	cmp	r3, #192	; 0xc0
 8003f48:	d814      	bhi.n	8003f74 <UART_SetConfig+0x1cc>
 8003f4a:	2b80      	cmp	r3, #128	; 0x80
 8003f4c:	d009      	beq.n	8003f62 <UART_SetConfig+0x1ba>
 8003f4e:	2b80      	cmp	r3, #128	; 0x80
 8003f50:	d810      	bhi.n	8003f74 <UART_SetConfig+0x1cc>
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d002      	beq.n	8003f5c <UART_SetConfig+0x1b4>
 8003f56:	2b40      	cmp	r3, #64	; 0x40
 8003f58:	d006      	beq.n	8003f68 <UART_SetConfig+0x1c0>
 8003f5a:	e00b      	b.n	8003f74 <UART_SetConfig+0x1cc>
 8003f5c:	2300      	movs	r3, #0
 8003f5e:	76fb      	strb	r3, [r7, #27]
 8003f60:	e063      	b.n	800402a <UART_SetConfig+0x282>
 8003f62:	2302      	movs	r3, #2
 8003f64:	76fb      	strb	r3, [r7, #27]
 8003f66:	e060      	b.n	800402a <UART_SetConfig+0x282>
 8003f68:	2304      	movs	r3, #4
 8003f6a:	76fb      	strb	r3, [r7, #27]
 8003f6c:	e05d      	b.n	800402a <UART_SetConfig+0x282>
 8003f6e:	2308      	movs	r3, #8
 8003f70:	76fb      	strb	r3, [r7, #27]
 8003f72:	e05a      	b.n	800402a <UART_SetConfig+0x282>
 8003f74:	2310      	movs	r3, #16
 8003f76:	76fb      	strb	r3, [r7, #27]
 8003f78:	e057      	b.n	800402a <UART_SetConfig+0x282>
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	4a49      	ldr	r2, [pc, #292]	; (80040a4 <UART_SetConfig+0x2fc>)
 8003f80:	4293      	cmp	r3, r2
 8003f82:	d125      	bne.n	8003fd0 <UART_SetConfig+0x228>
 8003f84:	4b43      	ldr	r3, [pc, #268]	; (8004094 <UART_SetConfig+0x2ec>)
 8003f86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f8a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f8e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003f92:	d017      	beq.n	8003fc4 <UART_SetConfig+0x21c>
 8003f94:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003f98:	d817      	bhi.n	8003fca <UART_SetConfig+0x222>
 8003f9a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003f9e:	d00b      	beq.n	8003fb8 <UART_SetConfig+0x210>
 8003fa0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003fa4:	d811      	bhi.n	8003fca <UART_SetConfig+0x222>
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d003      	beq.n	8003fb2 <UART_SetConfig+0x20a>
 8003faa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003fae:	d006      	beq.n	8003fbe <UART_SetConfig+0x216>
 8003fb0:	e00b      	b.n	8003fca <UART_SetConfig+0x222>
 8003fb2:	2300      	movs	r3, #0
 8003fb4:	76fb      	strb	r3, [r7, #27]
 8003fb6:	e038      	b.n	800402a <UART_SetConfig+0x282>
 8003fb8:	2302      	movs	r3, #2
 8003fba:	76fb      	strb	r3, [r7, #27]
 8003fbc:	e035      	b.n	800402a <UART_SetConfig+0x282>
 8003fbe:	2304      	movs	r3, #4
 8003fc0:	76fb      	strb	r3, [r7, #27]
 8003fc2:	e032      	b.n	800402a <UART_SetConfig+0x282>
 8003fc4:	2308      	movs	r3, #8
 8003fc6:	76fb      	strb	r3, [r7, #27]
 8003fc8:	e02f      	b.n	800402a <UART_SetConfig+0x282>
 8003fca:	2310      	movs	r3, #16
 8003fcc:	76fb      	strb	r3, [r7, #27]
 8003fce:	e02c      	b.n	800402a <UART_SetConfig+0x282>
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	4a2d      	ldr	r2, [pc, #180]	; (800408c <UART_SetConfig+0x2e4>)
 8003fd6:	4293      	cmp	r3, r2
 8003fd8:	d125      	bne.n	8004026 <UART_SetConfig+0x27e>
 8003fda:	4b2e      	ldr	r3, [pc, #184]	; (8004094 <UART_SetConfig+0x2ec>)
 8003fdc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fe0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003fe4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003fe8:	d017      	beq.n	800401a <UART_SetConfig+0x272>
 8003fea:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003fee:	d817      	bhi.n	8004020 <UART_SetConfig+0x278>
 8003ff0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003ff4:	d00b      	beq.n	800400e <UART_SetConfig+0x266>
 8003ff6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003ffa:	d811      	bhi.n	8004020 <UART_SetConfig+0x278>
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d003      	beq.n	8004008 <UART_SetConfig+0x260>
 8004000:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004004:	d006      	beq.n	8004014 <UART_SetConfig+0x26c>
 8004006:	e00b      	b.n	8004020 <UART_SetConfig+0x278>
 8004008:	2300      	movs	r3, #0
 800400a:	76fb      	strb	r3, [r7, #27]
 800400c:	e00d      	b.n	800402a <UART_SetConfig+0x282>
 800400e:	2302      	movs	r3, #2
 8004010:	76fb      	strb	r3, [r7, #27]
 8004012:	e00a      	b.n	800402a <UART_SetConfig+0x282>
 8004014:	2304      	movs	r3, #4
 8004016:	76fb      	strb	r3, [r7, #27]
 8004018:	e007      	b.n	800402a <UART_SetConfig+0x282>
 800401a:	2308      	movs	r3, #8
 800401c:	76fb      	strb	r3, [r7, #27]
 800401e:	e004      	b.n	800402a <UART_SetConfig+0x282>
 8004020:	2310      	movs	r3, #16
 8004022:	76fb      	strb	r3, [r7, #27]
 8004024:	e001      	b.n	800402a <UART_SetConfig+0x282>
 8004026:	2310      	movs	r3, #16
 8004028:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	4a17      	ldr	r2, [pc, #92]	; (800408c <UART_SetConfig+0x2e4>)
 8004030:	4293      	cmp	r3, r2
 8004032:	f040 8087 	bne.w	8004144 <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004036:	7efb      	ldrb	r3, [r7, #27]
 8004038:	2b08      	cmp	r3, #8
 800403a:	d837      	bhi.n	80040ac <UART_SetConfig+0x304>
 800403c:	a201      	add	r2, pc, #4	; (adr r2, 8004044 <UART_SetConfig+0x29c>)
 800403e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004042:	bf00      	nop
 8004044:	08004069 	.word	0x08004069
 8004048:	080040ad 	.word	0x080040ad
 800404c:	08004071 	.word	0x08004071
 8004050:	080040ad 	.word	0x080040ad
 8004054:	08004077 	.word	0x08004077
 8004058:	080040ad 	.word	0x080040ad
 800405c:	080040ad 	.word	0x080040ad
 8004060:	080040ad 	.word	0x080040ad
 8004064:	0800407f 	.word	0x0800407f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004068:	f7fe fea2 	bl	8002db0 <HAL_RCC_GetPCLK1Freq>
 800406c:	6178      	str	r0, [r7, #20]
        break;
 800406e:	e022      	b.n	80040b6 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004070:	4b0d      	ldr	r3, [pc, #52]	; (80040a8 <UART_SetConfig+0x300>)
 8004072:	617b      	str	r3, [r7, #20]
        break;
 8004074:	e01f      	b.n	80040b6 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004076:	f7fe fe03 	bl	8002c80 <HAL_RCC_GetSysClockFreq>
 800407a:	6178      	str	r0, [r7, #20]
        break;
 800407c:	e01b      	b.n	80040b6 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800407e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004082:	617b      	str	r3, [r7, #20]
        break;
 8004084:	e017      	b.n	80040b6 <UART_SetConfig+0x30e>
 8004086:	bf00      	nop
 8004088:	efff69f3 	.word	0xefff69f3
 800408c:	40008000 	.word	0x40008000
 8004090:	40013800 	.word	0x40013800
 8004094:	40021000 	.word	0x40021000
 8004098:	40004400 	.word	0x40004400
 800409c:	40004800 	.word	0x40004800
 80040a0:	40004c00 	.word	0x40004c00
 80040a4:	40005000 	.word	0x40005000
 80040a8:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 80040ac:	2300      	movs	r3, #0
 80040ae:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80040b0:	2301      	movs	r3, #1
 80040b2:	76bb      	strb	r3, [r7, #26]
        break;
 80040b4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80040b6:	697b      	ldr	r3, [r7, #20]
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	f000 80f1 	beq.w	80042a0 <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	685a      	ldr	r2, [r3, #4]
 80040c2:	4613      	mov	r3, r2
 80040c4:	005b      	lsls	r3, r3, #1
 80040c6:	4413      	add	r3, r2
 80040c8:	697a      	ldr	r2, [r7, #20]
 80040ca:	429a      	cmp	r2, r3
 80040cc:	d305      	bcc.n	80040da <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	685b      	ldr	r3, [r3, #4]
 80040d2:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80040d4:	697a      	ldr	r2, [r7, #20]
 80040d6:	429a      	cmp	r2, r3
 80040d8:	d902      	bls.n	80040e0 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 80040da:	2301      	movs	r3, #1
 80040dc:	76bb      	strb	r3, [r7, #26]
 80040de:	e0df      	b.n	80042a0 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80040e0:	697b      	ldr	r3, [r7, #20]
 80040e2:	4618      	mov	r0, r3
 80040e4:	f04f 0100 	mov.w	r1, #0
 80040e8:	f04f 0200 	mov.w	r2, #0
 80040ec:	f04f 0300 	mov.w	r3, #0
 80040f0:	020b      	lsls	r3, r1, #8
 80040f2:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80040f6:	0202      	lsls	r2, r0, #8
 80040f8:	6879      	ldr	r1, [r7, #4]
 80040fa:	6849      	ldr	r1, [r1, #4]
 80040fc:	0849      	lsrs	r1, r1, #1
 80040fe:	4608      	mov	r0, r1
 8004100:	f04f 0100 	mov.w	r1, #0
 8004104:	1814      	adds	r4, r2, r0
 8004106:	eb43 0501 	adc.w	r5, r3, r1
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	685b      	ldr	r3, [r3, #4]
 800410e:	461a      	mov	r2, r3
 8004110:	f04f 0300 	mov.w	r3, #0
 8004114:	4620      	mov	r0, r4
 8004116:	4629      	mov	r1, r5
 8004118:	f7fc fc74 	bl	8000a04 <__aeabi_uldivmod>
 800411c:	4602      	mov	r2, r0
 800411e:	460b      	mov	r3, r1
 8004120:	4613      	mov	r3, r2
 8004122:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004124:	693b      	ldr	r3, [r7, #16]
 8004126:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800412a:	d308      	bcc.n	800413e <UART_SetConfig+0x396>
 800412c:	693b      	ldr	r3, [r7, #16]
 800412e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004132:	d204      	bcs.n	800413e <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	693a      	ldr	r2, [r7, #16]
 800413a:	60da      	str	r2, [r3, #12]
 800413c:	e0b0      	b.n	80042a0 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 800413e:	2301      	movs	r3, #1
 8004140:	76bb      	strb	r3, [r7, #26]
 8004142:	e0ad      	b.n	80042a0 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	69db      	ldr	r3, [r3, #28]
 8004148:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800414c:	d15c      	bne.n	8004208 <UART_SetConfig+0x460>
  {
    switch (clocksource)
 800414e:	7efb      	ldrb	r3, [r7, #27]
 8004150:	2b08      	cmp	r3, #8
 8004152:	d828      	bhi.n	80041a6 <UART_SetConfig+0x3fe>
 8004154:	a201      	add	r2, pc, #4	; (adr r2, 800415c <UART_SetConfig+0x3b4>)
 8004156:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800415a:	bf00      	nop
 800415c:	08004181 	.word	0x08004181
 8004160:	08004189 	.word	0x08004189
 8004164:	08004191 	.word	0x08004191
 8004168:	080041a7 	.word	0x080041a7
 800416c:	08004197 	.word	0x08004197
 8004170:	080041a7 	.word	0x080041a7
 8004174:	080041a7 	.word	0x080041a7
 8004178:	080041a7 	.word	0x080041a7
 800417c:	0800419f 	.word	0x0800419f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004180:	f7fe fe16 	bl	8002db0 <HAL_RCC_GetPCLK1Freq>
 8004184:	6178      	str	r0, [r7, #20]
        break;
 8004186:	e013      	b.n	80041b0 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004188:	f7fe fe28 	bl	8002ddc <HAL_RCC_GetPCLK2Freq>
 800418c:	6178      	str	r0, [r7, #20]
        break;
 800418e:	e00f      	b.n	80041b0 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004190:	4b49      	ldr	r3, [pc, #292]	; (80042b8 <UART_SetConfig+0x510>)
 8004192:	617b      	str	r3, [r7, #20]
        break;
 8004194:	e00c      	b.n	80041b0 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004196:	f7fe fd73 	bl	8002c80 <HAL_RCC_GetSysClockFreq>
 800419a:	6178      	str	r0, [r7, #20]
        break;
 800419c:	e008      	b.n	80041b0 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800419e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80041a2:	617b      	str	r3, [r7, #20]
        break;
 80041a4:	e004      	b.n	80041b0 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 80041a6:	2300      	movs	r3, #0
 80041a8:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80041aa:	2301      	movs	r3, #1
 80041ac:	76bb      	strb	r3, [r7, #26]
        break;
 80041ae:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80041b0:	697b      	ldr	r3, [r7, #20]
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d074      	beq.n	80042a0 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80041b6:	697b      	ldr	r3, [r7, #20]
 80041b8:	005a      	lsls	r2, r3, #1
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	685b      	ldr	r3, [r3, #4]
 80041be:	085b      	lsrs	r3, r3, #1
 80041c0:	441a      	add	r2, r3
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	685b      	ldr	r3, [r3, #4]
 80041c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80041ca:	b29b      	uxth	r3, r3
 80041cc:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80041ce:	693b      	ldr	r3, [r7, #16]
 80041d0:	2b0f      	cmp	r3, #15
 80041d2:	d916      	bls.n	8004202 <UART_SetConfig+0x45a>
 80041d4:	693b      	ldr	r3, [r7, #16]
 80041d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80041da:	d212      	bcs.n	8004202 <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80041dc:	693b      	ldr	r3, [r7, #16]
 80041de:	b29b      	uxth	r3, r3
 80041e0:	f023 030f 	bic.w	r3, r3, #15
 80041e4:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80041e6:	693b      	ldr	r3, [r7, #16]
 80041e8:	085b      	lsrs	r3, r3, #1
 80041ea:	b29b      	uxth	r3, r3
 80041ec:	f003 0307 	and.w	r3, r3, #7
 80041f0:	b29a      	uxth	r2, r3
 80041f2:	89fb      	ldrh	r3, [r7, #14]
 80041f4:	4313      	orrs	r3, r2
 80041f6:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	89fa      	ldrh	r2, [r7, #14]
 80041fe:	60da      	str	r2, [r3, #12]
 8004200:	e04e      	b.n	80042a0 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8004202:	2301      	movs	r3, #1
 8004204:	76bb      	strb	r3, [r7, #26]
 8004206:	e04b      	b.n	80042a0 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004208:	7efb      	ldrb	r3, [r7, #27]
 800420a:	2b08      	cmp	r3, #8
 800420c:	d827      	bhi.n	800425e <UART_SetConfig+0x4b6>
 800420e:	a201      	add	r2, pc, #4	; (adr r2, 8004214 <UART_SetConfig+0x46c>)
 8004210:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004214:	08004239 	.word	0x08004239
 8004218:	08004241 	.word	0x08004241
 800421c:	08004249 	.word	0x08004249
 8004220:	0800425f 	.word	0x0800425f
 8004224:	0800424f 	.word	0x0800424f
 8004228:	0800425f 	.word	0x0800425f
 800422c:	0800425f 	.word	0x0800425f
 8004230:	0800425f 	.word	0x0800425f
 8004234:	08004257 	.word	0x08004257
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004238:	f7fe fdba 	bl	8002db0 <HAL_RCC_GetPCLK1Freq>
 800423c:	6178      	str	r0, [r7, #20]
        break;
 800423e:	e013      	b.n	8004268 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004240:	f7fe fdcc 	bl	8002ddc <HAL_RCC_GetPCLK2Freq>
 8004244:	6178      	str	r0, [r7, #20]
        break;
 8004246:	e00f      	b.n	8004268 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004248:	4b1b      	ldr	r3, [pc, #108]	; (80042b8 <UART_SetConfig+0x510>)
 800424a:	617b      	str	r3, [r7, #20]
        break;
 800424c:	e00c      	b.n	8004268 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800424e:	f7fe fd17 	bl	8002c80 <HAL_RCC_GetSysClockFreq>
 8004252:	6178      	str	r0, [r7, #20]
        break;
 8004254:	e008      	b.n	8004268 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004256:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800425a:	617b      	str	r3, [r7, #20]
        break;
 800425c:	e004      	b.n	8004268 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 800425e:	2300      	movs	r3, #0
 8004260:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004262:	2301      	movs	r3, #1
 8004264:	76bb      	strb	r3, [r7, #26]
        break;
 8004266:	bf00      	nop
    }

    if (pclk != 0U)
 8004268:	697b      	ldr	r3, [r7, #20]
 800426a:	2b00      	cmp	r3, #0
 800426c:	d018      	beq.n	80042a0 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	685b      	ldr	r3, [r3, #4]
 8004272:	085a      	lsrs	r2, r3, #1
 8004274:	697b      	ldr	r3, [r7, #20]
 8004276:	441a      	add	r2, r3
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	685b      	ldr	r3, [r3, #4]
 800427c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004280:	b29b      	uxth	r3, r3
 8004282:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004284:	693b      	ldr	r3, [r7, #16]
 8004286:	2b0f      	cmp	r3, #15
 8004288:	d908      	bls.n	800429c <UART_SetConfig+0x4f4>
 800428a:	693b      	ldr	r3, [r7, #16]
 800428c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004290:	d204      	bcs.n	800429c <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	693a      	ldr	r2, [r7, #16]
 8004298:	60da      	str	r2, [r3, #12]
 800429a:	e001      	b.n	80042a0 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 800429c:	2301      	movs	r3, #1
 800429e:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	2200      	movs	r2, #0
 80042a4:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	2200      	movs	r2, #0
 80042aa:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80042ac:	7ebb      	ldrb	r3, [r7, #26]
}
 80042ae:	4618      	mov	r0, r3
 80042b0:	3720      	adds	r7, #32
 80042b2:	46bd      	mov	sp, r7
 80042b4:	bdb0      	pop	{r4, r5, r7, pc}
 80042b6:	bf00      	nop
 80042b8:	00f42400 	.word	0x00f42400

080042bc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80042bc:	b480      	push	{r7}
 80042be:	b083      	sub	sp, #12
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042c8:	f003 0301 	and.w	r3, r3, #1
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d00a      	beq.n	80042e6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	685b      	ldr	r3, [r3, #4]
 80042d6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	430a      	orrs	r2, r1
 80042e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042ea:	f003 0302 	and.w	r3, r3, #2
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d00a      	beq.n	8004308 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	685b      	ldr	r3, [r3, #4]
 80042f8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	430a      	orrs	r2, r1
 8004306:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800430c:	f003 0304 	and.w	r3, r3, #4
 8004310:	2b00      	cmp	r3, #0
 8004312:	d00a      	beq.n	800432a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	685b      	ldr	r3, [r3, #4]
 800431a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	430a      	orrs	r2, r1
 8004328:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800432e:	f003 0308 	and.w	r3, r3, #8
 8004332:	2b00      	cmp	r3, #0
 8004334:	d00a      	beq.n	800434c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	685b      	ldr	r3, [r3, #4]
 800433c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	430a      	orrs	r2, r1
 800434a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004350:	f003 0310 	and.w	r3, r3, #16
 8004354:	2b00      	cmp	r3, #0
 8004356:	d00a      	beq.n	800436e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	689b      	ldr	r3, [r3, #8]
 800435e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	430a      	orrs	r2, r1
 800436c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004372:	f003 0320 	and.w	r3, r3, #32
 8004376:	2b00      	cmp	r3, #0
 8004378:	d00a      	beq.n	8004390 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	689b      	ldr	r3, [r3, #8]
 8004380:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	430a      	orrs	r2, r1
 800438e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004394:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004398:	2b00      	cmp	r3, #0
 800439a:	d01a      	beq.n	80043d2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	685b      	ldr	r3, [r3, #4]
 80043a2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	430a      	orrs	r2, r1
 80043b0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043b6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80043ba:	d10a      	bne.n	80043d2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	685b      	ldr	r3, [r3, #4]
 80043c2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	430a      	orrs	r2, r1
 80043d0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d00a      	beq.n	80043f4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	685b      	ldr	r3, [r3, #4]
 80043e4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	430a      	orrs	r2, r1
 80043f2:	605a      	str	r2, [r3, #4]
  }
}
 80043f4:	bf00      	nop
 80043f6:	370c      	adds	r7, #12
 80043f8:	46bd      	mov	sp, r7
 80043fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fe:	4770      	bx	lr

08004400 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004400:	b580      	push	{r7, lr}
 8004402:	b086      	sub	sp, #24
 8004404:	af02      	add	r7, sp, #8
 8004406:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	2200      	movs	r2, #0
 800440c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004410:	f7fd f9fe 	bl	8001810 <HAL_GetTick>
 8004414:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f003 0308 	and.w	r3, r3, #8
 8004420:	2b08      	cmp	r3, #8
 8004422:	d10e      	bne.n	8004442 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004424:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004428:	9300      	str	r3, [sp, #0]
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	2200      	movs	r2, #0
 800442e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004432:	6878      	ldr	r0, [r7, #4]
 8004434:	f000 f82d 	bl	8004492 <UART_WaitOnFlagUntilTimeout>
 8004438:	4603      	mov	r3, r0
 800443a:	2b00      	cmp	r3, #0
 800443c:	d001      	beq.n	8004442 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800443e:	2303      	movs	r3, #3
 8004440:	e023      	b.n	800448a <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f003 0304 	and.w	r3, r3, #4
 800444c:	2b04      	cmp	r3, #4
 800444e:	d10e      	bne.n	800446e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004450:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004454:	9300      	str	r3, [sp, #0]
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	2200      	movs	r2, #0
 800445a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800445e:	6878      	ldr	r0, [r7, #4]
 8004460:	f000 f817 	bl	8004492 <UART_WaitOnFlagUntilTimeout>
 8004464:	4603      	mov	r3, r0
 8004466:	2b00      	cmp	r3, #0
 8004468:	d001      	beq.n	800446e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800446a:	2303      	movs	r3, #3
 800446c:	e00d      	b.n	800448a <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	2220      	movs	r2, #32
 8004472:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	2220      	movs	r2, #32
 8004478:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	2200      	movs	r2, #0
 800447e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	2200      	movs	r2, #0
 8004484:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004488:	2300      	movs	r3, #0
}
 800448a:	4618      	mov	r0, r3
 800448c:	3710      	adds	r7, #16
 800448e:	46bd      	mov	sp, r7
 8004490:	bd80      	pop	{r7, pc}

08004492 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004492:	b580      	push	{r7, lr}
 8004494:	b084      	sub	sp, #16
 8004496:	af00      	add	r7, sp, #0
 8004498:	60f8      	str	r0, [r7, #12]
 800449a:	60b9      	str	r1, [r7, #8]
 800449c:	603b      	str	r3, [r7, #0]
 800449e:	4613      	mov	r3, r2
 80044a0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80044a2:	e05e      	b.n	8004562 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80044a4:	69bb      	ldr	r3, [r7, #24]
 80044a6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80044aa:	d05a      	beq.n	8004562 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80044ac:	f7fd f9b0 	bl	8001810 <HAL_GetTick>
 80044b0:	4602      	mov	r2, r0
 80044b2:	683b      	ldr	r3, [r7, #0]
 80044b4:	1ad3      	subs	r3, r2, r3
 80044b6:	69ba      	ldr	r2, [r7, #24]
 80044b8:	429a      	cmp	r2, r3
 80044ba:	d302      	bcc.n	80044c2 <UART_WaitOnFlagUntilTimeout+0x30>
 80044bc:	69bb      	ldr	r3, [r7, #24]
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d11b      	bne.n	80044fa <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	681a      	ldr	r2, [r3, #0]
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80044d0:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	689a      	ldr	r2, [r3, #8]
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f022 0201 	bic.w	r2, r2, #1
 80044e0:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	2220      	movs	r2, #32
 80044e6:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	2220      	movs	r2, #32
 80044ec:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	2200      	movs	r2, #0
 80044f2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80044f6:	2303      	movs	r3, #3
 80044f8:	e043      	b.n	8004582 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	f003 0304 	and.w	r3, r3, #4
 8004504:	2b00      	cmp	r3, #0
 8004506:	d02c      	beq.n	8004562 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	69db      	ldr	r3, [r3, #28]
 800450e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004512:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004516:	d124      	bne.n	8004562 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004520:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	681a      	ldr	r2, [r3, #0]
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004530:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	689a      	ldr	r2, [r3, #8]
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f022 0201 	bic.w	r2, r2, #1
 8004540:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	2220      	movs	r2, #32
 8004546:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	2220      	movs	r2, #32
 800454c:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	2220      	movs	r2, #32
 8004552:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	2200      	movs	r2, #0
 800455a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800455e:	2303      	movs	r3, #3
 8004560:	e00f      	b.n	8004582 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	69da      	ldr	r2, [r3, #28]
 8004568:	68bb      	ldr	r3, [r7, #8]
 800456a:	4013      	ands	r3, r2
 800456c:	68ba      	ldr	r2, [r7, #8]
 800456e:	429a      	cmp	r2, r3
 8004570:	bf0c      	ite	eq
 8004572:	2301      	moveq	r3, #1
 8004574:	2300      	movne	r3, #0
 8004576:	b2db      	uxtb	r3, r3
 8004578:	461a      	mov	r2, r3
 800457a:	79fb      	ldrb	r3, [r7, #7]
 800457c:	429a      	cmp	r2, r3
 800457e:	d091      	beq.n	80044a4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004580:	2300      	movs	r3, #0
}
 8004582:	4618      	mov	r0, r3
 8004584:	3710      	adds	r7, #16
 8004586:	46bd      	mov	sp, r7
 8004588:	bd80      	pop	{r7, pc}
	...

0800458c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800458c:	b480      	push	{r7}
 800458e:	b085      	sub	sp, #20
 8004590:	af00      	add	r7, sp, #0
 8004592:	60f8      	str	r0, [r7, #12]
 8004594:	60b9      	str	r1, [r7, #8]
 8004596:	4613      	mov	r3, r2
 8004598:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	68ba      	ldr	r2, [r7, #8]
 800459e:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	88fa      	ldrh	r2, [r7, #6]
 80045a4:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	88fa      	ldrh	r2, [r7, #6]
 80045ac:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	2200      	movs	r2, #0
 80045b4:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	689b      	ldr	r3, [r3, #8]
 80045ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80045be:	d10e      	bne.n	80045de <UART_Start_Receive_IT+0x52>
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	691b      	ldr	r3, [r3, #16]
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d105      	bne.n	80045d4 <UART_Start_Receive_IT+0x48>
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	f240 12ff 	movw	r2, #511	; 0x1ff
 80045ce:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80045d2:	e02d      	b.n	8004630 <UART_Start_Receive_IT+0xa4>
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	22ff      	movs	r2, #255	; 0xff
 80045d8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80045dc:	e028      	b.n	8004630 <UART_Start_Receive_IT+0xa4>
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	689b      	ldr	r3, [r3, #8]
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d10d      	bne.n	8004602 <UART_Start_Receive_IT+0x76>
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	691b      	ldr	r3, [r3, #16]
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d104      	bne.n	80045f8 <UART_Start_Receive_IT+0x6c>
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	22ff      	movs	r2, #255	; 0xff
 80045f2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80045f6:	e01b      	b.n	8004630 <UART_Start_Receive_IT+0xa4>
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	227f      	movs	r2, #127	; 0x7f
 80045fc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004600:	e016      	b.n	8004630 <UART_Start_Receive_IT+0xa4>
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	689b      	ldr	r3, [r3, #8]
 8004606:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800460a:	d10d      	bne.n	8004628 <UART_Start_Receive_IT+0x9c>
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	691b      	ldr	r3, [r3, #16]
 8004610:	2b00      	cmp	r3, #0
 8004612:	d104      	bne.n	800461e <UART_Start_Receive_IT+0x92>
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	227f      	movs	r2, #127	; 0x7f
 8004618:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800461c:	e008      	b.n	8004630 <UART_Start_Receive_IT+0xa4>
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	223f      	movs	r2, #63	; 0x3f
 8004622:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004626:	e003      	b.n	8004630 <UART_Start_Receive_IT+0xa4>
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	2200      	movs	r2, #0
 800462c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	2200      	movs	r2, #0
 8004634:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	2222      	movs	r2, #34	; 0x22
 800463c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	689a      	ldr	r2, [r3, #8]
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f042 0201 	orr.w	r2, r2, #1
 800464c:	609a      	str	r2, [r3, #8]
    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	689b      	ldr	r3, [r3, #8]
 8004652:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004656:	d107      	bne.n	8004668 <UART_Start_Receive_IT+0xdc>
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	691b      	ldr	r3, [r3, #16]
 800465c:	2b00      	cmp	r3, #0
 800465e:	d103      	bne.n	8004668 <UART_Start_Receive_IT+0xdc>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	4a0c      	ldr	r2, [pc, #48]	; (8004694 <UART_Start_Receive_IT+0x108>)
 8004664:	665a      	str	r2, [r3, #100]	; 0x64
 8004666:	e002      	b.n	800466e <UART_Start_Receive_IT+0xe2>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	4a0b      	ldr	r2, [pc, #44]	; (8004698 <UART_Start_Receive_IT+0x10c>)
 800466c:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	2200      	movs	r2, #0
 8004672:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	681a      	ldr	r2, [r3, #0]
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 8004684:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8004686:	2300      	movs	r3, #0
}
 8004688:	4618      	mov	r0, r3
 800468a:	3714      	adds	r7, #20
 800468c:	46bd      	mov	sp, r7
 800468e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004692:	4770      	bx	lr
 8004694:	08004831 	.word	0x08004831
 8004698:	08004759 	.word	0x08004759

0800469c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800469c:	b480      	push	{r7}
 800469e:	b083      	sub	sp, #12
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	681a      	ldr	r2, [r3, #0]
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80046b2:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	689a      	ldr	r2, [r3, #8]
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f022 0201 	bic.w	r2, r2, #1
 80046c2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80046c8:	2b01      	cmp	r3, #1
 80046ca:	d107      	bne.n	80046dc <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	681a      	ldr	r2, [r3, #0]
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f022 0210 	bic.w	r2, r2, #16
 80046da:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	2220      	movs	r2, #32
 80046e0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	2200      	movs	r2, #0
 80046e6:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	2200      	movs	r2, #0
 80046ec:	665a      	str	r2, [r3, #100]	; 0x64
}
 80046ee:	bf00      	nop
 80046f0:	370c      	adds	r7, #12
 80046f2:	46bd      	mov	sp, r7
 80046f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f8:	4770      	bx	lr

080046fa <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80046fa:	b580      	push	{r7, lr}
 80046fc:	b084      	sub	sp, #16
 80046fe:	af00      	add	r7, sp, #0
 8004700:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004706:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	2200      	movs	r2, #0
 800470c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	2200      	movs	r2, #0
 8004714:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004718:	68f8      	ldr	r0, [r7, #12]
 800471a:	f7ff fb2f 	bl	8003d7c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800471e:	bf00      	nop
 8004720:	3710      	adds	r7, #16
 8004722:	46bd      	mov	sp, r7
 8004724:	bd80      	pop	{r7, pc}

08004726 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004726:	b580      	push	{r7, lr}
 8004728:	b082      	sub	sp, #8
 800472a:	af00      	add	r7, sp, #0
 800472c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	681a      	ldr	r2, [r3, #0]
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800473c:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	2220      	movs	r2, #32
 8004742:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	2200      	movs	r2, #0
 8004748:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800474a:	6878      	ldr	r0, [r7, #4]
 800474c:	f7ff fb0c 	bl	8003d68 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004750:	bf00      	nop
 8004752:	3708      	adds	r7, #8
 8004754:	46bd      	mov	sp, r7
 8004756:	bd80      	pop	{r7, pc}

08004758 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004758:	b580      	push	{r7, lr}
 800475a:	b084      	sub	sp, #16
 800475c:	af00      	add	r7, sp, #0
 800475e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004766:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800476c:	2b22      	cmp	r3, #34	; 0x22
 800476e:	d151      	bne.n	8004814 <UART_RxISR_8BIT+0xbc>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004776:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004778:	89bb      	ldrh	r3, [r7, #12]
 800477a:	b2d9      	uxtb	r1, r3
 800477c:	89fb      	ldrh	r3, [r7, #14]
 800477e:	b2da      	uxtb	r2, r3
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004784:	400a      	ands	r2, r1
 8004786:	b2d2      	uxtb	r2, r2
 8004788:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800478e:	1c5a      	adds	r2, r3, #1
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800479a:	b29b      	uxth	r3, r3
 800479c:	3b01      	subs	r3, #1
 800479e:	b29a      	uxth	r2, r3
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80047ac:	b29b      	uxth	r3, r3
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d13a      	bne.n	8004828 <UART_RxISR_8BIT+0xd0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	681a      	ldr	r2, [r3, #0]
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80047c0:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	689a      	ldr	r2, [r3, #8]
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f022 0201 	bic.w	r2, r2, #1
 80047d0:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	2220      	movs	r2, #32
 80047d6:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	2200      	movs	r2, #0
 80047dc:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80047e2:	2b01      	cmp	r3, #1
 80047e4:	d10f      	bne.n	8004806 <UART_RxISR_8BIT+0xae>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	681a      	ldr	r2, [r3, #0]
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	f022 0210 	bic.w	r2, r2, #16
 80047f4:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80047fc:	4619      	mov	r1, r3
 80047fe:	6878      	ldr	r0, [r7, #4]
 8004800:	f7ff fac6 	bl	8003d90 <HAL_UARTEx_RxEventCallback>
 8004804:	e002      	b.n	800480c <UART_RxISR_8BIT+0xb4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004806:	6878      	ldr	r0, [r7, #4]
 8004808:	f7fc face 	bl	8000da8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	2200      	movs	r2, #0
 8004810:	661a      	str	r2, [r3, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004812:	e009      	b.n	8004828 <UART_RxISR_8BIT+0xd0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	8b1b      	ldrh	r3, [r3, #24]
 800481a:	b29a      	uxth	r2, r3
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f042 0208 	orr.w	r2, r2, #8
 8004824:	b292      	uxth	r2, r2
 8004826:	831a      	strh	r2, [r3, #24]
}
 8004828:	bf00      	nop
 800482a:	3710      	adds	r7, #16
 800482c:	46bd      	mov	sp, r7
 800482e:	bd80      	pop	{r7, pc}

08004830 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004830:	b580      	push	{r7, lr}
 8004832:	b084      	sub	sp, #16
 8004834:	af00      	add	r7, sp, #0
 8004836:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800483e:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004844:	2b22      	cmp	r3, #34	; 0x22
 8004846:	d151      	bne.n	80048ec <UART_RxISR_16BIT+0xbc>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800484e:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004854:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 8004856:	89ba      	ldrh	r2, [r7, #12]
 8004858:	89fb      	ldrh	r3, [r7, #14]
 800485a:	4013      	ands	r3, r2
 800485c:	b29a      	uxth	r2, r3
 800485e:	68bb      	ldr	r3, [r7, #8]
 8004860:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004866:	1c9a      	adds	r2, r3, #2
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004872:	b29b      	uxth	r3, r3
 8004874:	3b01      	subs	r3, #1
 8004876:	b29a      	uxth	r2, r3
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004884:	b29b      	uxth	r3, r3
 8004886:	2b00      	cmp	r3, #0
 8004888:	d13a      	bne.n	8004900 <UART_RxISR_16BIT+0xd0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	681a      	ldr	r2, [r3, #0]
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004898:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	689a      	ldr	r2, [r3, #8]
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	f022 0201 	bic.w	r2, r2, #1
 80048a8:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	2220      	movs	r2, #32
 80048ae:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	2200      	movs	r2, #0
 80048b4:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80048ba:	2b01      	cmp	r3, #1
 80048bc:	d10f      	bne.n	80048de <UART_RxISR_16BIT+0xae>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	681a      	ldr	r2, [r3, #0]
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f022 0210 	bic.w	r2, r2, #16
 80048cc:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80048d4:	4619      	mov	r1, r3
 80048d6:	6878      	ldr	r0, [r7, #4]
 80048d8:	f7ff fa5a 	bl	8003d90 <HAL_UARTEx_RxEventCallback>
 80048dc:	e002      	b.n	80048e4 <UART_RxISR_16BIT+0xb4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80048de:	6878      	ldr	r0, [r7, #4]
 80048e0:	f7fc fa62 	bl	8000da8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	2200      	movs	r2, #0
 80048e8:	661a      	str	r2, [r3, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80048ea:	e009      	b.n	8004900 <UART_RxISR_16BIT+0xd0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	8b1b      	ldrh	r3, [r3, #24]
 80048f2:	b29a      	uxth	r2, r3
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	f042 0208 	orr.w	r2, r2, #8
 80048fc:	b292      	uxth	r2, r2
 80048fe:	831a      	strh	r2, [r3, #24]
}
 8004900:	bf00      	nop
 8004902:	3710      	adds	r7, #16
 8004904:	46bd      	mov	sp, r7
 8004906:	bd80      	pop	{r7, pc}

08004908 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004908:	b480      	push	{r7}
 800490a:	b083      	sub	sp, #12
 800490c:	af00      	add	r7, sp, #0
 800490e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004910:	bf00      	nop
 8004912:	370c      	adds	r7, #12
 8004914:	46bd      	mov	sp, r7
 8004916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491a:	4770      	bx	lr

0800491c <__libc_init_array>:
 800491c:	b570      	push	{r4, r5, r6, lr}
 800491e:	4d0d      	ldr	r5, [pc, #52]	; (8004954 <__libc_init_array+0x38>)
 8004920:	4c0d      	ldr	r4, [pc, #52]	; (8004958 <__libc_init_array+0x3c>)
 8004922:	1b64      	subs	r4, r4, r5
 8004924:	10a4      	asrs	r4, r4, #2
 8004926:	2600      	movs	r6, #0
 8004928:	42a6      	cmp	r6, r4
 800492a:	d109      	bne.n	8004940 <__libc_init_array+0x24>
 800492c:	4d0b      	ldr	r5, [pc, #44]	; (800495c <__libc_init_array+0x40>)
 800492e:	4c0c      	ldr	r4, [pc, #48]	; (8004960 <__libc_init_array+0x44>)
 8004930:	f000 f820 	bl	8004974 <_init>
 8004934:	1b64      	subs	r4, r4, r5
 8004936:	10a4      	asrs	r4, r4, #2
 8004938:	2600      	movs	r6, #0
 800493a:	42a6      	cmp	r6, r4
 800493c:	d105      	bne.n	800494a <__libc_init_array+0x2e>
 800493e:	bd70      	pop	{r4, r5, r6, pc}
 8004940:	f855 3b04 	ldr.w	r3, [r5], #4
 8004944:	4798      	blx	r3
 8004946:	3601      	adds	r6, #1
 8004948:	e7ee      	b.n	8004928 <__libc_init_array+0xc>
 800494a:	f855 3b04 	ldr.w	r3, [r5], #4
 800494e:	4798      	blx	r3
 8004950:	3601      	adds	r6, #1
 8004952:	e7f2      	b.n	800493a <__libc_init_array+0x1e>
 8004954:	080049dc 	.word	0x080049dc
 8004958:	080049dc 	.word	0x080049dc
 800495c:	080049dc 	.word	0x080049dc
 8004960:	080049e0 	.word	0x080049e0

08004964 <memset>:
 8004964:	4402      	add	r2, r0
 8004966:	4603      	mov	r3, r0
 8004968:	4293      	cmp	r3, r2
 800496a:	d100      	bne.n	800496e <memset+0xa>
 800496c:	4770      	bx	lr
 800496e:	f803 1b01 	strb.w	r1, [r3], #1
 8004972:	e7f9      	b.n	8004968 <memset+0x4>

08004974 <_init>:
 8004974:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004976:	bf00      	nop
 8004978:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800497a:	bc08      	pop	{r3}
 800497c:	469e      	mov	lr, r3
 800497e:	4770      	bx	lr

08004980 <_fini>:
 8004980:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004982:	bf00      	nop
 8004984:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004986:	bc08      	pop	{r3}
 8004988:	469e      	mov	lr, r3
 800498a:	4770      	bx	lr
