
MIDI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000054a0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001f0  08005630  08005630  00015630  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005820  08005820  00020084  2**0
                  CONTENTS
  4 .ARM          00000008  08005820  08005820  00015820  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005828  08005828  00020084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005828  08005828  00015828  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800582c  0800582c  0001582c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  08005830  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000016c  20000084  080058b4  00020084  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001f0  080058b4  000201f0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000dc94  00000000  00000000  000200b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000201b  00000000  00000000  0002dd48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000af8  00000000  00000000  0002fd68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a30  00000000  00000000  00030860  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026752  00000000  00000000  00031290  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ba71  00000000  00000000  000579e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000eb8b3  00000000  00000000  00063453  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0014ed06  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000030d0  00000000  00000000  0014ed5c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000084 	.word	0x20000084
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005618 	.word	0x08005618

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000088 	.word	0x20000088
 80001cc:	08005618 	.word	0x08005618

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__aeabi_d2f>:
 8000a0c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a10:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a14:	bf24      	itt	cs
 8000a16:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a1a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a1e:	d90d      	bls.n	8000a3c <__aeabi_d2f+0x30>
 8000a20:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a24:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a28:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a2c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a30:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a34:	bf08      	it	eq
 8000a36:	f020 0001 	biceq.w	r0, r0, #1
 8000a3a:	4770      	bx	lr
 8000a3c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a40:	d121      	bne.n	8000a86 <__aeabi_d2f+0x7a>
 8000a42:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a46:	bfbc      	itt	lt
 8000a48:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a4c:	4770      	bxlt	lr
 8000a4e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a52:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a56:	f1c2 0218 	rsb	r2, r2, #24
 8000a5a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a5e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a62:	fa20 f002 	lsr.w	r0, r0, r2
 8000a66:	bf18      	it	ne
 8000a68:	f040 0001 	orrne.w	r0, r0, #1
 8000a6c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a70:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a74:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a78:	ea40 000c 	orr.w	r0, r0, ip
 8000a7c:	fa23 f302 	lsr.w	r3, r3, r2
 8000a80:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a84:	e7cc      	b.n	8000a20 <__aeabi_d2f+0x14>
 8000a86:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a8a:	d107      	bne.n	8000a9c <__aeabi_d2f+0x90>
 8000a8c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a90:	bf1e      	ittt	ne
 8000a92:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a96:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a9a:	4770      	bxne	lr
 8000a9c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000aa0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000aa4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000aa8:	4770      	bx	lr
 8000aaa:	bf00      	nop

08000aac <__aeabi_uldivmod>:
 8000aac:	b953      	cbnz	r3, 8000ac4 <__aeabi_uldivmod+0x18>
 8000aae:	b94a      	cbnz	r2, 8000ac4 <__aeabi_uldivmod+0x18>
 8000ab0:	2900      	cmp	r1, #0
 8000ab2:	bf08      	it	eq
 8000ab4:	2800      	cmpeq	r0, #0
 8000ab6:	bf1c      	itt	ne
 8000ab8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000abc:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000ac0:	f000 b96e 	b.w	8000da0 <__aeabi_idiv0>
 8000ac4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ac8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000acc:	f000 f806 	bl	8000adc <__udivmoddi4>
 8000ad0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ad4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ad8:	b004      	add	sp, #16
 8000ada:	4770      	bx	lr

08000adc <__udivmoddi4>:
 8000adc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ae0:	9d08      	ldr	r5, [sp, #32]
 8000ae2:	4604      	mov	r4, r0
 8000ae4:	468c      	mov	ip, r1
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	f040 8083 	bne.w	8000bf2 <__udivmoddi4+0x116>
 8000aec:	428a      	cmp	r2, r1
 8000aee:	4617      	mov	r7, r2
 8000af0:	d947      	bls.n	8000b82 <__udivmoddi4+0xa6>
 8000af2:	fab2 f282 	clz	r2, r2
 8000af6:	b142      	cbz	r2, 8000b0a <__udivmoddi4+0x2e>
 8000af8:	f1c2 0020 	rsb	r0, r2, #32
 8000afc:	fa24 f000 	lsr.w	r0, r4, r0
 8000b00:	4091      	lsls	r1, r2
 8000b02:	4097      	lsls	r7, r2
 8000b04:	ea40 0c01 	orr.w	ip, r0, r1
 8000b08:	4094      	lsls	r4, r2
 8000b0a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000b0e:	0c23      	lsrs	r3, r4, #16
 8000b10:	fbbc f6f8 	udiv	r6, ip, r8
 8000b14:	fa1f fe87 	uxth.w	lr, r7
 8000b18:	fb08 c116 	mls	r1, r8, r6, ip
 8000b1c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b20:	fb06 f10e 	mul.w	r1, r6, lr
 8000b24:	4299      	cmp	r1, r3
 8000b26:	d909      	bls.n	8000b3c <__udivmoddi4+0x60>
 8000b28:	18fb      	adds	r3, r7, r3
 8000b2a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000b2e:	f080 8119 	bcs.w	8000d64 <__udivmoddi4+0x288>
 8000b32:	4299      	cmp	r1, r3
 8000b34:	f240 8116 	bls.w	8000d64 <__udivmoddi4+0x288>
 8000b38:	3e02      	subs	r6, #2
 8000b3a:	443b      	add	r3, r7
 8000b3c:	1a5b      	subs	r3, r3, r1
 8000b3e:	b2a4      	uxth	r4, r4
 8000b40:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b44:	fb08 3310 	mls	r3, r8, r0, r3
 8000b48:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b4c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000b50:	45a6      	cmp	lr, r4
 8000b52:	d909      	bls.n	8000b68 <__udivmoddi4+0x8c>
 8000b54:	193c      	adds	r4, r7, r4
 8000b56:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000b5a:	f080 8105 	bcs.w	8000d68 <__udivmoddi4+0x28c>
 8000b5e:	45a6      	cmp	lr, r4
 8000b60:	f240 8102 	bls.w	8000d68 <__udivmoddi4+0x28c>
 8000b64:	3802      	subs	r0, #2
 8000b66:	443c      	add	r4, r7
 8000b68:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b6c:	eba4 040e 	sub.w	r4, r4, lr
 8000b70:	2600      	movs	r6, #0
 8000b72:	b11d      	cbz	r5, 8000b7c <__udivmoddi4+0xa0>
 8000b74:	40d4      	lsrs	r4, r2
 8000b76:	2300      	movs	r3, #0
 8000b78:	e9c5 4300 	strd	r4, r3, [r5]
 8000b7c:	4631      	mov	r1, r6
 8000b7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b82:	b902      	cbnz	r2, 8000b86 <__udivmoddi4+0xaa>
 8000b84:	deff      	udf	#255	; 0xff
 8000b86:	fab2 f282 	clz	r2, r2
 8000b8a:	2a00      	cmp	r2, #0
 8000b8c:	d150      	bne.n	8000c30 <__udivmoddi4+0x154>
 8000b8e:	1bcb      	subs	r3, r1, r7
 8000b90:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000b94:	fa1f f887 	uxth.w	r8, r7
 8000b98:	2601      	movs	r6, #1
 8000b9a:	fbb3 fcfe 	udiv	ip, r3, lr
 8000b9e:	0c21      	lsrs	r1, r4, #16
 8000ba0:	fb0e 331c 	mls	r3, lr, ip, r3
 8000ba4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ba8:	fb08 f30c 	mul.w	r3, r8, ip
 8000bac:	428b      	cmp	r3, r1
 8000bae:	d907      	bls.n	8000bc0 <__udivmoddi4+0xe4>
 8000bb0:	1879      	adds	r1, r7, r1
 8000bb2:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000bb6:	d202      	bcs.n	8000bbe <__udivmoddi4+0xe2>
 8000bb8:	428b      	cmp	r3, r1
 8000bba:	f200 80e9 	bhi.w	8000d90 <__udivmoddi4+0x2b4>
 8000bbe:	4684      	mov	ip, r0
 8000bc0:	1ac9      	subs	r1, r1, r3
 8000bc2:	b2a3      	uxth	r3, r4
 8000bc4:	fbb1 f0fe 	udiv	r0, r1, lr
 8000bc8:	fb0e 1110 	mls	r1, lr, r0, r1
 8000bcc:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000bd0:	fb08 f800 	mul.w	r8, r8, r0
 8000bd4:	45a0      	cmp	r8, r4
 8000bd6:	d907      	bls.n	8000be8 <__udivmoddi4+0x10c>
 8000bd8:	193c      	adds	r4, r7, r4
 8000bda:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000bde:	d202      	bcs.n	8000be6 <__udivmoddi4+0x10a>
 8000be0:	45a0      	cmp	r8, r4
 8000be2:	f200 80d9 	bhi.w	8000d98 <__udivmoddi4+0x2bc>
 8000be6:	4618      	mov	r0, r3
 8000be8:	eba4 0408 	sub.w	r4, r4, r8
 8000bec:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000bf0:	e7bf      	b.n	8000b72 <__udivmoddi4+0x96>
 8000bf2:	428b      	cmp	r3, r1
 8000bf4:	d909      	bls.n	8000c0a <__udivmoddi4+0x12e>
 8000bf6:	2d00      	cmp	r5, #0
 8000bf8:	f000 80b1 	beq.w	8000d5e <__udivmoddi4+0x282>
 8000bfc:	2600      	movs	r6, #0
 8000bfe:	e9c5 0100 	strd	r0, r1, [r5]
 8000c02:	4630      	mov	r0, r6
 8000c04:	4631      	mov	r1, r6
 8000c06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c0a:	fab3 f683 	clz	r6, r3
 8000c0e:	2e00      	cmp	r6, #0
 8000c10:	d14a      	bne.n	8000ca8 <__udivmoddi4+0x1cc>
 8000c12:	428b      	cmp	r3, r1
 8000c14:	d302      	bcc.n	8000c1c <__udivmoddi4+0x140>
 8000c16:	4282      	cmp	r2, r0
 8000c18:	f200 80b8 	bhi.w	8000d8c <__udivmoddi4+0x2b0>
 8000c1c:	1a84      	subs	r4, r0, r2
 8000c1e:	eb61 0103 	sbc.w	r1, r1, r3
 8000c22:	2001      	movs	r0, #1
 8000c24:	468c      	mov	ip, r1
 8000c26:	2d00      	cmp	r5, #0
 8000c28:	d0a8      	beq.n	8000b7c <__udivmoddi4+0xa0>
 8000c2a:	e9c5 4c00 	strd	r4, ip, [r5]
 8000c2e:	e7a5      	b.n	8000b7c <__udivmoddi4+0xa0>
 8000c30:	f1c2 0320 	rsb	r3, r2, #32
 8000c34:	fa20 f603 	lsr.w	r6, r0, r3
 8000c38:	4097      	lsls	r7, r2
 8000c3a:	fa01 f002 	lsl.w	r0, r1, r2
 8000c3e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c42:	40d9      	lsrs	r1, r3
 8000c44:	4330      	orrs	r0, r6
 8000c46:	0c03      	lsrs	r3, r0, #16
 8000c48:	fbb1 f6fe 	udiv	r6, r1, lr
 8000c4c:	fa1f f887 	uxth.w	r8, r7
 8000c50:	fb0e 1116 	mls	r1, lr, r6, r1
 8000c54:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c58:	fb06 f108 	mul.w	r1, r6, r8
 8000c5c:	4299      	cmp	r1, r3
 8000c5e:	fa04 f402 	lsl.w	r4, r4, r2
 8000c62:	d909      	bls.n	8000c78 <__udivmoddi4+0x19c>
 8000c64:	18fb      	adds	r3, r7, r3
 8000c66:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000c6a:	f080 808d 	bcs.w	8000d88 <__udivmoddi4+0x2ac>
 8000c6e:	4299      	cmp	r1, r3
 8000c70:	f240 808a 	bls.w	8000d88 <__udivmoddi4+0x2ac>
 8000c74:	3e02      	subs	r6, #2
 8000c76:	443b      	add	r3, r7
 8000c78:	1a5b      	subs	r3, r3, r1
 8000c7a:	b281      	uxth	r1, r0
 8000c7c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c80:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c84:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c88:	fb00 f308 	mul.w	r3, r0, r8
 8000c8c:	428b      	cmp	r3, r1
 8000c8e:	d907      	bls.n	8000ca0 <__udivmoddi4+0x1c4>
 8000c90:	1879      	adds	r1, r7, r1
 8000c92:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000c96:	d273      	bcs.n	8000d80 <__udivmoddi4+0x2a4>
 8000c98:	428b      	cmp	r3, r1
 8000c9a:	d971      	bls.n	8000d80 <__udivmoddi4+0x2a4>
 8000c9c:	3802      	subs	r0, #2
 8000c9e:	4439      	add	r1, r7
 8000ca0:	1acb      	subs	r3, r1, r3
 8000ca2:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000ca6:	e778      	b.n	8000b9a <__udivmoddi4+0xbe>
 8000ca8:	f1c6 0c20 	rsb	ip, r6, #32
 8000cac:	fa03 f406 	lsl.w	r4, r3, r6
 8000cb0:	fa22 f30c 	lsr.w	r3, r2, ip
 8000cb4:	431c      	orrs	r4, r3
 8000cb6:	fa20 f70c 	lsr.w	r7, r0, ip
 8000cba:	fa01 f306 	lsl.w	r3, r1, r6
 8000cbe:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000cc2:	fa21 f10c 	lsr.w	r1, r1, ip
 8000cc6:	431f      	orrs	r7, r3
 8000cc8:	0c3b      	lsrs	r3, r7, #16
 8000cca:	fbb1 f9fe 	udiv	r9, r1, lr
 8000cce:	fa1f f884 	uxth.w	r8, r4
 8000cd2:	fb0e 1119 	mls	r1, lr, r9, r1
 8000cd6:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000cda:	fb09 fa08 	mul.w	sl, r9, r8
 8000cde:	458a      	cmp	sl, r1
 8000ce0:	fa02 f206 	lsl.w	r2, r2, r6
 8000ce4:	fa00 f306 	lsl.w	r3, r0, r6
 8000ce8:	d908      	bls.n	8000cfc <__udivmoddi4+0x220>
 8000cea:	1861      	adds	r1, r4, r1
 8000cec:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000cf0:	d248      	bcs.n	8000d84 <__udivmoddi4+0x2a8>
 8000cf2:	458a      	cmp	sl, r1
 8000cf4:	d946      	bls.n	8000d84 <__udivmoddi4+0x2a8>
 8000cf6:	f1a9 0902 	sub.w	r9, r9, #2
 8000cfa:	4421      	add	r1, r4
 8000cfc:	eba1 010a 	sub.w	r1, r1, sl
 8000d00:	b2bf      	uxth	r7, r7
 8000d02:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d06:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d0a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000d0e:	fb00 f808 	mul.w	r8, r0, r8
 8000d12:	45b8      	cmp	r8, r7
 8000d14:	d907      	bls.n	8000d26 <__udivmoddi4+0x24a>
 8000d16:	19e7      	adds	r7, r4, r7
 8000d18:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000d1c:	d22e      	bcs.n	8000d7c <__udivmoddi4+0x2a0>
 8000d1e:	45b8      	cmp	r8, r7
 8000d20:	d92c      	bls.n	8000d7c <__udivmoddi4+0x2a0>
 8000d22:	3802      	subs	r0, #2
 8000d24:	4427      	add	r7, r4
 8000d26:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000d2a:	eba7 0708 	sub.w	r7, r7, r8
 8000d2e:	fba0 8902 	umull	r8, r9, r0, r2
 8000d32:	454f      	cmp	r7, r9
 8000d34:	46c6      	mov	lr, r8
 8000d36:	4649      	mov	r1, r9
 8000d38:	d31a      	bcc.n	8000d70 <__udivmoddi4+0x294>
 8000d3a:	d017      	beq.n	8000d6c <__udivmoddi4+0x290>
 8000d3c:	b15d      	cbz	r5, 8000d56 <__udivmoddi4+0x27a>
 8000d3e:	ebb3 020e 	subs.w	r2, r3, lr
 8000d42:	eb67 0701 	sbc.w	r7, r7, r1
 8000d46:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000d4a:	40f2      	lsrs	r2, r6
 8000d4c:	ea4c 0202 	orr.w	r2, ip, r2
 8000d50:	40f7      	lsrs	r7, r6
 8000d52:	e9c5 2700 	strd	r2, r7, [r5]
 8000d56:	2600      	movs	r6, #0
 8000d58:	4631      	mov	r1, r6
 8000d5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d5e:	462e      	mov	r6, r5
 8000d60:	4628      	mov	r0, r5
 8000d62:	e70b      	b.n	8000b7c <__udivmoddi4+0xa0>
 8000d64:	4606      	mov	r6, r0
 8000d66:	e6e9      	b.n	8000b3c <__udivmoddi4+0x60>
 8000d68:	4618      	mov	r0, r3
 8000d6a:	e6fd      	b.n	8000b68 <__udivmoddi4+0x8c>
 8000d6c:	4543      	cmp	r3, r8
 8000d6e:	d2e5      	bcs.n	8000d3c <__udivmoddi4+0x260>
 8000d70:	ebb8 0e02 	subs.w	lr, r8, r2
 8000d74:	eb69 0104 	sbc.w	r1, r9, r4
 8000d78:	3801      	subs	r0, #1
 8000d7a:	e7df      	b.n	8000d3c <__udivmoddi4+0x260>
 8000d7c:	4608      	mov	r0, r1
 8000d7e:	e7d2      	b.n	8000d26 <__udivmoddi4+0x24a>
 8000d80:	4660      	mov	r0, ip
 8000d82:	e78d      	b.n	8000ca0 <__udivmoddi4+0x1c4>
 8000d84:	4681      	mov	r9, r0
 8000d86:	e7b9      	b.n	8000cfc <__udivmoddi4+0x220>
 8000d88:	4666      	mov	r6, ip
 8000d8a:	e775      	b.n	8000c78 <__udivmoddi4+0x19c>
 8000d8c:	4630      	mov	r0, r6
 8000d8e:	e74a      	b.n	8000c26 <__udivmoddi4+0x14a>
 8000d90:	f1ac 0c02 	sub.w	ip, ip, #2
 8000d94:	4439      	add	r1, r7
 8000d96:	e713      	b.n	8000bc0 <__udivmoddi4+0xe4>
 8000d98:	3802      	subs	r0, #2
 8000d9a:	443c      	add	r4, r7
 8000d9c:	e724      	b.n	8000be8 <__udivmoddi4+0x10c>
 8000d9e:	bf00      	nop

08000da0 <__aeabi_idiv0>:
 8000da0:	4770      	bx	lr
 8000da2:	bf00      	nop

08000da4 <circ_bbuf_push>:
static void MX_USART1_UART_Init(void);
static void MX_DAC1_Init(void);
static void MX_USART2_UART_Init(void);
/* USER CODE BEGIN PFP */
/* Private function prototypes -----------------------------------------------*/
int circ_bbuf_push(circ_bbuf_t *c, uint8_t data) {
 8000da4:	b480      	push	{r7}
 8000da6:	b085      	sub	sp, #20
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
 8000dac:	460b      	mov	r3, r1
 8000dae:	70fb      	strb	r3, [r7, #3]
	int next;

	next = c->head + 1;  // next is where head will point to after this write.
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	685b      	ldr	r3, [r3, #4]
 8000db4:	3301      	adds	r3, #1
 8000db6:	60fb      	str	r3, [r7, #12]
	if (next >= c->maxlen)
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	68db      	ldr	r3, [r3, #12]
 8000dbc:	68fa      	ldr	r2, [r7, #12]
 8000dbe:	429a      	cmp	r2, r3
 8000dc0:	db01      	blt.n	8000dc6 <circ_bbuf_push+0x22>
		next = 0;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	60fb      	str	r3, [r7, #12]

	if (next == c->tail)  // if the head + 1 == tail, circular buffer is full
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	689b      	ldr	r3, [r3, #8]
 8000dca:	68fa      	ldr	r2, [r7, #12]
 8000dcc:	429a      	cmp	r2, r3
 8000dce:	d102      	bne.n	8000dd6 <circ_bbuf_push+0x32>
		return -1;
 8000dd0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000dd4:	e00a      	b.n	8000dec <circ_bbuf_push+0x48>

	c->buffer[c->head] = data;  // Load data and then move
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	687a      	ldr	r2, [r7, #4]
 8000ddc:	6852      	ldr	r2, [r2, #4]
 8000dde:	4413      	add	r3, r2
 8000de0:	78fa      	ldrb	r2, [r7, #3]
 8000de2:	701a      	strb	r2, [r3, #0]
	c->head = next;             // head to next data offset.
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	68fa      	ldr	r2, [r7, #12]
 8000de8:	605a      	str	r2, [r3, #4]
	return 0;  // return success to indicate successful push.
 8000dea:	2300      	movs	r3, #0
}
 8000dec:	4618      	mov	r0, r3
 8000dee:	3714      	adds	r7, #20
 8000df0:	46bd      	mov	sp, r7
 8000df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df6:	4770      	bx	lr

08000df8 <circ_bbuf_pop>:

int circ_bbuf_pop(circ_bbuf_t *c, uint8_t *data) {
 8000df8:	b480      	push	{r7}
 8000dfa:	b085      	sub	sp, #20
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
 8000e00:	6039      	str	r1, [r7, #0]
	int next;

	if (c->head == c->tail)  // if the head == tail, we don't have any data
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	685a      	ldr	r2, [r3, #4]
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	689b      	ldr	r3, [r3, #8]
 8000e0a:	429a      	cmp	r2, r3
 8000e0c:	d102      	bne.n	8000e14 <circ_bbuf_pop+0x1c>
		return -1;
 8000e0e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000e12:	e016      	b.n	8000e42 <circ_bbuf_pop+0x4a>

	next = c->tail + 1;  // next is where tail will point to after this read.
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	689b      	ldr	r3, [r3, #8]
 8000e18:	3301      	adds	r3, #1
 8000e1a:	60fb      	str	r3, [r7, #12]
	if (next >= c->maxlen)
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	68db      	ldr	r3, [r3, #12]
 8000e20:	68fa      	ldr	r2, [r7, #12]
 8000e22:	429a      	cmp	r2, r3
 8000e24:	db01      	blt.n	8000e2a <circ_bbuf_pop+0x32>
		next = 0;
 8000e26:	2300      	movs	r3, #0
 8000e28:	60fb      	str	r3, [r7, #12]

	*data = c->buffer[c->tail];  // Read data and then move
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	687a      	ldr	r2, [r7, #4]
 8000e30:	6892      	ldr	r2, [r2, #8]
 8000e32:	4413      	add	r3, r2
 8000e34:	781a      	ldrb	r2, [r3, #0]
 8000e36:	683b      	ldr	r3, [r7, #0]
 8000e38:	701a      	strb	r2, [r3, #0]
	c->tail = next;              // tail to next offset.
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	68fa      	ldr	r2, [r7, #12]
 8000e3e:	609a      	str	r2, [r3, #8]
	return 0;  // return success to indicate successful push.
 8000e40:	2300      	movs	r3, #0
}
 8000e42:	4618      	mov	r0, r3
 8000e44:	3714      	adds	r7, #20
 8000e46:	46bd      	mov	sp, r7
 8000e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4c:	4770      	bx	lr
	...

08000e50 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b082      	sub	sp, #8
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
	circ_bbuf_push(&data_buffer, received);
 8000e58:	4b0d      	ldr	r3, [pc, #52]	; (8000e90 <HAL_UART_RxCpltCallback+0x40>)
 8000e5a:	781b      	ldrb	r3, [r3, #0]
 8000e5c:	4619      	mov	r1, r3
 8000e5e:	480d      	ldr	r0, [pc, #52]	; (8000e94 <HAL_UART_RxCpltCallback+0x44>)
 8000e60:	f7ff ffa0 	bl	8000da4 <circ_bbuf_push>
	HAL_UART_Receive_IT(&huart2, &received, 1); // Start listening again for UART messages over USB
 8000e64:	2201      	movs	r2, #1
 8000e66:	490a      	ldr	r1, [pc, #40]	; (8000e90 <HAL_UART_RxCpltCallback+0x40>)
 8000e68:	480b      	ldr	r0, [pc, #44]	; (8000e98 <HAL_UART_RxCpltCallback+0x48>)
 8000e6a:	f002 ff55 	bl	8003d18 <HAL_UART_Receive_IT>
	HAL_UART_Receive_IT(&huart1, &received, 1); // Start listening again for UART messages over PIN D2/PA10
 8000e6e:	2201      	movs	r2, #1
 8000e70:	4907      	ldr	r1, [pc, #28]	; (8000e90 <HAL_UART_RxCpltCallback+0x40>)
 8000e72:	480a      	ldr	r0, [pc, #40]	; (8000e9c <HAL_UART_RxCpltCallback+0x4c>)
 8000e74:	f002 ff50 	bl	8003d18 <HAL_UART_Receive_IT>
	/*
	uint8_t data_received[20] = "data received\r\n";
	uint16_t data_received_size = 20;
	*/
	HAL_UART_Transmit(&huart2, "rec\n", 10, 1000);
 8000e78:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e7c:	220a      	movs	r2, #10
 8000e7e:	4908      	ldr	r1, [pc, #32]	; (8000ea0 <HAL_UART_RxCpltCallback+0x50>)
 8000e80:	4805      	ldr	r0, [pc, #20]	; (8000e98 <HAL_UART_RxCpltCallback+0x48>)
 8000e82:	f002 feb5 	bl	8003bf0 <HAL_UART_Transmit>
}
 8000e86:	bf00      	nop
 8000e88:	3708      	adds	r7, #8
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	bd80      	pop	{r7, pc}
 8000e8e:	bf00      	nop
 8000e90:	200000a0 	.word	0x200000a0
 8000e94:	20000004 	.word	0x20000004
 8000e98:	20000158 	.word	0x20000158
 8000e9c:	200000c4 	.word	0x200000c4
 8000ea0:	08005630 	.word	0x08005630

08000ea4 <print_uart>:

void print_uart(char message[], uint16_t byte) {
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b092      	sub	sp, #72	; 0x48
 8000ea8:	af02      	add	r7, sp, #8
 8000eaa:	6078      	str	r0, [r7, #4]
 8000eac:	460b      	mov	r3, r1
 8000eae:	807b      	strh	r3, [r7, #2]
    uint8_t message_to_print[50];
    uint16_t message_to_print_size = 0;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	87fb      	strh	r3, [r7, #62]	; 0x3e

    message_to_print_size = sprintf(message_to_print, message, byte, byte, byte);
 8000eb4:	887a      	ldrh	r2, [r7, #2]
 8000eb6:	8879      	ldrh	r1, [r7, #2]
 8000eb8:	887b      	ldrh	r3, [r7, #2]
 8000eba:	f107 000c 	add.w	r0, r7, #12
 8000ebe:	9300      	str	r3, [sp, #0]
 8000ec0:	460b      	mov	r3, r1
 8000ec2:	6879      	ldr	r1, [r7, #4]
 8000ec4:	f003 ff7a 	bl	8004dbc <siprintf>
 8000ec8:	4603      	mov	r3, r0
 8000eca:	87fb      	strh	r3, [r7, #62]	; 0x3e
    HAL_UART_Transmit(&huart2, message_to_print, message_to_print_size, 1000); // Send data over UART
 8000ecc:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8000ece:	f107 010c 	add.w	r1, r7, #12
 8000ed2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ed6:	4803      	ldr	r0, [pc, #12]	; (8000ee4 <print_uart+0x40>)
 8000ed8:	f002 fe8a 	bl	8003bf0 <HAL_UART_Transmit>
}
 8000edc:	bf00      	nop
 8000ede:	3740      	adds	r7, #64	; 0x40
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	bd80      	pop	{r7, pc}
 8000ee4:	20000158 	.word	0x20000158

08000ee8 <debug_led_set>:


void debug_led_set() {
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_SET);
 8000eec:	2201      	movs	r2, #1
 8000eee:	2104      	movs	r1, #4
 8000ef0:	4802      	ldr	r0, [pc, #8]	; (8000efc <debug_led_set+0x14>)
 8000ef2:	f001 fb0b 	bl	800250c <HAL_GPIO_WritePin>
}
 8000ef6:	bf00      	nop
 8000ef8:	bd80      	pop	{r7, pc}
 8000efa:	bf00      	nop
 8000efc:	48000800 	.word	0x48000800

08000f00 <debug_led_unset>:

void debug_led_unset() {
 8000f00:	b580      	push	{r7, lr}
 8000f02:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
 8000f04:	2200      	movs	r2, #0
 8000f06:	2104      	movs	r1, #4
 8000f08:	4802      	ldr	r0, [pc, #8]	; (8000f14 <debug_led_unset+0x14>)
 8000f0a:	f001 faff 	bl	800250c <HAL_GPIO_WritePin>
}
 8000f0e:	bf00      	nop
 8000f10:	bd80      	pop	{r7, pc}
 8000f12:	bf00      	nop
 8000f14:	48000800 	.word	0x48000800

08000f18 <calculate_pitch>:
		HAL_Delay(100);
	}
	debug_led_unset();
}

uint16_t calculate_pitch() {
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b082      	sub	sp, #8
 8000f1c:	af00      	add	r7, sp, #0
	float pitch_bend_percent = 0;
 8000f1e:	f04f 0300 	mov.w	r3, #0
 8000f22:	603b      	str	r3, [r7, #0]
	uint16_t result_pitch = DAC_OUT[current_MIDI_note - MIDI_note_number_offset];
 8000f24:	4b3e      	ldr	r3, [pc, #248]	; (8001020 <calculate_pitch+0x108>)
 8000f26:	781b      	ldrb	r3, [r3, #0]
 8000f28:	461a      	mov	r2, r3
 8000f2a:	2330      	movs	r3, #48	; 0x30
 8000f2c:	1ad3      	subs	r3, r2, r3
 8000f2e:	4a3d      	ldr	r2, [pc, #244]	; (8001024 <calculate_pitch+0x10c>)
 8000f30:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000f34:	80fb      	strh	r3, [r7, #6]

	// Check if pitch bend in default state
	if (current_pitch_bend == default_pitch_bend_value)
 8000f36:	4b3c      	ldr	r3, [pc, #240]	; (8001028 <calculate_pitch+0x110>)
 8000f38:	881b      	ldrh	r3, [r3, #0]
 8000f3a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000f3e:	4293      	cmp	r3, r2
 8000f40:	d101      	bne.n	8000f46 <calculate_pitch+0x2e>
		return result_pitch;
 8000f42:	88fb      	ldrh	r3, [r7, #6]
 8000f44:	e067      	b.n	8001016 <calculate_pitch+0xfe>

	// Pitch bend up to +0.2V
	if (current_pitch_bend > default_pitch_bend_value) {
 8000f46:	4b38      	ldr	r3, [pc, #224]	; (8001028 <calculate_pitch+0x110>)
 8000f48:	881b      	ldrh	r3, [r3, #0]
 8000f4a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000f4e:	4293      	cmp	r3, r2
 8000f50:	d92c      	bls.n	8000fac <calculate_pitch+0x94>
		//debug_message();
		pitch_bend_percent = (current_pitch_bend - (default_pitch_bend_value - 1)) / 8192.0;
 8000f52:	4b35      	ldr	r3, [pc, #212]	; (8001028 <calculate_pitch+0x110>)
 8000f54:	881b      	ldrh	r3, [r3, #0]
 8000f56:	461a      	mov	r2, r3
 8000f58:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f5c:	3b01      	subs	r3, #1
 8000f5e:	1ad3      	subs	r3, r2, r3
 8000f60:	4618      	mov	r0, r3
 8000f62:	f7ff fad7 	bl	8000514 <__aeabi_i2d>
 8000f66:	f04f 0200 	mov.w	r2, #0
 8000f6a:	4b30      	ldr	r3, [pc, #192]	; (800102c <calculate_pitch+0x114>)
 8000f6c:	f7ff fc66 	bl	800083c <__aeabi_ddiv>
 8000f70:	4602      	mov	r2, r0
 8000f72:	460b      	mov	r3, r1
 8000f74:	4610      	mov	r0, r2
 8000f76:	4619      	mov	r1, r3
 8000f78:	f7ff fd48 	bl	8000a0c <__aeabi_d2f>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	603b      	str	r3, [r7, #0]
		result_pitch += (uint16_t) DAC_OUT[1] * pitch_bend_percent;
 8000f80:	88fb      	ldrh	r3, [r7, #6]
 8000f82:	ee07 3a90 	vmov	s15, r3
 8000f86:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000f8a:	23f8      	movs	r3, #248	; 0xf8
 8000f8c:	ee07 3a90 	vmov	s15, r3
 8000f90:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000f94:	edd7 7a00 	vldr	s15, [r7]
 8000f98:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000f9c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000fa0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000fa4:	ee17 3a90 	vmov	r3, s15
 8000fa8:	80fb      	strh	r3, [r7, #6]
 8000faa:	e033      	b.n	8001014 <calculate_pitch+0xfc>

		// Pitch bend down to -0.2V
	} else if (current_pitch_bend < default_pitch_bend_value) {
 8000fac:	4b1e      	ldr	r3, [pc, #120]	; (8001028 <calculate_pitch+0x110>)
 8000fae:	881b      	ldrh	r3, [r3, #0]
 8000fb0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000fb4:	4293      	cmp	r3, r2
 8000fb6:	d22d      	bcs.n	8001014 <calculate_pitch+0xfc>
		// debug_message();
		pitch_bend_percent = abs(current_pitch_bend - default_pitch_bend_value) / 8192.0;
 8000fb8:	4b1b      	ldr	r3, [pc, #108]	; (8001028 <calculate_pitch+0x110>)
 8000fba:	881b      	ldrh	r3, [r3, #0]
 8000fbc:	461a      	mov	r2, r3
 8000fbe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000fc2:	1ad3      	subs	r3, r2, r3
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	bfb8      	it	lt
 8000fc8:	425b      	neglt	r3, r3
 8000fca:	4618      	mov	r0, r3
 8000fcc:	f7ff faa2 	bl	8000514 <__aeabi_i2d>
 8000fd0:	f04f 0200 	mov.w	r2, #0
 8000fd4:	4b15      	ldr	r3, [pc, #84]	; (800102c <calculate_pitch+0x114>)
 8000fd6:	f7ff fc31 	bl	800083c <__aeabi_ddiv>
 8000fda:	4602      	mov	r2, r0
 8000fdc:	460b      	mov	r3, r1
 8000fde:	4610      	mov	r0, r2
 8000fe0:	4619      	mov	r1, r3
 8000fe2:	f7ff fd13 	bl	8000a0c <__aeabi_d2f>
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	603b      	str	r3, [r7, #0]
		result_pitch -= (uint16_t) DAC_OUT[1] * pitch_bend_percent;
 8000fea:	88fb      	ldrh	r3, [r7, #6]
 8000fec:	ee07 3a90 	vmov	s15, r3
 8000ff0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000ff4:	23f8      	movs	r3, #248	; 0xf8
 8000ff6:	ee07 3a90 	vmov	s15, r3
 8000ffa:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000ffe:	edd7 7a00 	vldr	s15, [r7]
 8001002:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001006:	ee77 7a67 	vsub.f32	s15, s14, s15
 800100a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800100e:	ee17 3a90 	vmov	r3, s15
 8001012:	80fb      	strh	r3, [r7, #6]
	}

	return result_pitch;
 8001014:	88fb      	ldrh	r3, [r7, #6]
}
 8001016:	4618      	mov	r0, r3
 8001018:	3708      	adds	r7, #8
 800101a:	46bd      	mov	sp, r7
 800101c:	bd80      	pop	{r7, pc}
 800101e:	bf00      	nop
 8001020:	200000a1 	.word	0x200000a1
 8001024:	08005760 	.word	0x08005760
 8001028:	20000000 	.word	0x20000000
 800102c:	40c00000 	.word	0x40c00000

08001030 <calculate_modulation>:

uint16_t calculate_modulation(uint8_t modulation_value) {
 8001030:	b580      	push	{r7, lr}
 8001032:	b084      	sub	sp, #16
 8001034:	af00      	add	r7, sp, #0
 8001036:	4603      	mov	r3, r0
 8001038:	71fb      	strb	r3, [r7, #7]
	float modulation_percent = modulation_value / 127.0;
 800103a:	79fb      	ldrb	r3, [r7, #7]
 800103c:	4618      	mov	r0, r3
 800103e:	f7ff fa69 	bl	8000514 <__aeabi_i2d>
 8001042:	a312      	add	r3, pc, #72	; (adr r3, 800108c <calculate_modulation+0x5c>)
 8001044:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001048:	f7ff fbf8 	bl	800083c <__aeabi_ddiv>
 800104c:	4602      	mov	r2, r0
 800104e:	460b      	mov	r3, r1
 8001050:	4610      	mov	r0, r2
 8001052:	4619      	mov	r1, r3
 8001054:	f7ff fcda 	bl	8000a0c <__aeabi_d2f>
 8001058:	4603      	mov	r3, r0
 800105a:	60fb      	str	r3, [r7, #12]
	return (uint16_t) DAC_OUT[number_of_notes - 1] * modulation_percent;
 800105c:	2321      	movs	r3, #33	; 0x21
 800105e:	3b01      	subs	r3, #1
 8001060:	4a09      	ldr	r2, [pc, #36]	; (8001088 <calculate_modulation+0x58>)
 8001062:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001066:	ee07 3a90 	vmov	s15, r3
 800106a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800106e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001072:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001076:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800107a:	ee17 3a90 	vmov	r3, s15
 800107e:	b29b      	uxth	r3, r3
}
 8001080:	4618      	mov	r0, r3
 8001082:	3710      	adds	r7, #16
 8001084:	46bd      	mov	sp, r7
 8001086:	bd80      	pop	{r7, pc}
 8001088:	08005760 	.word	0x08005760
 800108c:	00000000 	.word	0x00000000
 8001090:	405fc000 	.word	0x405fc000

08001094 <set_gate>:

void set_gate() {
 8001094:	b580      	push	{r7, lr}
 8001096:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8001098:	2201      	movs	r2, #1
 800109a:	2140      	movs	r1, #64	; 0x40
 800109c:	4802      	ldr	r0, [pc, #8]	; (80010a8 <set_gate+0x14>)
 800109e:	f001 fa35 	bl	800250c <HAL_GPIO_WritePin>
}
 80010a2:	bf00      	nop
 80010a4:	bd80      	pop	{r7, pc}
 80010a6:	bf00      	nop
 80010a8:	48000400 	.word	0x48000400

080010ac <unset_gate>:

void unset_gate() {
 80010ac:	b580      	push	{r7, lr}
 80010ae:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 80010b0:	2200      	movs	r2, #0
 80010b2:	2140      	movs	r1, #64	; 0x40
 80010b4:	4802      	ldr	r0, [pc, #8]	; (80010c0 <unset_gate+0x14>)
 80010b6:	f001 fa29 	bl	800250c <HAL_GPIO_WritePin>
}
 80010ba:	bf00      	nop
 80010bc:	bd80      	pop	{r7, pc}
 80010be:	bf00      	nop
 80010c0:	48000400 	.word	0x48000400

080010c4 <set_pitch>:

void set_pitch(uint16_t value) {
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b082      	sub	sp, #8
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	4603      	mov	r3, r0
 80010cc:	80fb      	strh	r3, [r7, #6]
	print_uart("  PITCH: 0x%x => %u \r\n", value);
 80010ce:	88fb      	ldrh	r3, [r7, #6]
 80010d0:	4619      	mov	r1, r3
 80010d2:	4805      	ldr	r0, [pc, #20]	; (80010e8 <set_pitch+0x24>)
 80010d4:	f7ff fee6 	bl	8000ea4 <print_uart>
	DAC1->DHR12R1 = value;
 80010d8:	4a04      	ldr	r2, [pc, #16]	; (80010ec <set_pitch+0x28>)
 80010da:	88fb      	ldrh	r3, [r7, #6]
 80010dc:	6093      	str	r3, [r2, #8]
}
 80010de:	bf00      	nop
 80010e0:	3708      	adds	r7, #8
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bd80      	pop	{r7, pc}
 80010e6:	bf00      	nop
 80010e8:	08005638 	.word	0x08005638
 80010ec:	40007400 	.word	0x40007400

080010f0 <set_modulation>:

void set_modulation(uint16_t value) {
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b082      	sub	sp, #8
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	4603      	mov	r3, r0
 80010f8:	80fb      	strh	r3, [r7, #6]
	print_uart("  MODULATION: 0x%x => %u \r\n", value);
 80010fa:	88fb      	ldrh	r3, [r7, #6]
 80010fc:	4619      	mov	r1, r3
 80010fe:	4805      	ldr	r0, [pc, #20]	; (8001114 <set_modulation+0x24>)
 8001100:	f7ff fed0 	bl	8000ea4 <print_uart>
	DAC1->DHR12R2 = value;
 8001104:	4a04      	ldr	r2, [pc, #16]	; (8001118 <set_modulation+0x28>)
 8001106:	88fb      	ldrh	r3, [r7, #6]
 8001108:	6153      	str	r3, [r2, #20]
}
 800110a:	bf00      	nop
 800110c:	3708      	adds	r7, #8
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}
 8001112:	bf00      	nop
 8001114:	08005650 	.word	0x08005650
 8001118:	40007400 	.word	0x40007400

0800111c <parse_MIDI_message>:

void parse_MIDI_message() {
 800111c:	b580      	push	{r7, lr}
 800111e:	b082      	sub	sp, #8
 8001120:	af00      	add	r7, sp, #0
	uint8_t MIDI_byte = 0, MIDI_note = 0, note_index = 0;
 8001122:	2300      	movs	r3, #0
 8001124:	713b      	strb	r3, [r7, #4]
 8001126:	2300      	movs	r3, #0
 8001128:	71fb      	strb	r3, [r7, #7]
 800112a:	2300      	movs	r3, #0
 800112c:	71bb      	strb	r3, [r7, #6]

	// pop 1st MIDI byte (MIDI Status)
	if (circ_bbuf_pop(&data_buffer, &MIDI_byte) == -1) {
 800112e:	1d3b      	adds	r3, r7, #4
 8001130:	4619      	mov	r1, r3
 8001132:	4875      	ldr	r0, [pc, #468]	; (8001308 <parse_MIDI_message+0x1ec>)
 8001134:	f7ff fe60 	bl	8000df8 <circ_bbuf_pop>
 8001138:	4603      	mov	r3, r0
 800113a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800113e:	f000 80dd 	beq.w	80012fc <parse_MIDI_message+0x1e0>
		return; // return if buffet is empty
	}

	// NOTE ON
	if (MIDI_byte >> 4 == 0b1001) {
 8001142:	793b      	ldrb	r3, [r7, #4]
 8001144:	091b      	lsrs	r3, r3, #4
 8001146:	b2db      	uxtb	r3, r3
 8001148:	2b09      	cmp	r3, #9
 800114a:	d141      	bne.n	80011d0 <parse_MIDI_message+0xb4>
		debug_led_set(); // LED ON
 800114c:	f7ff fecc 	bl	8000ee8 <debug_led_set>

		circ_bbuf_pop(&data_buffer, &MIDI_byte); // pop 2nd MIDI byte (MIDI note)
 8001150:	1d3b      	adds	r3, r7, #4
 8001152:	4619      	mov	r1, r3
 8001154:	486c      	ldr	r0, [pc, #432]	; (8001308 <parse_MIDI_message+0x1ec>)
 8001156:	f7ff fe4f 	bl	8000df8 <circ_bbuf_pop>
		print_uart("  Note on: 0x%x => %u \r\n", MIDI_byte);
 800115a:	793b      	ldrb	r3, [r7, #4]
 800115c:	b29b      	uxth	r3, r3
 800115e:	4619      	mov	r1, r3
 8001160:	486a      	ldr	r0, [pc, #424]	; (800130c <parse_MIDI_message+0x1f0>)
 8001162:	f7ff fe9f 	bl	8000ea4 <print_uart>

		note_index = MIDI_byte - MIDI_note_number_offset; // MIDI_byte - 48
 8001166:	793b      	ldrb	r3, [r7, #4]
 8001168:	2230      	movs	r2, #48	; 0x30
 800116a:	1a9b      	subs	r3, r3, r2
 800116c:	71bb      	strb	r3, [r7, #6]
		MIDI_note = MIDI_byte;
 800116e:	793b      	ldrb	r3, [r7, #4]
 8001170:	71fb      	strb	r3, [r7, #7]

		circ_bbuf_pop(&data_buffer, &MIDI_byte); // pop 3rd MIDI byte (MIDI Velocity)
 8001172:	1d3b      	adds	r3, r7, #4
 8001174:	4619      	mov	r1, r3
 8001176:	4864      	ldr	r0, [pc, #400]	; (8001308 <parse_MIDI_message+0x1ec>)
 8001178:	f7ff fe3e 	bl	8000df8 <circ_bbuf_pop>
		print_uart("  Velocity: 0x%x => %u \r\n", MIDI_byte);
 800117c:	793b      	ldrb	r3, [r7, #4]
 800117e:	b29b      	uxth	r3, r3
 8001180:	4619      	mov	r1, r3
 8001182:	4863      	ldr	r0, [pc, #396]	; (8001310 <parse_MIDI_message+0x1f4>)
 8001184:	f7ff fe8e 	bl	8000ea4 <print_uart>

		// NOTE ON + Velocity = 0 --> NOTE OFF
		if (MIDI_byte == 0 && current_MIDI_note == MIDI_note) {
 8001188:	793b      	ldrb	r3, [r7, #4]
 800118a:	2b00      	cmp	r3, #0
 800118c:	d10a      	bne.n	80011a4 <parse_MIDI_message+0x88>
 800118e:	4b61      	ldr	r3, [pc, #388]	; (8001314 <parse_MIDI_message+0x1f8>)
 8001190:	781b      	ldrb	r3, [r3, #0]
 8001192:	79fa      	ldrb	r2, [r7, #7]
 8001194:	429a      	cmp	r2, r3
 8001196:	d105      	bne.n	80011a4 <parse_MIDI_message+0x88>
			set_pitch(0); // set PITCH to 0
 8001198:	2000      	movs	r0, #0
 800119a:	f7ff ff93 	bl	80010c4 <set_pitch>
			unset_gate(); // unset GATE
 800119e:	f7ff ff85 	bl	80010ac <unset_gate>
 80011a2:	e0ae      	b.n	8001302 <parse_MIDI_message+0x1e6>
		} else if (note_index <= number_of_notes && MIDI_note >= MIDI_note_number_offset) {
 80011a4:	2221      	movs	r2, #33	; 0x21
 80011a6:	79bb      	ldrb	r3, [r7, #6]
 80011a8:	4293      	cmp	r3, r2
 80011aa:	f200 80aa 	bhi.w	8001302 <parse_MIDI_message+0x1e6>
 80011ae:	2230      	movs	r2, #48	; 0x30
 80011b0:	79fb      	ldrb	r3, [r7, #7]
 80011b2:	4293      	cmp	r3, r2
 80011b4:	f0c0 80a5 	bcc.w	8001302 <parse_MIDI_message+0x1e6>
			current_MIDI_note = MIDI_note; // set note to global variable
 80011b8:	4a56      	ldr	r2, [pc, #344]	; (8001314 <parse_MIDI_message+0x1f8>)
 80011ba:	79fb      	ldrb	r3, [r7, #7]
 80011bc:	7013      	strb	r3, [r2, #0]
			set_pitch(calculate_pitch()); // set pitch to calculated value
 80011be:	f7ff feab 	bl	8000f18 <calculate_pitch>
 80011c2:	4603      	mov	r3, r0
 80011c4:	4618      	mov	r0, r3
 80011c6:	f7ff ff7d 	bl	80010c4 <set_pitch>
			set_gate(); // set GATE
 80011ca:	f7ff ff63 	bl	8001094 <set_gate>
 80011ce:	e098      	b.n	8001302 <parse_MIDI_message+0x1e6>
		}
		// NOTE OFF
	} else if (MIDI_byte >> 4 == 0b1000) {
 80011d0:	793b      	ldrb	r3, [r7, #4]
 80011d2:	091b      	lsrs	r3, r3, #4
 80011d4:	b2db      	uxtb	r3, r3
 80011d6:	2b08      	cmp	r3, #8
 80011d8:	d128      	bne.n	800122c <parse_MIDI_message+0x110>
		circ_bbuf_pop(&data_buffer, &MIDI_byte); // pop 2nd  MIDI byte (MIDI Note)
 80011da:	1d3b      	adds	r3, r7, #4
 80011dc:	4619      	mov	r1, r3
 80011de:	484a      	ldr	r0, [pc, #296]	; (8001308 <parse_MIDI_message+0x1ec>)
 80011e0:	f7ff fe0a 	bl	8000df8 <circ_bbuf_pop>
		print_uart("  Note off: 0x%x => %u \r\n", MIDI_byte);
 80011e4:	793b      	ldrb	r3, [r7, #4]
 80011e6:	b29b      	uxth	r3, r3
 80011e8:	4619      	mov	r1, r3
 80011ea:	484b      	ldr	r0, [pc, #300]	; (8001318 <parse_MIDI_message+0x1fc>)
 80011ec:	f7ff fe5a 	bl	8000ea4 <print_uart>

		note_index = MIDI_byte - MIDI_note_number_offset; // MIDI_byte - 48
 80011f0:	793b      	ldrb	r3, [r7, #4]
 80011f2:	2230      	movs	r2, #48	; 0x30
 80011f4:	1a9b      	subs	r3, r3, r2
 80011f6:	71bb      	strb	r3, [r7, #6]
		MIDI_note = MIDI_byte;
 80011f8:	793b      	ldrb	r3, [r7, #4]
 80011fa:	71fb      	strb	r3, [r7, #7]

		circ_bbuf_pop(&data_buffer, &MIDI_byte); // pop 3rd MIDI byte (MIDI Velocity)
 80011fc:	1d3b      	adds	r3, r7, #4
 80011fe:	4619      	mov	r1, r3
 8001200:	4841      	ldr	r0, [pc, #260]	; (8001308 <parse_MIDI_message+0x1ec>)
 8001202:	f7ff fdf9 	bl	8000df8 <circ_bbuf_pop>
		print_uart("  Velocity: 0x%x => %u \r\n", MIDI_byte);
 8001206:	793b      	ldrb	r3, [r7, #4]
 8001208:	b29b      	uxth	r3, r3
 800120a:	4619      	mov	r1, r3
 800120c:	4840      	ldr	r0, [pc, #256]	; (8001310 <parse_MIDI_message+0x1f4>)
 800120e:	f7ff fe49 	bl	8000ea4 <print_uart>

		// check if released note = current MIDI note
		if (MIDI_note == current_MIDI_note) {
 8001212:	4b40      	ldr	r3, [pc, #256]	; (8001314 <parse_MIDI_message+0x1f8>)
 8001214:	781b      	ldrb	r3, [r3, #0]
 8001216:	79fa      	ldrb	r2, [r7, #7]
 8001218:	429a      	cmp	r2, r3
 800121a:	d172      	bne.n	8001302 <parse_MIDI_message+0x1e6>
			debug_led_unset(); // LED OFF
 800121c:	f7ff fe70 	bl	8000f00 <debug_led_unset>
			set_pitch(0); // set PITCH to 0
 8001220:	2000      	movs	r0, #0
 8001222:	f7ff ff4f 	bl	80010c4 <set_pitch>
			unset_gate(); // unset GATE
 8001226:	f7ff ff41 	bl	80010ac <unset_gate>
 800122a:	e06a      	b.n	8001302 <parse_MIDI_message+0x1e6>
		}
		// PITCH BEND
	} else if (MIDI_byte >> 4 == 0b1110) {
 800122c:	793b      	ldrb	r3, [r7, #4]
 800122e:	091b      	lsrs	r3, r3, #4
 8001230:	b2db      	uxtb	r3, r3
 8001232:	2b0e      	cmp	r3, #14
 8001234:	d138      	bne.n	80012a8 <parse_MIDI_message+0x18c>
		uint8_t msb = 0; // most significant byte
 8001236:	2300      	movs	r3, #0
 8001238:	70fb      	strb	r3, [r7, #3]
		uint8_t lsb = 0; // least significant byte
 800123a:	2300      	movs	r3, #0
 800123c:	70bb      	strb	r3, [r7, #2]

		// debug_led_unset(); // LED OFF

		circ_bbuf_pop(&data_buffer, &lsb); // pop 2nd MIDI byte (least significant byte)
 800123e:	1cbb      	adds	r3, r7, #2
 8001240:	4619      	mov	r1, r3
 8001242:	4831      	ldr	r0, [pc, #196]	; (8001308 <parse_MIDI_message+0x1ec>)
 8001244:	f7ff fdd8 	bl	8000df8 <circ_bbuf_pop>
		print_uart("  LSB: 0x%x => %u \r\n", lsb);
 8001248:	78bb      	ldrb	r3, [r7, #2]
 800124a:	b29b      	uxth	r3, r3
 800124c:	4619      	mov	r1, r3
 800124e:	4833      	ldr	r0, [pc, #204]	; (800131c <parse_MIDI_message+0x200>)
 8001250:	f7ff fe28 	bl	8000ea4 <print_uart>

		circ_bbuf_pop(&data_buffer, &msb); // pop 3rd MIDI byte (most significant byte)
 8001254:	1cfb      	adds	r3, r7, #3
 8001256:	4619      	mov	r1, r3
 8001258:	482b      	ldr	r0, [pc, #172]	; (8001308 <parse_MIDI_message+0x1ec>)
 800125a:	f7ff fdcd 	bl	8000df8 <circ_bbuf_pop>
		print_uart("  MSB: 0x%x => %u \r\n", msb);
 800125e:	78fb      	ldrb	r3, [r7, #3]
 8001260:	b29b      	uxth	r3, r3
 8001262:	4619      	mov	r1, r3
 8001264:	482e      	ldr	r0, [pc, #184]	; (8001320 <parse_MIDI_message+0x204>)
 8001266:	f7ff fe1d 	bl	8000ea4 <print_uart>

		current_pitch_bend = (msb << 7) + lsb; // calculate pitch_bend
 800126a:	78fb      	ldrb	r3, [r7, #3]
 800126c:	b29b      	uxth	r3, r3
 800126e:	01db      	lsls	r3, r3, #7
 8001270:	b29a      	uxth	r2, r3
 8001272:	78bb      	ldrb	r3, [r7, #2]
 8001274:	b29b      	uxth	r3, r3
 8001276:	4413      	add	r3, r2
 8001278:	b29a      	uxth	r2, r3
 800127a:	4b2a      	ldr	r3, [pc, #168]	; (8001324 <parse_MIDI_message+0x208>)
 800127c:	801a      	strh	r2, [r3, #0]
		print_uart("  MSB << 7: 0x%x => %u \r\n", msb << 7);
 800127e:	78fb      	ldrb	r3, [r7, #3]
 8001280:	b29b      	uxth	r3, r3
 8001282:	01db      	lsls	r3, r3, #7
 8001284:	b29b      	uxth	r3, r3
 8001286:	4619      	mov	r1, r3
 8001288:	4827      	ldr	r0, [pc, #156]	; (8001328 <parse_MIDI_message+0x20c>)
 800128a:	f7ff fe0b 	bl	8000ea4 <print_uart>
		print_uart("  Pitch: 0x%x => %u \r\n", current_pitch_bend);
 800128e:	4b25      	ldr	r3, [pc, #148]	; (8001324 <parse_MIDI_message+0x208>)
 8001290:	881b      	ldrh	r3, [r3, #0]
 8001292:	4619      	mov	r1, r3
 8001294:	4825      	ldr	r0, [pc, #148]	; (800132c <parse_MIDI_message+0x210>)
 8001296:	f7ff fe05 	bl	8000ea4 <print_uart>

		set_pitch(calculate_pitch()); // set pitch to calculated value
 800129a:	f7ff fe3d 	bl	8000f18 <calculate_pitch>
 800129e:	4603      	mov	r3, r0
 80012a0:	4618      	mov	r0, r3
 80012a2:	f7ff ff0f 	bl	80010c4 <set_pitch>
 80012a6:	e02c      	b.n	8001302 <parse_MIDI_message+0x1e6>

		// MODULATION (CONTROL CHANGE)
	} else if (MIDI_byte >> 4 == 0b1011) {
 80012a8:	793b      	ldrb	r3, [r7, #4]
 80012aa:	091b      	lsrs	r3, r3, #4
 80012ac:	b2db      	uxtb	r3, r3
 80012ae:	2b0b      	cmp	r3, #11
 80012b0:	d126      	bne.n	8001300 <parse_MIDI_message+0x1e4>
		uint8_t modulation_value = 0;
 80012b2:	2300      	movs	r3, #0
 80012b4:	717b      	strb	r3, [r7, #5]
		debug_led_set();
 80012b6:	f7ff fe17 	bl	8000ee8 <debug_led_set>

		circ_bbuf_pop(&data_buffer, &MIDI_byte); // pop 2nd MIDI byte (controller number)
 80012ba:	1d3b      	adds	r3, r7, #4
 80012bc:	4619      	mov	r1, r3
 80012be:	4812      	ldr	r0, [pc, #72]	; (8001308 <parse_MIDI_message+0x1ec>)
 80012c0:	f7ff fd9a 	bl	8000df8 <circ_bbuf_pop>
		print_uart("  Controller Number: 0x%x => %u \r\n", MIDI_byte);
 80012c4:	793b      	ldrb	r3, [r7, #4]
 80012c6:	b29b      	uxth	r3, r3
 80012c8:	4619      	mov	r1, r3
 80012ca:	4819      	ldr	r0, [pc, #100]	; (8001330 <parse_MIDI_message+0x214>)
 80012cc:	f7ff fdea 	bl	8000ea4 <print_uart>

		circ_bbuf_pop(&data_buffer, &MIDI_byte); // pop 3rd MIDI byte (actual value)
 80012d0:	1d3b      	adds	r3, r7, #4
 80012d2:	4619      	mov	r1, r3
 80012d4:	480c      	ldr	r0, [pc, #48]	; (8001308 <parse_MIDI_message+0x1ec>)
 80012d6:	f7ff fd8f 	bl	8000df8 <circ_bbuf_pop>
		print_uart("  Value: 0x%x => %u \r\n", MIDI_byte);
 80012da:	793b      	ldrb	r3, [r7, #4]
 80012dc:	b29b      	uxth	r3, r3
 80012de:	4619      	mov	r1, r3
 80012e0:	4814      	ldr	r0, [pc, #80]	; (8001334 <parse_MIDI_message+0x218>)
 80012e2:	f7ff fddf 	bl	8000ea4 <print_uart>

		modulation_value = MIDI_byte;
 80012e6:	793b      	ldrb	r3, [r7, #4]
 80012e8:	717b      	strb	r3, [r7, #5]

		set_modulation(calculate_modulation(modulation_value));
 80012ea:	797b      	ldrb	r3, [r7, #5]
 80012ec:	4618      	mov	r0, r3
 80012ee:	f7ff fe9f 	bl	8001030 <calculate_modulation>
 80012f2:	4603      	mov	r3, r0
 80012f4:	4618      	mov	r0, r3
 80012f6:	f7ff fefb 	bl	80010f0 <set_modulation>
 80012fa:	e002      	b.n	8001302 <parse_MIDI_message+0x1e6>
		return; // return if buffet is empty
 80012fc:	bf00      	nop
 80012fe:	e000      	b.n	8001302 <parse_MIDI_message+0x1e6>
		// WRONG STATUS
	} else {
		return;
 8001300:	bf00      	nop
	}
}
 8001302:	3708      	adds	r7, #8
 8001304:	46bd      	mov	sp, r7
 8001306:	bd80      	pop	{r7, pc}
 8001308:	20000004 	.word	0x20000004
 800130c:	0800566c 	.word	0x0800566c
 8001310:	08005688 	.word	0x08005688
 8001314:	200000a1 	.word	0x200000a1
 8001318:	080056a4 	.word	0x080056a4
 800131c:	080056c0 	.word	0x080056c0
 8001320:	080056d8 	.word	0x080056d8
 8001324:	20000000 	.word	0x20000000
 8001328:	080056f0 	.word	0x080056f0
 800132c:	0800570c 	.word	0x0800570c
 8001330:	08005724 	.word	0x08005724
 8001334:	08005748 	.word	0x08005748

08001338 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800133c:	f000 fb82 	bl	8001a44 <HAL_Init>

  /* USER CODE BEGIN Init */
	set_pitch(0);
 8001340:	2000      	movs	r0, #0
 8001342:	f7ff febf 	bl	80010c4 <set_pitch>
	set_gate(0);
 8001346:	2000      	movs	r0, #0
 8001348:	f7ff fea4 	bl	8001094 <set_gate>
	set_modulation(0);
 800134c:	2000      	movs	r0, #0
 800134e:	f7ff fecf 	bl	80010f0 <set_modulation>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001352:	f000 f825 	bl	80013a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001356:	f000 f911 	bl	800157c <MX_GPIO_Init>
  MX_USART1_UART_Init();
 800135a:	f000 f8af 	bl	80014bc <MX_USART1_UART_Init>
  MX_DAC1_Init();
 800135e:	f000 f871 	bl	8001444 <MX_DAC1_Init>
  MX_USART2_UART_Init();
 8001362:	f000 f8db 	bl	800151c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
	HAL_UART_Receive_IT(&huart2, &received, 1);
 8001366:	2201      	movs	r2, #1
 8001368:	4909      	ldr	r1, [pc, #36]	; (8001390 <main+0x58>)
 800136a:	480a      	ldr	r0, [pc, #40]	; (8001394 <main+0x5c>)
 800136c:	f002 fcd4 	bl	8003d18 <HAL_UART_Receive_IT>
	HAL_UART_Receive_IT(&huart1, &received, 1);
 8001370:	2201      	movs	r2, #1
 8001372:	4907      	ldr	r1, [pc, #28]	; (8001390 <main+0x58>)
 8001374:	4808      	ldr	r0, [pc, #32]	; (8001398 <main+0x60>)
 8001376:	f002 fccf 	bl	8003d18 <HAL_UART_Receive_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	HAL_DAC_Start(&hdac1, DAC1_CHANNEL_1);
 800137a:	2100      	movs	r1, #0
 800137c:	4807      	ldr	r0, [pc, #28]	; (800139c <main+0x64>)
 800137e:	f000 fd34 	bl	8001dea <HAL_DAC_Start>
	HAL_DAC_Start(&hdac1, DAC1_CHANNEL_2);
 8001382:	2110      	movs	r1, #16
 8001384:	4805      	ldr	r0, [pc, #20]	; (800139c <main+0x64>)
 8001386:	f000 fd30 	bl	8001dea <HAL_DAC_Start>
	while (1) {
		parse_MIDI_message();
 800138a:	f7ff fec7 	bl	800111c <parse_MIDI_message>
 800138e:	e7fc      	b.n	800138a <main+0x52>
 8001390:	200000a0 	.word	0x200000a0
 8001394:	20000158 	.word	0x20000158
 8001398:	200000c4 	.word	0x200000c4
 800139c:	200000b0 	.word	0x200000b0

080013a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b096      	sub	sp, #88	; 0x58
 80013a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013a6:	f107 0314 	add.w	r3, r7, #20
 80013aa:	2244      	movs	r2, #68	; 0x44
 80013ac:	2100      	movs	r1, #0
 80013ae:	4618      	mov	r0, r3
 80013b0:	f003 fcfc 	bl	8004dac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013b4:	463b      	mov	r3, r7
 80013b6:	2200      	movs	r2, #0
 80013b8:	601a      	str	r2, [r3, #0]
 80013ba:	605a      	str	r2, [r3, #4]
 80013bc:	609a      	str	r2, [r3, #8]
 80013be:	60da      	str	r2, [r3, #12]
 80013c0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80013c2:	f44f 7000 	mov.w	r0, #512	; 0x200
 80013c6:	f001 f8c7 	bl	8002558 <HAL_PWREx_ControlVoltageScaling>
 80013ca:	4603      	mov	r3, r0
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d001      	beq.n	80013d4 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80013d0:	f000 f94e 	bl	8001670 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80013d4:	2302      	movs	r3, #2
 80013d6:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80013d8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80013dc:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80013de:	2310      	movs	r3, #16
 80013e0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013e2:	2302      	movs	r3, #2
 80013e4:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80013e6:	2302      	movs	r3, #2
 80013e8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80013ea:	2301      	movs	r3, #1
 80013ec:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 80013ee:	230a      	movs	r3, #10
 80013f0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80013f2:	2307      	movs	r3, #7
 80013f4:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80013f6:	2302      	movs	r3, #2
 80013f8:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80013fa:	2302      	movs	r3, #2
 80013fc:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013fe:	f107 0314 	add.w	r3, r7, #20
 8001402:	4618      	mov	r0, r3
 8001404:	f001 f8fe 	bl	8002604 <HAL_RCC_OscConfig>
 8001408:	4603      	mov	r3, r0
 800140a:	2b00      	cmp	r3, #0
 800140c:	d001      	beq.n	8001412 <SystemClock_Config+0x72>
  {
    Error_Handler();
 800140e:	f000 f92f 	bl	8001670 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001412:	230f      	movs	r3, #15
 8001414:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001416:	2303      	movs	r3, #3
 8001418:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800141a:	2300      	movs	r3, #0
 800141c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800141e:	2300      	movs	r3, #0
 8001420:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001422:	2300      	movs	r3, #0
 8001424:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001426:	463b      	mov	r3, r7
 8001428:	2104      	movs	r1, #4
 800142a:	4618      	mov	r0, r3
 800142c:	f001 fcd0 	bl	8002dd0 <HAL_RCC_ClockConfig>
 8001430:	4603      	mov	r3, r0
 8001432:	2b00      	cmp	r3, #0
 8001434:	d001      	beq.n	800143a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001436:	f000 f91b 	bl	8001670 <Error_Handler>
  }
}
 800143a:	bf00      	nop
 800143c:	3758      	adds	r7, #88	; 0x58
 800143e:	46bd      	mov	sp, r7
 8001440:	bd80      	pop	{r7, pc}
	...

08001444 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b08a      	sub	sp, #40	; 0x28
 8001448:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800144a:	1d3b      	adds	r3, r7, #4
 800144c:	2224      	movs	r2, #36	; 0x24
 800144e:	2100      	movs	r1, #0
 8001450:	4618      	mov	r0, r3
 8001452:	f003 fcab 	bl	8004dac <memset>
  /* USER CODE BEGIN DAC1_Init 1 */

  /* USER CODE END DAC1_Init 1 */
  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8001456:	4b17      	ldr	r3, [pc, #92]	; (80014b4 <MX_DAC1_Init+0x70>)
 8001458:	4a17      	ldr	r2, [pc, #92]	; (80014b8 <MX_DAC1_Init+0x74>)
 800145a:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 800145c:	4815      	ldr	r0, [pc, #84]	; (80014b4 <MX_DAC1_Init+0x70>)
 800145e:	f000 fca2 	bl	8001da6 <HAL_DAC_Init>
 8001462:	4603      	mov	r3, r0
 8001464:	2b00      	cmp	r3, #0
 8001466:	d001      	beq.n	800146c <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8001468:	f000 f902 	bl	8001670 <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 800146c:	2300      	movs	r3, #0
 800146e:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8001470:	2300      	movs	r3, #0
 8001472:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001474:	2300      	movs	r3, #0
 8001476:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8001478:	2300      	movs	r3, #0
 800147a:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 800147c:	2300      	movs	r3, #0
 800147e:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001480:	1d3b      	adds	r3, r7, #4
 8001482:	2200      	movs	r2, #0
 8001484:	4619      	mov	r1, r3
 8001486:	480b      	ldr	r0, [pc, #44]	; (80014b4 <MX_DAC1_Init+0x70>)
 8001488:	f000 fcfc 	bl	8001e84 <HAL_DAC_ConfigChannel>
 800148c:	4603      	mov	r3, r0
 800148e:	2b00      	cmp	r3, #0
 8001490:	d001      	beq.n	8001496 <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 8001492:	f000 f8ed 	bl	8001670 <Error_Handler>
  }
  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8001496:	1d3b      	adds	r3, r7, #4
 8001498:	2210      	movs	r2, #16
 800149a:	4619      	mov	r1, r3
 800149c:	4805      	ldr	r0, [pc, #20]	; (80014b4 <MX_DAC1_Init+0x70>)
 800149e:	f000 fcf1 	bl	8001e84 <HAL_DAC_ConfigChannel>
 80014a2:	4603      	mov	r3, r0
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d001      	beq.n	80014ac <MX_DAC1_Init+0x68>
  {
    Error_Handler();
 80014a8:	f000 f8e2 	bl	8001670 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 80014ac:	bf00      	nop
 80014ae:	3728      	adds	r7, #40	; 0x28
 80014b0:	46bd      	mov	sp, r7
 80014b2:	bd80      	pop	{r7, pc}
 80014b4:	200000b0 	.word	0x200000b0
 80014b8:	40007400 	.word	0x40007400

080014bc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80014c0:	4b14      	ldr	r3, [pc, #80]	; (8001514 <MX_USART1_UART_Init+0x58>)
 80014c2:	4a15      	ldr	r2, [pc, #84]	; (8001518 <MX_USART1_UART_Init+0x5c>)
 80014c4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 31250;
 80014c6:	4b13      	ldr	r3, [pc, #76]	; (8001514 <MX_USART1_UART_Init+0x58>)
 80014c8:	f647 2212 	movw	r2, #31250	; 0x7a12
 80014cc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80014ce:	4b11      	ldr	r3, [pc, #68]	; (8001514 <MX_USART1_UART_Init+0x58>)
 80014d0:	2200      	movs	r2, #0
 80014d2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80014d4:	4b0f      	ldr	r3, [pc, #60]	; (8001514 <MX_USART1_UART_Init+0x58>)
 80014d6:	2200      	movs	r2, #0
 80014d8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80014da:	4b0e      	ldr	r3, [pc, #56]	; (8001514 <MX_USART1_UART_Init+0x58>)
 80014dc:	2200      	movs	r2, #0
 80014de:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80014e0:	4b0c      	ldr	r3, [pc, #48]	; (8001514 <MX_USART1_UART_Init+0x58>)
 80014e2:	220c      	movs	r2, #12
 80014e4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014e6:	4b0b      	ldr	r3, [pc, #44]	; (8001514 <MX_USART1_UART_Init+0x58>)
 80014e8:	2200      	movs	r2, #0
 80014ea:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80014ec:	4b09      	ldr	r3, [pc, #36]	; (8001514 <MX_USART1_UART_Init+0x58>)
 80014ee:	2200      	movs	r2, #0
 80014f0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80014f2:	4b08      	ldr	r3, [pc, #32]	; (8001514 <MX_USART1_UART_Init+0x58>)
 80014f4:	2200      	movs	r2, #0
 80014f6:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80014f8:	4b06      	ldr	r3, [pc, #24]	; (8001514 <MX_USART1_UART_Init+0x58>)
 80014fa:	2200      	movs	r2, #0
 80014fc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80014fe:	4805      	ldr	r0, [pc, #20]	; (8001514 <MX_USART1_UART_Init+0x58>)
 8001500:	f002 fb28 	bl	8003b54 <HAL_UART_Init>
 8001504:	4603      	mov	r3, r0
 8001506:	2b00      	cmp	r3, #0
 8001508:	d001      	beq.n	800150e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800150a:	f000 f8b1 	bl	8001670 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800150e:	bf00      	nop
 8001510:	bd80      	pop	{r7, pc}
 8001512:	bf00      	nop
 8001514:	200000c4 	.word	0x200000c4
 8001518:	40013800 	.word	0x40013800

0800151c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001520:	4b14      	ldr	r3, [pc, #80]	; (8001574 <MX_USART2_UART_Init+0x58>)
 8001522:	4a15      	ldr	r2, [pc, #84]	; (8001578 <MX_USART2_UART_Init+0x5c>)
 8001524:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001526:	4b13      	ldr	r3, [pc, #76]	; (8001574 <MX_USART2_UART_Init+0x58>)
 8001528:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800152c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800152e:	4b11      	ldr	r3, [pc, #68]	; (8001574 <MX_USART2_UART_Init+0x58>)
 8001530:	2200      	movs	r2, #0
 8001532:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001534:	4b0f      	ldr	r3, [pc, #60]	; (8001574 <MX_USART2_UART_Init+0x58>)
 8001536:	2200      	movs	r2, #0
 8001538:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800153a:	4b0e      	ldr	r3, [pc, #56]	; (8001574 <MX_USART2_UART_Init+0x58>)
 800153c:	2200      	movs	r2, #0
 800153e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001540:	4b0c      	ldr	r3, [pc, #48]	; (8001574 <MX_USART2_UART_Init+0x58>)
 8001542:	220c      	movs	r2, #12
 8001544:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001546:	4b0b      	ldr	r3, [pc, #44]	; (8001574 <MX_USART2_UART_Init+0x58>)
 8001548:	2200      	movs	r2, #0
 800154a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800154c:	4b09      	ldr	r3, [pc, #36]	; (8001574 <MX_USART2_UART_Init+0x58>)
 800154e:	2200      	movs	r2, #0
 8001550:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001552:	4b08      	ldr	r3, [pc, #32]	; (8001574 <MX_USART2_UART_Init+0x58>)
 8001554:	2200      	movs	r2, #0
 8001556:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001558:	4b06      	ldr	r3, [pc, #24]	; (8001574 <MX_USART2_UART_Init+0x58>)
 800155a:	2200      	movs	r2, #0
 800155c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800155e:	4805      	ldr	r0, [pc, #20]	; (8001574 <MX_USART2_UART_Init+0x58>)
 8001560:	f002 faf8 	bl	8003b54 <HAL_UART_Init>
 8001564:	4603      	mov	r3, r0
 8001566:	2b00      	cmp	r3, #0
 8001568:	d001      	beq.n	800156e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800156a:	f000 f881 	bl	8001670 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800156e:	bf00      	nop
 8001570:	bd80      	pop	{r7, pc}
 8001572:	bf00      	nop
 8001574:	20000158 	.word	0x20000158
 8001578:	40004400 	.word	0x40004400

0800157c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b08a      	sub	sp, #40	; 0x28
 8001580:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001582:	f107 0314 	add.w	r3, r7, #20
 8001586:	2200      	movs	r2, #0
 8001588:	601a      	str	r2, [r3, #0]
 800158a:	605a      	str	r2, [r3, #4]
 800158c:	609a      	str	r2, [r3, #8]
 800158e:	60da      	str	r2, [r3, #12]
 8001590:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001592:	4b33      	ldr	r3, [pc, #204]	; (8001660 <MX_GPIO_Init+0xe4>)
 8001594:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001596:	4a32      	ldr	r2, [pc, #200]	; (8001660 <MX_GPIO_Init+0xe4>)
 8001598:	f043 0304 	orr.w	r3, r3, #4
 800159c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800159e:	4b30      	ldr	r3, [pc, #192]	; (8001660 <MX_GPIO_Init+0xe4>)
 80015a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015a2:	f003 0304 	and.w	r3, r3, #4
 80015a6:	613b      	str	r3, [r7, #16]
 80015a8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80015aa:	4b2d      	ldr	r3, [pc, #180]	; (8001660 <MX_GPIO_Init+0xe4>)
 80015ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015ae:	4a2c      	ldr	r2, [pc, #176]	; (8001660 <MX_GPIO_Init+0xe4>)
 80015b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80015b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015b6:	4b2a      	ldr	r3, [pc, #168]	; (8001660 <MX_GPIO_Init+0xe4>)
 80015b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80015be:	60fb      	str	r3, [r7, #12]
 80015c0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015c2:	4b27      	ldr	r3, [pc, #156]	; (8001660 <MX_GPIO_Init+0xe4>)
 80015c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015c6:	4a26      	ldr	r2, [pc, #152]	; (8001660 <MX_GPIO_Init+0xe4>)
 80015c8:	f043 0301 	orr.w	r3, r3, #1
 80015cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015ce:	4b24      	ldr	r3, [pc, #144]	; (8001660 <MX_GPIO_Init+0xe4>)
 80015d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015d2:	f003 0301 	and.w	r3, r3, #1
 80015d6:	60bb      	str	r3, [r7, #8]
 80015d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80015da:	4b21      	ldr	r3, [pc, #132]	; (8001660 <MX_GPIO_Init+0xe4>)
 80015dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015de:	4a20      	ldr	r2, [pc, #128]	; (8001660 <MX_GPIO_Init+0xe4>)
 80015e0:	f043 0302 	orr.w	r3, r3, #2
 80015e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015e6:	4b1e      	ldr	r3, [pc, #120]	; (8001660 <MX_GPIO_Init+0xe4>)
 80015e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015ea:	f003 0302 	and.w	r3, r3, #2
 80015ee:	607b      	str	r3, [r7, #4]
 80015f0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80015f2:	2200      	movs	r2, #0
 80015f4:	2104      	movs	r1, #4
 80015f6:	481b      	ldr	r0, [pc, #108]	; (8001664 <MX_GPIO_Init+0xe8>)
 80015f8:	f000 ff88 	bl	800250c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 80015fc:	2200      	movs	r2, #0
 80015fe:	2140      	movs	r1, #64	; 0x40
 8001600:	4819      	ldr	r0, [pc, #100]	; (8001668 <MX_GPIO_Init+0xec>)
 8001602:	f000 ff83 	bl	800250c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001606:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800160a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800160c:	4b17      	ldr	r3, [pc, #92]	; (800166c <MX_GPIO_Init+0xf0>)
 800160e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001610:	2300      	movs	r3, #0
 8001612:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001614:	f107 0314 	add.w	r3, r7, #20
 8001618:	4619      	mov	r1, r3
 800161a:	4812      	ldr	r0, [pc, #72]	; (8001664 <MX_GPIO_Init+0xe8>)
 800161c:	f000 fdcc 	bl	80021b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001620:	2304      	movs	r3, #4
 8001622:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001624:	2301      	movs	r3, #1
 8001626:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001628:	2300      	movs	r3, #0
 800162a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800162c:	2300      	movs	r3, #0
 800162e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001630:	f107 0314 	add.w	r3, r7, #20
 8001634:	4619      	mov	r1, r3
 8001636:	480b      	ldr	r0, [pc, #44]	; (8001664 <MX_GPIO_Init+0xe8>)
 8001638:	f000 fdbe 	bl	80021b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 800163c:	2340      	movs	r3, #64	; 0x40
 800163e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001640:	2301      	movs	r3, #1
 8001642:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001644:	2300      	movs	r3, #0
 8001646:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001648:	2300      	movs	r3, #0
 800164a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800164c:	f107 0314 	add.w	r3, r7, #20
 8001650:	4619      	mov	r1, r3
 8001652:	4805      	ldr	r0, [pc, #20]	; (8001668 <MX_GPIO_Init+0xec>)
 8001654:	f000 fdb0 	bl	80021b8 <HAL_GPIO_Init>

}
 8001658:	bf00      	nop
 800165a:	3728      	adds	r7, #40	; 0x28
 800165c:	46bd      	mov	sp, r7
 800165e:	bd80      	pop	{r7, pc}
 8001660:	40021000 	.word	0x40021000
 8001664:	48000800 	.word	0x48000800
 8001668:	48000400 	.word	0x48000400
 800166c:	10210000 	.word	0x10210000

08001670 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001670:	b480      	push	{r7}
 8001672:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001674:	b672      	cpsid	i
}
 8001676:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001678:	e7fe      	b.n	8001678 <Error_Handler+0x8>
	...

0800167c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800167c:	b480      	push	{r7}
 800167e:	b083      	sub	sp, #12
 8001680:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001682:	4b0f      	ldr	r3, [pc, #60]	; (80016c0 <HAL_MspInit+0x44>)
 8001684:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001686:	4a0e      	ldr	r2, [pc, #56]	; (80016c0 <HAL_MspInit+0x44>)
 8001688:	f043 0301 	orr.w	r3, r3, #1
 800168c:	6613      	str	r3, [r2, #96]	; 0x60
 800168e:	4b0c      	ldr	r3, [pc, #48]	; (80016c0 <HAL_MspInit+0x44>)
 8001690:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001692:	f003 0301 	and.w	r3, r3, #1
 8001696:	607b      	str	r3, [r7, #4]
 8001698:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800169a:	4b09      	ldr	r3, [pc, #36]	; (80016c0 <HAL_MspInit+0x44>)
 800169c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800169e:	4a08      	ldr	r2, [pc, #32]	; (80016c0 <HAL_MspInit+0x44>)
 80016a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016a4:	6593      	str	r3, [r2, #88]	; 0x58
 80016a6:	4b06      	ldr	r3, [pc, #24]	; (80016c0 <HAL_MspInit+0x44>)
 80016a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016ae:	603b      	str	r3, [r7, #0]
 80016b0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016b2:	bf00      	nop
 80016b4:	370c      	adds	r7, #12
 80016b6:	46bd      	mov	sp, r7
 80016b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016bc:	4770      	bx	lr
 80016be:	bf00      	nop
 80016c0:	40021000 	.word	0x40021000

080016c4 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b08a      	sub	sp, #40	; 0x28
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016cc:	f107 0314 	add.w	r3, r7, #20
 80016d0:	2200      	movs	r2, #0
 80016d2:	601a      	str	r2, [r3, #0]
 80016d4:	605a      	str	r2, [r3, #4]
 80016d6:	609a      	str	r2, [r3, #8]
 80016d8:	60da      	str	r2, [r3, #12]
 80016da:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	4a15      	ldr	r2, [pc, #84]	; (8001738 <HAL_DAC_MspInit+0x74>)
 80016e2:	4293      	cmp	r3, r2
 80016e4:	d124      	bne.n	8001730 <HAL_DAC_MspInit+0x6c>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 80016e6:	4b15      	ldr	r3, [pc, #84]	; (800173c <HAL_DAC_MspInit+0x78>)
 80016e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016ea:	4a14      	ldr	r2, [pc, #80]	; (800173c <HAL_DAC_MspInit+0x78>)
 80016ec:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80016f0:	6593      	str	r3, [r2, #88]	; 0x58
 80016f2:	4b12      	ldr	r3, [pc, #72]	; (800173c <HAL_DAC_MspInit+0x78>)
 80016f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016f6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80016fa:	613b      	str	r3, [r7, #16]
 80016fc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016fe:	4b0f      	ldr	r3, [pc, #60]	; (800173c <HAL_DAC_MspInit+0x78>)
 8001700:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001702:	4a0e      	ldr	r2, [pc, #56]	; (800173c <HAL_DAC_MspInit+0x78>)
 8001704:	f043 0301 	orr.w	r3, r3, #1
 8001708:	64d3      	str	r3, [r2, #76]	; 0x4c
 800170a:	4b0c      	ldr	r3, [pc, #48]	; (800173c <HAL_DAC_MspInit+0x78>)
 800170c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800170e:	f003 0301 	and.w	r3, r3, #1
 8001712:	60fb      	str	r3, [r7, #12]
 8001714:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001716:	2330      	movs	r3, #48	; 0x30
 8001718:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800171a:	2303      	movs	r3, #3
 800171c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800171e:	2300      	movs	r3, #0
 8001720:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001722:	f107 0314 	add.w	r3, r7, #20
 8001726:	4619      	mov	r1, r3
 8001728:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800172c:	f000 fd44 	bl	80021b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8001730:	bf00      	nop
 8001732:	3728      	adds	r7, #40	; 0x28
 8001734:	46bd      	mov	sp, r7
 8001736:	bd80      	pop	{r7, pc}
 8001738:	40007400 	.word	0x40007400
 800173c:	40021000 	.word	0x40021000

08001740 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b0ae      	sub	sp, #184	; 0xb8
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001748:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800174c:	2200      	movs	r2, #0
 800174e:	601a      	str	r2, [r3, #0]
 8001750:	605a      	str	r2, [r3, #4]
 8001752:	609a      	str	r2, [r3, #8]
 8001754:	60da      	str	r2, [r3, #12]
 8001756:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001758:	f107 031c 	add.w	r3, r7, #28
 800175c:	2288      	movs	r2, #136	; 0x88
 800175e:	2100      	movs	r1, #0
 8001760:	4618      	mov	r0, r3
 8001762:	f003 fb23 	bl	8004dac <memset>
  if(huart->Instance==USART1)
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	4a4b      	ldr	r2, [pc, #300]	; (8001898 <HAL_UART_MspInit+0x158>)
 800176c:	4293      	cmp	r3, r2
 800176e:	d145      	bne.n	80017fc <HAL_UART_MspInit+0xbc>
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001770:	2301      	movs	r3, #1
 8001772:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001774:	2300      	movs	r3, #0
 8001776:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001778:	f107 031c 	add.w	r3, r7, #28
 800177c:	4618      	mov	r0, r3
 800177e:	f001 fd2d 	bl	80031dc <HAL_RCCEx_PeriphCLKConfig>
 8001782:	4603      	mov	r3, r0
 8001784:	2b00      	cmp	r3, #0
 8001786:	d001      	beq.n	800178c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001788:	f7ff ff72 	bl	8001670 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800178c:	4b43      	ldr	r3, [pc, #268]	; (800189c <HAL_UART_MspInit+0x15c>)
 800178e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001790:	4a42      	ldr	r2, [pc, #264]	; (800189c <HAL_UART_MspInit+0x15c>)
 8001792:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001796:	6613      	str	r3, [r2, #96]	; 0x60
 8001798:	4b40      	ldr	r3, [pc, #256]	; (800189c <HAL_UART_MspInit+0x15c>)
 800179a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800179c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80017a0:	61bb      	str	r3, [r7, #24]
 80017a2:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017a4:	4b3d      	ldr	r3, [pc, #244]	; (800189c <HAL_UART_MspInit+0x15c>)
 80017a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017a8:	4a3c      	ldr	r2, [pc, #240]	; (800189c <HAL_UART_MspInit+0x15c>)
 80017aa:	f043 0301 	orr.w	r3, r3, #1
 80017ae:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017b0:	4b3a      	ldr	r3, [pc, #232]	; (800189c <HAL_UART_MspInit+0x15c>)
 80017b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017b4:	f003 0301 	and.w	r3, r3, #1
 80017b8:	617b      	str	r3, [r7, #20]
 80017ba:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80017bc:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80017c0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017c4:	2302      	movs	r3, #2
 80017c6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ca:	2300      	movs	r3, #0
 80017cc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017d0:	2303      	movs	r3, #3
 80017d2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80017d6:	2307      	movs	r3, #7
 80017d8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017dc:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80017e0:	4619      	mov	r1, r3
 80017e2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017e6:	f000 fce7 	bl	80021b8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80017ea:	2200      	movs	r2, #0
 80017ec:	2100      	movs	r1, #0
 80017ee:	2025      	movs	r0, #37	; 0x25
 80017f0:	f000 faa3 	bl	8001d3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80017f4:	2025      	movs	r0, #37	; 0x25
 80017f6:	f000 fabc 	bl	8001d72 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80017fa:	e048      	b.n	800188e <HAL_UART_MspInit+0x14e>
  else if(huart->Instance==USART2)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	4a27      	ldr	r2, [pc, #156]	; (80018a0 <HAL_UART_MspInit+0x160>)
 8001802:	4293      	cmp	r3, r2
 8001804:	d143      	bne.n	800188e <HAL_UART_MspInit+0x14e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001806:	2302      	movs	r3, #2
 8001808:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800180a:	2300      	movs	r3, #0
 800180c:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800180e:	f107 031c 	add.w	r3, r7, #28
 8001812:	4618      	mov	r0, r3
 8001814:	f001 fce2 	bl	80031dc <HAL_RCCEx_PeriphCLKConfig>
 8001818:	4603      	mov	r3, r0
 800181a:	2b00      	cmp	r3, #0
 800181c:	d001      	beq.n	8001822 <HAL_UART_MspInit+0xe2>
      Error_Handler();
 800181e:	f7ff ff27 	bl	8001670 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001822:	4b1e      	ldr	r3, [pc, #120]	; (800189c <HAL_UART_MspInit+0x15c>)
 8001824:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001826:	4a1d      	ldr	r2, [pc, #116]	; (800189c <HAL_UART_MspInit+0x15c>)
 8001828:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800182c:	6593      	str	r3, [r2, #88]	; 0x58
 800182e:	4b1b      	ldr	r3, [pc, #108]	; (800189c <HAL_UART_MspInit+0x15c>)
 8001830:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001832:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001836:	613b      	str	r3, [r7, #16]
 8001838:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800183a:	4b18      	ldr	r3, [pc, #96]	; (800189c <HAL_UART_MspInit+0x15c>)
 800183c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800183e:	4a17      	ldr	r2, [pc, #92]	; (800189c <HAL_UART_MspInit+0x15c>)
 8001840:	f043 0301 	orr.w	r3, r3, #1
 8001844:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001846:	4b15      	ldr	r3, [pc, #84]	; (800189c <HAL_UART_MspInit+0x15c>)
 8001848:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800184a:	f003 0301 	and.w	r3, r3, #1
 800184e:	60fb      	str	r3, [r7, #12]
 8001850:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001852:	230c      	movs	r3, #12
 8001854:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001858:	2302      	movs	r3, #2
 800185a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800185e:	2300      	movs	r3, #0
 8001860:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001864:	2303      	movs	r3, #3
 8001866:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800186a:	2307      	movs	r3, #7
 800186c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001870:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001874:	4619      	mov	r1, r3
 8001876:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800187a:	f000 fc9d 	bl	80021b8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800187e:	2200      	movs	r2, #0
 8001880:	2100      	movs	r1, #0
 8001882:	2026      	movs	r0, #38	; 0x26
 8001884:	f000 fa59 	bl	8001d3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001888:	2026      	movs	r0, #38	; 0x26
 800188a:	f000 fa72 	bl	8001d72 <HAL_NVIC_EnableIRQ>
}
 800188e:	bf00      	nop
 8001890:	37b8      	adds	r7, #184	; 0xb8
 8001892:	46bd      	mov	sp, r7
 8001894:	bd80      	pop	{r7, pc}
 8001896:	bf00      	nop
 8001898:	40013800 	.word	0x40013800
 800189c:	40021000 	.word	0x40021000
 80018a0:	40004400 	.word	0x40004400

080018a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80018a4:	b480      	push	{r7}
 80018a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80018a8:	e7fe      	b.n	80018a8 <NMI_Handler+0x4>

080018aa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018aa:	b480      	push	{r7}
 80018ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018ae:	e7fe      	b.n	80018ae <HardFault_Handler+0x4>

080018b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018b0:	b480      	push	{r7}
 80018b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018b4:	e7fe      	b.n	80018b4 <MemManage_Handler+0x4>

080018b6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018b6:	b480      	push	{r7}
 80018b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018ba:	e7fe      	b.n	80018ba <BusFault_Handler+0x4>

080018bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018bc:	b480      	push	{r7}
 80018be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018c0:	e7fe      	b.n	80018c0 <UsageFault_Handler+0x4>

080018c2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80018c2:	b480      	push	{r7}
 80018c4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80018c6:	bf00      	nop
 80018c8:	46bd      	mov	sp, r7
 80018ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ce:	4770      	bx	lr

080018d0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018d0:	b480      	push	{r7}
 80018d2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018d4:	bf00      	nop
 80018d6:	46bd      	mov	sp, r7
 80018d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018dc:	4770      	bx	lr

080018de <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80018de:	b480      	push	{r7}
 80018e0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80018e2:	bf00      	nop
 80018e4:	46bd      	mov	sp, r7
 80018e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ea:	4770      	bx	lr

080018ec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80018f0:	f000 f904 	bl	8001afc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80018f4:	bf00      	nop
 80018f6:	bd80      	pop	{r7, pc}

080018f8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80018fc:	4802      	ldr	r0, [pc, #8]	; (8001908 <USART1_IRQHandler+0x10>)
 80018fe:	f002 fa4f 	bl	8003da0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001902:	bf00      	nop
 8001904:	bd80      	pop	{r7, pc}
 8001906:	bf00      	nop
 8001908:	200000c4 	.word	0x200000c4

0800190c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001910:	4802      	ldr	r0, [pc, #8]	; (800191c <USART2_IRQHandler+0x10>)
 8001912:	f002 fa45 	bl	8003da0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001916:	bf00      	nop
 8001918:	bd80      	pop	{r7, pc}
 800191a:	bf00      	nop
 800191c:	20000158 	.word	0x20000158

08001920 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b086      	sub	sp, #24
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001928:	4a14      	ldr	r2, [pc, #80]	; (800197c <_sbrk+0x5c>)
 800192a:	4b15      	ldr	r3, [pc, #84]	; (8001980 <_sbrk+0x60>)
 800192c:	1ad3      	subs	r3, r2, r3
 800192e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001930:	697b      	ldr	r3, [r7, #20]
 8001932:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001934:	4b13      	ldr	r3, [pc, #76]	; (8001984 <_sbrk+0x64>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	2b00      	cmp	r3, #0
 800193a:	d102      	bne.n	8001942 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800193c:	4b11      	ldr	r3, [pc, #68]	; (8001984 <_sbrk+0x64>)
 800193e:	4a12      	ldr	r2, [pc, #72]	; (8001988 <_sbrk+0x68>)
 8001940:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001942:	4b10      	ldr	r3, [pc, #64]	; (8001984 <_sbrk+0x64>)
 8001944:	681a      	ldr	r2, [r3, #0]
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	4413      	add	r3, r2
 800194a:	693a      	ldr	r2, [r7, #16]
 800194c:	429a      	cmp	r2, r3
 800194e:	d207      	bcs.n	8001960 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001950:	f003 fa02 	bl	8004d58 <__errno>
 8001954:	4603      	mov	r3, r0
 8001956:	220c      	movs	r2, #12
 8001958:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800195a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800195e:	e009      	b.n	8001974 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001960:	4b08      	ldr	r3, [pc, #32]	; (8001984 <_sbrk+0x64>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001966:	4b07      	ldr	r3, [pc, #28]	; (8001984 <_sbrk+0x64>)
 8001968:	681a      	ldr	r2, [r3, #0]
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	4413      	add	r3, r2
 800196e:	4a05      	ldr	r2, [pc, #20]	; (8001984 <_sbrk+0x64>)
 8001970:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001972:	68fb      	ldr	r3, [r7, #12]
}
 8001974:	4618      	mov	r0, r3
 8001976:	3718      	adds	r7, #24
 8001978:	46bd      	mov	sp, r7
 800197a:	bd80      	pop	{r7, pc}
 800197c:	20018000 	.word	0x20018000
 8001980:	00000400 	.word	0x00000400
 8001984:	200000a4 	.word	0x200000a4
 8001988:	200001f0 	.word	0x200001f0

0800198c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800198c:	b480      	push	{r7}
 800198e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001990:	4b15      	ldr	r3, [pc, #84]	; (80019e8 <SystemInit+0x5c>)
 8001992:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001996:	4a14      	ldr	r2, [pc, #80]	; (80019e8 <SystemInit+0x5c>)
 8001998:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800199c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80019a0:	4b12      	ldr	r3, [pc, #72]	; (80019ec <SystemInit+0x60>)
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	4a11      	ldr	r2, [pc, #68]	; (80019ec <SystemInit+0x60>)
 80019a6:	f043 0301 	orr.w	r3, r3, #1
 80019aa:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 80019ac:	4b0f      	ldr	r3, [pc, #60]	; (80019ec <SystemInit+0x60>)
 80019ae:	2200      	movs	r2, #0
 80019b0:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 80019b2:	4b0e      	ldr	r3, [pc, #56]	; (80019ec <SystemInit+0x60>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	4a0d      	ldr	r2, [pc, #52]	; (80019ec <SystemInit+0x60>)
 80019b8:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80019bc:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80019c0:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 80019c2:	4b0a      	ldr	r3, [pc, #40]	; (80019ec <SystemInit+0x60>)
 80019c4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80019c8:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80019ca:	4b08      	ldr	r3, [pc, #32]	; (80019ec <SystemInit+0x60>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	4a07      	ldr	r2, [pc, #28]	; (80019ec <SystemInit+0x60>)
 80019d0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80019d4:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80019d6:	4b05      	ldr	r3, [pc, #20]	; (80019ec <SystemInit+0x60>)
 80019d8:	2200      	movs	r2, #0
 80019da:	619a      	str	r2, [r3, #24]
}
 80019dc:	bf00      	nop
 80019de:	46bd      	mov	sp, r7
 80019e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e4:	4770      	bx	lr
 80019e6:	bf00      	nop
 80019e8:	e000ed00 	.word	0xe000ed00
 80019ec:	40021000 	.word	0x40021000

080019f0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80019f0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001a28 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80019f4:	f7ff ffca 	bl	800198c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80019f8:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80019fa:	e003      	b.n	8001a04 <LoopCopyDataInit>

080019fc <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80019fc:	4b0b      	ldr	r3, [pc, #44]	; (8001a2c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80019fe:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001a00:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001a02:	3104      	adds	r1, #4

08001a04 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001a04:	480a      	ldr	r0, [pc, #40]	; (8001a30 <LoopForever+0xa>)
	ldr	r3, =_edata
 8001a06:	4b0b      	ldr	r3, [pc, #44]	; (8001a34 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001a08:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001a0a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001a0c:	d3f6      	bcc.n	80019fc <CopyDataInit>
	ldr	r2, =_sbss
 8001a0e:	4a0a      	ldr	r2, [pc, #40]	; (8001a38 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001a10:	e002      	b.n	8001a18 <LoopFillZerobss>

08001a12 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001a12:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001a14:	f842 3b04 	str.w	r3, [r2], #4

08001a18 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001a18:	4b08      	ldr	r3, [pc, #32]	; (8001a3c <LoopForever+0x16>)
	cmp	r2, r3
 8001a1a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001a1c:	d3f9      	bcc.n	8001a12 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001a1e:	f003 f9a1 	bl	8004d64 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001a22:	f7ff fc89 	bl	8001338 <main>

08001a26 <LoopForever>:

LoopForever:
    b LoopForever
 8001a26:	e7fe      	b.n	8001a26 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001a28:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8001a2c:	08005830 	.word	0x08005830
	ldr	r0, =_sdata
 8001a30:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001a34:	20000084 	.word	0x20000084
	ldr	r2, =_sbss
 8001a38:	20000084 	.word	0x20000084
	ldr	r3, = _ebss
 8001a3c:	200001f0 	.word	0x200001f0

08001a40 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001a40:	e7fe      	b.n	8001a40 <ADC1_2_IRQHandler>
	...

08001a44 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b082      	sub	sp, #8
 8001a48:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a4e:	4b0c      	ldr	r3, [pc, #48]	; (8001a80 <HAL_Init+0x3c>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	4a0b      	ldr	r2, [pc, #44]	; (8001a80 <HAL_Init+0x3c>)
 8001a54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a58:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a5a:	2003      	movs	r0, #3
 8001a5c:	f000 f962 	bl	8001d24 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001a60:	2000      	movs	r0, #0
 8001a62:	f000 f80f 	bl	8001a84 <HAL_InitTick>
 8001a66:	4603      	mov	r3, r0
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d002      	beq.n	8001a72 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001a6c:	2301      	movs	r3, #1
 8001a6e:	71fb      	strb	r3, [r7, #7]
 8001a70:	e001      	b.n	8001a76 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001a72:	f7ff fe03 	bl	800167c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001a76:	79fb      	ldrb	r3, [r7, #7]
}
 8001a78:	4618      	mov	r0, r3
 8001a7a:	3708      	adds	r7, #8
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	bd80      	pop	{r7, pc}
 8001a80:	40022000 	.word	0x40022000

08001a84 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b084      	sub	sp, #16
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001a90:	4b17      	ldr	r3, [pc, #92]	; (8001af0 <HAL_InitTick+0x6c>)
 8001a92:	781b      	ldrb	r3, [r3, #0]
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d023      	beq.n	8001ae0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001a98:	4b16      	ldr	r3, [pc, #88]	; (8001af4 <HAL_InitTick+0x70>)
 8001a9a:	681a      	ldr	r2, [r3, #0]
 8001a9c:	4b14      	ldr	r3, [pc, #80]	; (8001af0 <HAL_InitTick+0x6c>)
 8001a9e:	781b      	ldrb	r3, [r3, #0]
 8001aa0:	4619      	mov	r1, r3
 8001aa2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001aa6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001aaa:	fbb2 f3f3 	udiv	r3, r2, r3
 8001aae:	4618      	mov	r0, r3
 8001ab0:	f000 f96d 	bl	8001d8e <HAL_SYSTICK_Config>
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d10f      	bne.n	8001ada <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	2b0f      	cmp	r3, #15
 8001abe:	d809      	bhi.n	8001ad4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	6879      	ldr	r1, [r7, #4]
 8001ac4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001ac8:	f000 f937 	bl	8001d3a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001acc:	4a0a      	ldr	r2, [pc, #40]	; (8001af8 <HAL_InitTick+0x74>)
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	6013      	str	r3, [r2, #0]
 8001ad2:	e007      	b.n	8001ae4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001ad4:	2301      	movs	r3, #1
 8001ad6:	73fb      	strb	r3, [r7, #15]
 8001ad8:	e004      	b.n	8001ae4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001ada:	2301      	movs	r3, #1
 8001adc:	73fb      	strb	r3, [r7, #15]
 8001ade:	e001      	b.n	8001ae4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001ae0:	2301      	movs	r3, #1
 8001ae2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001ae4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	3710      	adds	r7, #16
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bd80      	pop	{r7, pc}
 8001aee:	bf00      	nop
 8001af0:	2000001c 	.word	0x2000001c
 8001af4:	20000014 	.word	0x20000014
 8001af8:	20000018 	.word	0x20000018

08001afc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001afc:	b480      	push	{r7}
 8001afe:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001b00:	4b06      	ldr	r3, [pc, #24]	; (8001b1c <HAL_IncTick+0x20>)
 8001b02:	781b      	ldrb	r3, [r3, #0]
 8001b04:	461a      	mov	r2, r3
 8001b06:	4b06      	ldr	r3, [pc, #24]	; (8001b20 <HAL_IncTick+0x24>)
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	4413      	add	r3, r2
 8001b0c:	4a04      	ldr	r2, [pc, #16]	; (8001b20 <HAL_IncTick+0x24>)
 8001b0e:	6013      	str	r3, [r2, #0]
}
 8001b10:	bf00      	nop
 8001b12:	46bd      	mov	sp, r7
 8001b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b18:	4770      	bx	lr
 8001b1a:	bf00      	nop
 8001b1c:	2000001c 	.word	0x2000001c
 8001b20:	200001dc 	.word	0x200001dc

08001b24 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b24:	b480      	push	{r7}
 8001b26:	af00      	add	r7, sp, #0
  return uwTick;
 8001b28:	4b03      	ldr	r3, [pc, #12]	; (8001b38 <HAL_GetTick+0x14>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
}
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b34:	4770      	bx	lr
 8001b36:	bf00      	nop
 8001b38:	200001dc 	.word	0x200001dc

08001b3c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b084      	sub	sp, #16
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b44:	f7ff ffee 	bl	8001b24 <HAL_GetTick>
 8001b48:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001b54:	d005      	beq.n	8001b62 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001b56:	4b0a      	ldr	r3, [pc, #40]	; (8001b80 <HAL_Delay+0x44>)
 8001b58:	781b      	ldrb	r3, [r3, #0]
 8001b5a:	461a      	mov	r2, r3
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	4413      	add	r3, r2
 8001b60:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001b62:	bf00      	nop
 8001b64:	f7ff ffde 	bl	8001b24 <HAL_GetTick>
 8001b68:	4602      	mov	r2, r0
 8001b6a:	68bb      	ldr	r3, [r7, #8]
 8001b6c:	1ad3      	subs	r3, r2, r3
 8001b6e:	68fa      	ldr	r2, [r7, #12]
 8001b70:	429a      	cmp	r2, r3
 8001b72:	d8f7      	bhi.n	8001b64 <HAL_Delay+0x28>
  {
  }
}
 8001b74:	bf00      	nop
 8001b76:	bf00      	nop
 8001b78:	3710      	adds	r7, #16
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bd80      	pop	{r7, pc}
 8001b7e:	bf00      	nop
 8001b80:	2000001c 	.word	0x2000001c

08001b84 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b84:	b480      	push	{r7}
 8001b86:	b085      	sub	sp, #20
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	f003 0307 	and.w	r3, r3, #7
 8001b92:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b94:	4b0c      	ldr	r3, [pc, #48]	; (8001bc8 <__NVIC_SetPriorityGrouping+0x44>)
 8001b96:	68db      	ldr	r3, [r3, #12]
 8001b98:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b9a:	68ba      	ldr	r2, [r7, #8]
 8001b9c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ba0:	4013      	ands	r3, r2
 8001ba2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ba8:	68bb      	ldr	r3, [r7, #8]
 8001baa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001bac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001bb0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001bb4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001bb6:	4a04      	ldr	r2, [pc, #16]	; (8001bc8 <__NVIC_SetPriorityGrouping+0x44>)
 8001bb8:	68bb      	ldr	r3, [r7, #8]
 8001bba:	60d3      	str	r3, [r2, #12]
}
 8001bbc:	bf00      	nop
 8001bbe:	3714      	adds	r7, #20
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc6:	4770      	bx	lr
 8001bc8:	e000ed00 	.word	0xe000ed00

08001bcc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001bcc:	b480      	push	{r7}
 8001bce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001bd0:	4b04      	ldr	r3, [pc, #16]	; (8001be4 <__NVIC_GetPriorityGrouping+0x18>)
 8001bd2:	68db      	ldr	r3, [r3, #12]
 8001bd4:	0a1b      	lsrs	r3, r3, #8
 8001bd6:	f003 0307 	and.w	r3, r3, #7
}
 8001bda:	4618      	mov	r0, r3
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be2:	4770      	bx	lr
 8001be4:	e000ed00 	.word	0xe000ed00

08001be8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001be8:	b480      	push	{r7}
 8001bea:	b083      	sub	sp, #12
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	4603      	mov	r3, r0
 8001bf0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bf2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	db0b      	blt.n	8001c12 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001bfa:	79fb      	ldrb	r3, [r7, #7]
 8001bfc:	f003 021f 	and.w	r2, r3, #31
 8001c00:	4907      	ldr	r1, [pc, #28]	; (8001c20 <__NVIC_EnableIRQ+0x38>)
 8001c02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c06:	095b      	lsrs	r3, r3, #5
 8001c08:	2001      	movs	r0, #1
 8001c0a:	fa00 f202 	lsl.w	r2, r0, r2
 8001c0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001c12:	bf00      	nop
 8001c14:	370c      	adds	r7, #12
 8001c16:	46bd      	mov	sp, r7
 8001c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1c:	4770      	bx	lr
 8001c1e:	bf00      	nop
 8001c20:	e000e100 	.word	0xe000e100

08001c24 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c24:	b480      	push	{r7}
 8001c26:	b083      	sub	sp, #12
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	6039      	str	r1, [r7, #0]
 8001c2e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	db0a      	blt.n	8001c4e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	b2da      	uxtb	r2, r3
 8001c3c:	490c      	ldr	r1, [pc, #48]	; (8001c70 <__NVIC_SetPriority+0x4c>)
 8001c3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c42:	0112      	lsls	r2, r2, #4
 8001c44:	b2d2      	uxtb	r2, r2
 8001c46:	440b      	add	r3, r1
 8001c48:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c4c:	e00a      	b.n	8001c64 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c4e:	683b      	ldr	r3, [r7, #0]
 8001c50:	b2da      	uxtb	r2, r3
 8001c52:	4908      	ldr	r1, [pc, #32]	; (8001c74 <__NVIC_SetPriority+0x50>)
 8001c54:	79fb      	ldrb	r3, [r7, #7]
 8001c56:	f003 030f 	and.w	r3, r3, #15
 8001c5a:	3b04      	subs	r3, #4
 8001c5c:	0112      	lsls	r2, r2, #4
 8001c5e:	b2d2      	uxtb	r2, r2
 8001c60:	440b      	add	r3, r1
 8001c62:	761a      	strb	r2, [r3, #24]
}
 8001c64:	bf00      	nop
 8001c66:	370c      	adds	r7, #12
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6e:	4770      	bx	lr
 8001c70:	e000e100 	.word	0xe000e100
 8001c74:	e000ed00 	.word	0xe000ed00

08001c78 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	b089      	sub	sp, #36	; 0x24
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	60f8      	str	r0, [r7, #12]
 8001c80:	60b9      	str	r1, [r7, #8]
 8001c82:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	f003 0307 	and.w	r3, r3, #7
 8001c8a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c8c:	69fb      	ldr	r3, [r7, #28]
 8001c8e:	f1c3 0307 	rsb	r3, r3, #7
 8001c92:	2b04      	cmp	r3, #4
 8001c94:	bf28      	it	cs
 8001c96:	2304      	movcs	r3, #4
 8001c98:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c9a:	69fb      	ldr	r3, [r7, #28]
 8001c9c:	3304      	adds	r3, #4
 8001c9e:	2b06      	cmp	r3, #6
 8001ca0:	d902      	bls.n	8001ca8 <NVIC_EncodePriority+0x30>
 8001ca2:	69fb      	ldr	r3, [r7, #28]
 8001ca4:	3b03      	subs	r3, #3
 8001ca6:	e000      	b.n	8001caa <NVIC_EncodePriority+0x32>
 8001ca8:	2300      	movs	r3, #0
 8001caa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001cb0:	69bb      	ldr	r3, [r7, #24]
 8001cb2:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb6:	43da      	mvns	r2, r3
 8001cb8:	68bb      	ldr	r3, [r7, #8]
 8001cba:	401a      	ands	r2, r3
 8001cbc:	697b      	ldr	r3, [r7, #20]
 8001cbe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001cc0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001cc4:	697b      	ldr	r3, [r7, #20]
 8001cc6:	fa01 f303 	lsl.w	r3, r1, r3
 8001cca:	43d9      	mvns	r1, r3
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cd0:	4313      	orrs	r3, r2
         );
}
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	3724      	adds	r7, #36	; 0x24
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cdc:	4770      	bx	lr
	...

08001ce0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b082      	sub	sp, #8
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	3b01      	subs	r3, #1
 8001cec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001cf0:	d301      	bcc.n	8001cf6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001cf2:	2301      	movs	r3, #1
 8001cf4:	e00f      	b.n	8001d16 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001cf6:	4a0a      	ldr	r2, [pc, #40]	; (8001d20 <SysTick_Config+0x40>)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	3b01      	subs	r3, #1
 8001cfc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001cfe:	210f      	movs	r1, #15
 8001d00:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001d04:	f7ff ff8e 	bl	8001c24 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d08:	4b05      	ldr	r3, [pc, #20]	; (8001d20 <SysTick_Config+0x40>)
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d0e:	4b04      	ldr	r3, [pc, #16]	; (8001d20 <SysTick_Config+0x40>)
 8001d10:	2207      	movs	r2, #7
 8001d12:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d14:	2300      	movs	r3, #0
}
 8001d16:	4618      	mov	r0, r3
 8001d18:	3708      	adds	r7, #8
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bd80      	pop	{r7, pc}
 8001d1e:	bf00      	nop
 8001d20:	e000e010 	.word	0xe000e010

08001d24 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b082      	sub	sp, #8
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d2c:	6878      	ldr	r0, [r7, #4]
 8001d2e:	f7ff ff29 	bl	8001b84 <__NVIC_SetPriorityGrouping>
}
 8001d32:	bf00      	nop
 8001d34:	3708      	adds	r7, #8
 8001d36:	46bd      	mov	sp, r7
 8001d38:	bd80      	pop	{r7, pc}

08001d3a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d3a:	b580      	push	{r7, lr}
 8001d3c:	b086      	sub	sp, #24
 8001d3e:	af00      	add	r7, sp, #0
 8001d40:	4603      	mov	r3, r0
 8001d42:	60b9      	str	r1, [r7, #8]
 8001d44:	607a      	str	r2, [r7, #4]
 8001d46:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001d48:	2300      	movs	r3, #0
 8001d4a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001d4c:	f7ff ff3e 	bl	8001bcc <__NVIC_GetPriorityGrouping>
 8001d50:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d52:	687a      	ldr	r2, [r7, #4]
 8001d54:	68b9      	ldr	r1, [r7, #8]
 8001d56:	6978      	ldr	r0, [r7, #20]
 8001d58:	f7ff ff8e 	bl	8001c78 <NVIC_EncodePriority>
 8001d5c:	4602      	mov	r2, r0
 8001d5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d62:	4611      	mov	r1, r2
 8001d64:	4618      	mov	r0, r3
 8001d66:	f7ff ff5d 	bl	8001c24 <__NVIC_SetPriority>
}
 8001d6a:	bf00      	nop
 8001d6c:	3718      	adds	r7, #24
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	bd80      	pop	{r7, pc}

08001d72 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d72:	b580      	push	{r7, lr}
 8001d74:	b082      	sub	sp, #8
 8001d76:	af00      	add	r7, sp, #0
 8001d78:	4603      	mov	r3, r0
 8001d7a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d80:	4618      	mov	r0, r3
 8001d82:	f7ff ff31 	bl	8001be8 <__NVIC_EnableIRQ>
}
 8001d86:	bf00      	nop
 8001d88:	3708      	adds	r7, #8
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	bd80      	pop	{r7, pc}

08001d8e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d8e:	b580      	push	{r7, lr}
 8001d90:	b082      	sub	sp, #8
 8001d92:	af00      	add	r7, sp, #0
 8001d94:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d96:	6878      	ldr	r0, [r7, #4]
 8001d98:	f7ff ffa2 	bl	8001ce0 <SysTick_Config>
 8001d9c:	4603      	mov	r3, r0
}
 8001d9e:	4618      	mov	r0, r3
 8001da0:	3708      	adds	r7, #8
 8001da2:	46bd      	mov	sp, r7
 8001da4:	bd80      	pop	{r7, pc}

08001da6 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8001da6:	b580      	push	{r7, lr}
 8001da8:	b082      	sub	sp, #8
 8001daa:	af00      	add	r7, sp, #0
 8001dac:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d101      	bne.n	8001db8 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8001db4:	2301      	movs	r3, #1
 8001db6:	e014      	b.n	8001de2 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	791b      	ldrb	r3, [r3, #4]
 8001dbc:	b2db      	uxtb	r3, r3
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d105      	bne.n	8001dce <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8001dc8:	6878      	ldr	r0, [r7, #4]
 8001dca:	f7ff fc7b 	bl	80016c4 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	2202      	movs	r2, #2
 8001dd2:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	2201      	movs	r2, #1
 8001dde:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8001de0:	2300      	movs	r3, #0
}
 8001de2:	4618      	mov	r0, r3
 8001de4:	3708      	adds	r7, #8
 8001de6:	46bd      	mov	sp, r7
 8001de8:	bd80      	pop	{r7, pc}

08001dea <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (when supported)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8001dea:	b480      	push	{r7}
 8001dec:	b083      	sub	sp, #12
 8001dee:	af00      	add	r7, sp, #0
 8001df0:	6078      	str	r0, [r7, #4]
 8001df2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	795b      	ldrb	r3, [r3, #5]
 8001df8:	2b01      	cmp	r3, #1
 8001dfa:	d101      	bne.n	8001e00 <HAL_DAC_Start+0x16>
 8001dfc:	2302      	movs	r3, #2
 8001dfe:	e03b      	b.n	8001e78 <HAL_DAC_Start+0x8e>
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	2201      	movs	r2, #1
 8001e04:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	2202      	movs	r2, #2
 8001e0a:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	6819      	ldr	r1, [r3, #0]
 8001e12:	683b      	ldr	r3, [r7, #0]
 8001e14:	f003 0310 	and.w	r3, r3, #16
 8001e18:	2201      	movs	r2, #1
 8001e1a:	409a      	lsls	r2, r3
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	430a      	orrs	r2, r1
 8001e22:	601a      	str	r2, [r3, #0]

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx                                     */

#if defined (STM32L431xx) || defined (STM32L432xx) || defined (STM32L433xx) || defined (STM32L442xx) || defined (STM32L443xx) || \
    defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || defined (STM32L496xx) || defined (STM32L4A6xx)
  if(Channel == DAC_CHANNEL_1)
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d10f      	bne.n	8001e4a <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_CR_TEN1)
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 8001e34:	2b04      	cmp	r3, #4
 8001e36:	d118      	bne.n	8001e6a <HAL_DAC_Start+0x80>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	685a      	ldr	r2, [r3, #4]
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f042 0201 	orr.w	r2, r2, #1
 8001e46:	605a      	str	r2, [r3, #4]
 8001e48:	e00f      	b.n	8001e6a <HAL_DAC_Start+0x80>
    }
  }
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == DAC_CR_TEN2)
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8001e54:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001e58:	d107      	bne.n	8001e6a <HAL_DAC_Start+0x80>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	685a      	ldr	r2, [r3, #4]
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f042 0202 	orr.w	r2, r2, #2
 8001e68:	605a      	str	r2, [r3, #4]
    /* Enable the selected DAC software conversion */
    SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
  }
#endif /* STM32L451xx STM32L452xx STM32L462xx */
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	2201      	movs	r2, #1
 8001e6e:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	2200      	movs	r2, #0
 8001e74:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001e76:	2300      	movs	r3, #0
}
 8001e78:	4618      	mov	r0, r3
 8001e7a:	370c      	adds	r7, #12
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e82:	4770      	bx	lr

08001e84 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b088      	sub	sp, #32
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	60f8      	str	r0, [r7, #12]
 8001e8c:	60b9      	str	r1, [r7, #8]
 8001e8e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 8001e90:	2300      	movs	r3, #0
 8001e92:	61fb      	str	r3, [r7, #28]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	795b      	ldrb	r3, [r3, #5]
 8001e98:	2b01      	cmp	r3, #1
 8001e9a:	d101      	bne.n	8001ea0 <HAL_DAC_ConfigChannel+0x1c>
 8001e9c:	2302      	movs	r3, #2
 8001e9e:	e107      	b.n	80020b0 <HAL_DAC_ConfigChannel+0x22c>
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	2201      	movs	r2, #1
 8001ea4:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	2202      	movs	r2, #2
 8001eaa:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8001eac:	68bb      	ldr	r3, [r7, #8]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	2b04      	cmp	r3, #4
 8001eb2:	d174      	bne.n	8001f9e <HAL_DAC_ConfigChannel+0x11a>
  /* Sample on old configuration */
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8001eb4:	f7ff fe36 	bl	8001b24 <HAL_GetTick>
 8001eb8:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d134      	bne.n	8001f2a <HAL_DAC_ConfigChannel+0xa6>
    {

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8001ec0:	e011      	b.n	8001ee6 <HAL_DAC_ConfigChannel+0x62>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8001ec2:	f7ff fe2f 	bl	8001b24 <HAL_GetTick>
 8001ec6:	4602      	mov	r2, r0
 8001ec8:	69fb      	ldr	r3, [r7, #28]
 8001eca:	1ad3      	subs	r3, r2, r3
 8001ecc:	2b01      	cmp	r3, #1
 8001ece:	d90a      	bls.n	8001ee6 <HAL_DAC_ConfigChannel+0x62>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	691b      	ldr	r3, [r3, #16]
 8001ed4:	f043 0208 	orr.w	r2, r3, #8
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	2203      	movs	r2, #3
 8001ee0:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8001ee2:	2303      	movs	r3, #3
 8001ee4:	e0e4      	b.n	80020b0 <HAL_DAC_ConfigChannel+0x22c>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001eec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d1e6      	bne.n	8001ec2 <HAL_DAC_ConfigChannel+0x3e>
        }
      }
      HAL_Delay(1);
 8001ef4:	2001      	movs	r0, #1
 8001ef6:	f7ff fe21 	bl	8001b3c <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	68ba      	ldr	r2, [r7, #8]
 8001f00:	6992      	ldr	r2, [r2, #24]
 8001f02:	641a      	str	r2, [r3, #64]	; 0x40
 8001f04:	e01e      	b.n	8001f44 <HAL_DAC_ConfigChannel+0xc0>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8001f06:	f7ff fe0d 	bl	8001b24 <HAL_GetTick>
 8001f0a:	4602      	mov	r2, r0
 8001f0c:	69fb      	ldr	r3, [r7, #28]
 8001f0e:	1ad3      	subs	r3, r2, r3
 8001f10:	2b01      	cmp	r3, #1
 8001f12:	d90a      	bls.n	8001f2a <HAL_DAC_ConfigChannel+0xa6>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	691b      	ldr	r3, [r3, #16]
 8001f18:	f043 0208 	orr.w	r2, r3, #8
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	2203      	movs	r2, #3
 8001f24:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8001f26:	2303      	movs	r3, #3
 8001f28:	e0c2      	b.n	80020b0 <HAL_DAC_ConfigChannel+0x22c>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	dbe8      	blt.n	8001f06 <HAL_DAC_ConfigChannel+0x82>
        }
      }
      HAL_Delay(1U);
 8001f34:	2001      	movs	r0, #1
 8001f36:	f7ff fe01 	bl	8001b3c <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	68ba      	ldr	r2, [r7, #8]
 8001f40:	6992      	ldr	r2, [r2, #24]
 8001f42:	645a      	str	r2, [r3, #68]	; 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	f003 0310 	and.w	r3, r3, #16
 8001f50:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8001f54:	fa01 f303 	lsl.w	r3, r1, r3
 8001f58:	43db      	mvns	r3, r3
 8001f5a:	ea02 0103 	and.w	r1, r2, r3
 8001f5e:	68bb      	ldr	r3, [r7, #8]
 8001f60:	69da      	ldr	r2, [r3, #28]
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	f003 0310 	and.w	r3, r3, #16
 8001f68:	409a      	lsls	r2, r3
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	430a      	orrs	r2, r1
 8001f70:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	f003 0310 	and.w	r3, r3, #16
 8001f7e:	21ff      	movs	r1, #255	; 0xff
 8001f80:	fa01 f303 	lsl.w	r3, r1, r3
 8001f84:	43db      	mvns	r3, r3
 8001f86:	ea02 0103 	and.w	r1, r2, r3
 8001f8a:	68bb      	ldr	r3, [r7, #8]
 8001f8c:	6a1a      	ldr	r2, [r3, #32]
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	f003 0310 	and.w	r3, r3, #16
 8001f94:	409a      	lsls	r2, r3
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	430a      	orrs	r2, r1
 8001f9c:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8001f9e:	68bb      	ldr	r3, [r7, #8]
 8001fa0:	691b      	ldr	r3, [r3, #16]
 8001fa2:	2b01      	cmp	r3, #1
 8001fa4:	d11d      	bne.n	8001fe2 <HAL_DAC_ConfigChannel+0x15e>
  /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fac:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	f003 0310 	and.w	r3, r3, #16
 8001fb4:	221f      	movs	r2, #31
 8001fb6:	fa02 f303 	lsl.w	r3, r2, r3
 8001fba:	43db      	mvns	r3, r3
 8001fbc:	69ba      	ldr	r2, [r7, #24]
 8001fbe:	4013      	ands	r3, r2
 8001fc0:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8001fc2:	68bb      	ldr	r3, [r7, #8]
 8001fc4:	695b      	ldr	r3, [r3, #20]
 8001fc6:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	f003 0310 	and.w	r3, r3, #16
 8001fce:	697a      	ldr	r2, [r7, #20]
 8001fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd4:	69ba      	ldr	r2, [r7, #24]
 8001fd6:	4313      	orrs	r3, r2
 8001fd8:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	69ba      	ldr	r2, [r7, #24]
 8001fe0:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fe8:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	f003 0310 	and.w	r3, r3, #16
 8001ff0:	2207      	movs	r2, #7
 8001ff2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff6:	43db      	mvns	r3, r3
 8001ff8:	69ba      	ldr	r2, [r7, #24]
 8001ffa:	4013      	ands	r3, r2
 8001ffc:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 8001ffe:	68bb      	ldr	r3, [r7, #8]
 8002000:	681a      	ldr	r2, [r3, #0]
 8002002:	68bb      	ldr	r3, [r7, #8]
 8002004:	689b      	ldr	r3, [r3, #8]
 8002006:	431a      	orrs	r2, r3
 8002008:	68bb      	ldr	r3, [r7, #8]
 800200a:	68db      	ldr	r3, [r3, #12]
 800200c:	4313      	orrs	r3, r2
 800200e:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	f003 0310 	and.w	r3, r3, #16
 8002016:	697a      	ldr	r2, [r7, #20]
 8002018:	fa02 f303 	lsl.w	r3, r2, r3
 800201c:	69ba      	ldr	r2, [r7, #24]
 800201e:	4313      	orrs	r3, r2
 8002020:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	69ba      	ldr	r2, [r7, #24]
 8002028:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	6819      	ldr	r1, [r3, #0]
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	f003 0310 	and.w	r3, r3, #16
 8002036:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800203a:	fa02 f303 	lsl.w	r3, r2, r3
 800203e:	43da      	mvns	r2, r3
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	400a      	ands	r2, r1
 8002046:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	f003 0310 	and.w	r3, r3, #16
 8002056:	f640 72fc 	movw	r2, #4092	; 0xffc
 800205a:	fa02 f303 	lsl.w	r3, r2, r3
 800205e:	43db      	mvns	r3, r3
 8002060:	69ba      	ldr	r2, [r7, #24]
 8002062:	4013      	ands	r3, r2
 8002064:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8002066:	68bb      	ldr	r3, [r7, #8]
 8002068:	685b      	ldr	r3, [r3, #4]
 800206a:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	f003 0310 	and.w	r3, r3, #16
 8002072:	697a      	ldr	r2, [r7, #20]
 8002074:	fa02 f303 	lsl.w	r3, r2, r3
 8002078:	69ba      	ldr	r2, [r7, #24]
 800207a:	4313      	orrs	r3, r2
 800207c:	61bb      	str	r3, [r7, #24]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	69ba      	ldr	r2, [r7, #24]
 8002084:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	6819      	ldr	r1, [r3, #0]
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	f003 0310 	and.w	r3, r3, #16
 8002092:	22c0      	movs	r2, #192	; 0xc0
 8002094:	fa02 f303 	lsl.w	r3, r2, r3
 8002098:	43da      	mvns	r2, r3
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	400a      	ands	r2, r1
 80020a0:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	2201      	movs	r2, #1
 80020a6:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	2200      	movs	r2, #0
 80020ac:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80020ae:	2300      	movs	r3, #0
}
 80020b0:	4618      	mov	r0, r3
 80020b2:	3720      	adds	r7, #32
 80020b4:	46bd      	mov	sp, r7
 80020b6:	bd80      	pop	{r7, pc}

080020b8 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80020b8:	b480      	push	{r7}
 80020ba:	b085      	sub	sp, #20
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80020c0:	2300      	movs	r3, #0
 80020c2:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80020ca:	b2db      	uxtb	r3, r3
 80020cc:	2b02      	cmp	r3, #2
 80020ce:	d008      	beq.n	80020e2 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	2204      	movs	r2, #4
 80020d4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	2200      	movs	r2, #0
 80020da:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80020de:	2301      	movs	r3, #1
 80020e0:	e022      	b.n	8002128 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	681a      	ldr	r2, [r3, #0]
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f022 020e 	bic.w	r2, r2, #14
 80020f0:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	681a      	ldr	r2, [r3, #0]
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f022 0201 	bic.w	r2, r2, #1
 8002100:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002106:	f003 021c 	and.w	r2, r3, #28
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800210e:	2101      	movs	r1, #1
 8002110:	fa01 f202 	lsl.w	r2, r1, r2
 8002114:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	2201      	movs	r2, #1
 800211a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	2200      	movs	r2, #0
 8002122:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8002126:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8002128:	4618      	mov	r0, r3
 800212a:	3714      	adds	r7, #20
 800212c:	46bd      	mov	sp, r7
 800212e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002132:	4770      	bx	lr

08002134 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	b084      	sub	sp, #16
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800213c:	2300      	movs	r3, #0
 800213e:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002146:	b2db      	uxtb	r3, r3
 8002148:	2b02      	cmp	r3, #2
 800214a:	d005      	beq.n	8002158 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	2204      	movs	r2, #4
 8002150:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8002152:	2301      	movs	r3, #1
 8002154:	73fb      	strb	r3, [r7, #15]
 8002156:	e029      	b.n	80021ac <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	681a      	ldr	r2, [r3, #0]
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f022 020e 	bic.w	r2, r2, #14
 8002166:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	681a      	ldr	r2, [r3, #0]
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f022 0201 	bic.w	r2, r2, #1
 8002176:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800217c:	f003 021c 	and.w	r2, r3, #28
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002184:	2101      	movs	r1, #1
 8002186:	fa01 f202 	lsl.w	r2, r1, r2
 800218a:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	2201      	movs	r2, #1
 8002190:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	2200      	movs	r2, #0
 8002198:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d003      	beq.n	80021ac <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021a8:	6878      	ldr	r0, [r7, #4]
 80021aa:	4798      	blx	r3
    }
  }
  return status;
 80021ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80021ae:	4618      	mov	r0, r3
 80021b0:	3710      	adds	r7, #16
 80021b2:	46bd      	mov	sp, r7
 80021b4:	bd80      	pop	{r7, pc}
	...

080021b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80021b8:	b480      	push	{r7}
 80021ba:	b087      	sub	sp, #28
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
 80021c0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80021c2:	2300      	movs	r3, #0
 80021c4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80021c6:	e17f      	b.n	80024c8 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	681a      	ldr	r2, [r3, #0]
 80021cc:	2101      	movs	r1, #1
 80021ce:	697b      	ldr	r3, [r7, #20]
 80021d0:	fa01 f303 	lsl.w	r3, r1, r3
 80021d4:	4013      	ands	r3, r2
 80021d6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	2b00      	cmp	r3, #0
 80021dc:	f000 8171 	beq.w	80024c2 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	685b      	ldr	r3, [r3, #4]
 80021e4:	2b01      	cmp	r3, #1
 80021e6:	d00b      	beq.n	8002200 <HAL_GPIO_Init+0x48>
 80021e8:	683b      	ldr	r3, [r7, #0]
 80021ea:	685b      	ldr	r3, [r3, #4]
 80021ec:	2b02      	cmp	r3, #2
 80021ee:	d007      	beq.n	8002200 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80021f4:	2b11      	cmp	r3, #17
 80021f6:	d003      	beq.n	8002200 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80021f8:	683b      	ldr	r3, [r7, #0]
 80021fa:	685b      	ldr	r3, [r3, #4]
 80021fc:	2b12      	cmp	r3, #18
 80021fe:	d130      	bne.n	8002262 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	689b      	ldr	r3, [r3, #8]
 8002204:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002206:	697b      	ldr	r3, [r7, #20]
 8002208:	005b      	lsls	r3, r3, #1
 800220a:	2203      	movs	r2, #3
 800220c:	fa02 f303 	lsl.w	r3, r2, r3
 8002210:	43db      	mvns	r3, r3
 8002212:	693a      	ldr	r2, [r7, #16]
 8002214:	4013      	ands	r3, r2
 8002216:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	68da      	ldr	r2, [r3, #12]
 800221c:	697b      	ldr	r3, [r7, #20]
 800221e:	005b      	lsls	r3, r3, #1
 8002220:	fa02 f303 	lsl.w	r3, r2, r3
 8002224:	693a      	ldr	r2, [r7, #16]
 8002226:	4313      	orrs	r3, r2
 8002228:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	693a      	ldr	r2, [r7, #16]
 800222e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	685b      	ldr	r3, [r3, #4]
 8002234:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002236:	2201      	movs	r2, #1
 8002238:	697b      	ldr	r3, [r7, #20]
 800223a:	fa02 f303 	lsl.w	r3, r2, r3
 800223e:	43db      	mvns	r3, r3
 8002240:	693a      	ldr	r2, [r7, #16]
 8002242:	4013      	ands	r3, r2
 8002244:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8002246:	683b      	ldr	r3, [r7, #0]
 8002248:	685b      	ldr	r3, [r3, #4]
 800224a:	091b      	lsrs	r3, r3, #4
 800224c:	f003 0201 	and.w	r2, r3, #1
 8002250:	697b      	ldr	r3, [r7, #20]
 8002252:	fa02 f303 	lsl.w	r3, r2, r3
 8002256:	693a      	ldr	r2, [r7, #16]
 8002258:	4313      	orrs	r3, r2
 800225a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	693a      	ldr	r2, [r7, #16]
 8002260:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8002262:	683b      	ldr	r3, [r7, #0]
 8002264:	685b      	ldr	r3, [r3, #4]
 8002266:	f003 0303 	and.w	r3, r3, #3
 800226a:	2b03      	cmp	r3, #3
 800226c:	d118      	bne.n	80022a0 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002272:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002274:	2201      	movs	r2, #1
 8002276:	697b      	ldr	r3, [r7, #20]
 8002278:	fa02 f303 	lsl.w	r3, r2, r3
 800227c:	43db      	mvns	r3, r3
 800227e:	693a      	ldr	r2, [r7, #16]
 8002280:	4013      	ands	r3, r2
 8002282:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	685b      	ldr	r3, [r3, #4]
 8002288:	08db      	lsrs	r3, r3, #3
 800228a:	f003 0201 	and.w	r2, r3, #1
 800228e:	697b      	ldr	r3, [r7, #20]
 8002290:	fa02 f303 	lsl.w	r3, r2, r3
 8002294:	693a      	ldr	r2, [r7, #16]
 8002296:	4313      	orrs	r3, r2
 8002298:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	693a      	ldr	r2, [r7, #16]
 800229e:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	68db      	ldr	r3, [r3, #12]
 80022a4:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80022a6:	697b      	ldr	r3, [r7, #20]
 80022a8:	005b      	lsls	r3, r3, #1
 80022aa:	2203      	movs	r2, #3
 80022ac:	fa02 f303 	lsl.w	r3, r2, r3
 80022b0:	43db      	mvns	r3, r3
 80022b2:	693a      	ldr	r2, [r7, #16]
 80022b4:	4013      	ands	r3, r2
 80022b6:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	689a      	ldr	r2, [r3, #8]
 80022bc:	697b      	ldr	r3, [r7, #20]
 80022be:	005b      	lsls	r3, r3, #1
 80022c0:	fa02 f303 	lsl.w	r3, r2, r3
 80022c4:	693a      	ldr	r2, [r7, #16]
 80022c6:	4313      	orrs	r3, r2
 80022c8:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	693a      	ldr	r2, [r7, #16]
 80022ce:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	685b      	ldr	r3, [r3, #4]
 80022d4:	2b02      	cmp	r3, #2
 80022d6:	d003      	beq.n	80022e0 <HAL_GPIO_Init+0x128>
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	685b      	ldr	r3, [r3, #4]
 80022dc:	2b12      	cmp	r3, #18
 80022de:	d123      	bne.n	8002328 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80022e0:	697b      	ldr	r3, [r7, #20]
 80022e2:	08da      	lsrs	r2, r3, #3
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	3208      	adds	r2, #8
 80022e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80022ec:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80022ee:	697b      	ldr	r3, [r7, #20]
 80022f0:	f003 0307 	and.w	r3, r3, #7
 80022f4:	009b      	lsls	r3, r3, #2
 80022f6:	220f      	movs	r2, #15
 80022f8:	fa02 f303 	lsl.w	r3, r2, r3
 80022fc:	43db      	mvns	r3, r3
 80022fe:	693a      	ldr	r2, [r7, #16]
 8002300:	4013      	ands	r3, r2
 8002302:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	691a      	ldr	r2, [r3, #16]
 8002308:	697b      	ldr	r3, [r7, #20]
 800230a:	f003 0307 	and.w	r3, r3, #7
 800230e:	009b      	lsls	r3, r3, #2
 8002310:	fa02 f303 	lsl.w	r3, r2, r3
 8002314:	693a      	ldr	r2, [r7, #16]
 8002316:	4313      	orrs	r3, r2
 8002318:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800231a:	697b      	ldr	r3, [r7, #20]
 800231c:	08da      	lsrs	r2, r3, #3
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	3208      	adds	r2, #8
 8002322:	6939      	ldr	r1, [r7, #16]
 8002324:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800232e:	697b      	ldr	r3, [r7, #20]
 8002330:	005b      	lsls	r3, r3, #1
 8002332:	2203      	movs	r2, #3
 8002334:	fa02 f303 	lsl.w	r3, r2, r3
 8002338:	43db      	mvns	r3, r3
 800233a:	693a      	ldr	r2, [r7, #16]
 800233c:	4013      	ands	r3, r2
 800233e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	685b      	ldr	r3, [r3, #4]
 8002344:	f003 0203 	and.w	r2, r3, #3
 8002348:	697b      	ldr	r3, [r7, #20]
 800234a:	005b      	lsls	r3, r3, #1
 800234c:	fa02 f303 	lsl.w	r3, r2, r3
 8002350:	693a      	ldr	r2, [r7, #16]
 8002352:	4313      	orrs	r3, r2
 8002354:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	693a      	ldr	r2, [r7, #16]
 800235a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	685b      	ldr	r3, [r3, #4]
 8002360:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002364:	2b00      	cmp	r3, #0
 8002366:	f000 80ac 	beq.w	80024c2 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800236a:	4b5f      	ldr	r3, [pc, #380]	; (80024e8 <HAL_GPIO_Init+0x330>)
 800236c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800236e:	4a5e      	ldr	r2, [pc, #376]	; (80024e8 <HAL_GPIO_Init+0x330>)
 8002370:	f043 0301 	orr.w	r3, r3, #1
 8002374:	6613      	str	r3, [r2, #96]	; 0x60
 8002376:	4b5c      	ldr	r3, [pc, #368]	; (80024e8 <HAL_GPIO_Init+0x330>)
 8002378:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800237a:	f003 0301 	and.w	r3, r3, #1
 800237e:	60bb      	str	r3, [r7, #8]
 8002380:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002382:	4a5a      	ldr	r2, [pc, #360]	; (80024ec <HAL_GPIO_Init+0x334>)
 8002384:	697b      	ldr	r3, [r7, #20]
 8002386:	089b      	lsrs	r3, r3, #2
 8002388:	3302      	adds	r3, #2
 800238a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800238e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002390:	697b      	ldr	r3, [r7, #20]
 8002392:	f003 0303 	and.w	r3, r3, #3
 8002396:	009b      	lsls	r3, r3, #2
 8002398:	220f      	movs	r2, #15
 800239a:	fa02 f303 	lsl.w	r3, r2, r3
 800239e:	43db      	mvns	r3, r3
 80023a0:	693a      	ldr	r2, [r7, #16]
 80023a2:	4013      	ands	r3, r2
 80023a4:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80023ac:	d025      	beq.n	80023fa <HAL_GPIO_Init+0x242>
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	4a4f      	ldr	r2, [pc, #316]	; (80024f0 <HAL_GPIO_Init+0x338>)
 80023b2:	4293      	cmp	r3, r2
 80023b4:	d01f      	beq.n	80023f6 <HAL_GPIO_Init+0x23e>
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	4a4e      	ldr	r2, [pc, #312]	; (80024f4 <HAL_GPIO_Init+0x33c>)
 80023ba:	4293      	cmp	r3, r2
 80023bc:	d019      	beq.n	80023f2 <HAL_GPIO_Init+0x23a>
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	4a4d      	ldr	r2, [pc, #308]	; (80024f8 <HAL_GPIO_Init+0x340>)
 80023c2:	4293      	cmp	r3, r2
 80023c4:	d013      	beq.n	80023ee <HAL_GPIO_Init+0x236>
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	4a4c      	ldr	r2, [pc, #304]	; (80024fc <HAL_GPIO_Init+0x344>)
 80023ca:	4293      	cmp	r3, r2
 80023cc:	d00d      	beq.n	80023ea <HAL_GPIO_Init+0x232>
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	4a4b      	ldr	r2, [pc, #300]	; (8002500 <HAL_GPIO_Init+0x348>)
 80023d2:	4293      	cmp	r3, r2
 80023d4:	d007      	beq.n	80023e6 <HAL_GPIO_Init+0x22e>
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	4a4a      	ldr	r2, [pc, #296]	; (8002504 <HAL_GPIO_Init+0x34c>)
 80023da:	4293      	cmp	r3, r2
 80023dc:	d101      	bne.n	80023e2 <HAL_GPIO_Init+0x22a>
 80023de:	2306      	movs	r3, #6
 80023e0:	e00c      	b.n	80023fc <HAL_GPIO_Init+0x244>
 80023e2:	2307      	movs	r3, #7
 80023e4:	e00a      	b.n	80023fc <HAL_GPIO_Init+0x244>
 80023e6:	2305      	movs	r3, #5
 80023e8:	e008      	b.n	80023fc <HAL_GPIO_Init+0x244>
 80023ea:	2304      	movs	r3, #4
 80023ec:	e006      	b.n	80023fc <HAL_GPIO_Init+0x244>
 80023ee:	2303      	movs	r3, #3
 80023f0:	e004      	b.n	80023fc <HAL_GPIO_Init+0x244>
 80023f2:	2302      	movs	r3, #2
 80023f4:	e002      	b.n	80023fc <HAL_GPIO_Init+0x244>
 80023f6:	2301      	movs	r3, #1
 80023f8:	e000      	b.n	80023fc <HAL_GPIO_Init+0x244>
 80023fa:	2300      	movs	r3, #0
 80023fc:	697a      	ldr	r2, [r7, #20]
 80023fe:	f002 0203 	and.w	r2, r2, #3
 8002402:	0092      	lsls	r2, r2, #2
 8002404:	4093      	lsls	r3, r2
 8002406:	693a      	ldr	r2, [r7, #16]
 8002408:	4313      	orrs	r3, r2
 800240a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800240c:	4937      	ldr	r1, [pc, #220]	; (80024ec <HAL_GPIO_Init+0x334>)
 800240e:	697b      	ldr	r3, [r7, #20]
 8002410:	089b      	lsrs	r3, r3, #2
 8002412:	3302      	adds	r3, #2
 8002414:	693a      	ldr	r2, [r7, #16]
 8002416:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800241a:	4b3b      	ldr	r3, [pc, #236]	; (8002508 <HAL_GPIO_Init+0x350>)
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	43db      	mvns	r3, r3
 8002424:	693a      	ldr	r2, [r7, #16]
 8002426:	4013      	ands	r3, r2
 8002428:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	685b      	ldr	r3, [r3, #4]
 800242e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002432:	2b00      	cmp	r3, #0
 8002434:	d003      	beq.n	800243e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002436:	693a      	ldr	r2, [r7, #16]
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	4313      	orrs	r3, r2
 800243c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800243e:	4a32      	ldr	r2, [pc, #200]	; (8002508 <HAL_GPIO_Init+0x350>)
 8002440:	693b      	ldr	r3, [r7, #16]
 8002442:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8002444:	4b30      	ldr	r3, [pc, #192]	; (8002508 <HAL_GPIO_Init+0x350>)
 8002446:	685b      	ldr	r3, [r3, #4]
 8002448:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	43db      	mvns	r3, r3
 800244e:	693a      	ldr	r2, [r7, #16]
 8002450:	4013      	ands	r3, r2
 8002452:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	685b      	ldr	r3, [r3, #4]
 8002458:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800245c:	2b00      	cmp	r3, #0
 800245e:	d003      	beq.n	8002468 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002460:	693a      	ldr	r2, [r7, #16]
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	4313      	orrs	r3, r2
 8002466:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002468:	4a27      	ldr	r2, [pc, #156]	; (8002508 <HAL_GPIO_Init+0x350>)
 800246a:	693b      	ldr	r3, [r7, #16]
 800246c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800246e:	4b26      	ldr	r3, [pc, #152]	; (8002508 <HAL_GPIO_Init+0x350>)
 8002470:	689b      	ldr	r3, [r3, #8]
 8002472:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	43db      	mvns	r3, r3
 8002478:	693a      	ldr	r2, [r7, #16]
 800247a:	4013      	ands	r3, r2
 800247c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	685b      	ldr	r3, [r3, #4]
 8002482:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002486:	2b00      	cmp	r3, #0
 8002488:	d003      	beq.n	8002492 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800248a:	693a      	ldr	r2, [r7, #16]
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	4313      	orrs	r3, r2
 8002490:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002492:	4a1d      	ldr	r2, [pc, #116]	; (8002508 <HAL_GPIO_Init+0x350>)
 8002494:	693b      	ldr	r3, [r7, #16]
 8002496:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002498:	4b1b      	ldr	r3, [pc, #108]	; (8002508 <HAL_GPIO_Init+0x350>)
 800249a:	68db      	ldr	r3, [r3, #12]
 800249c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	43db      	mvns	r3, r3
 80024a2:	693a      	ldr	r2, [r7, #16]
 80024a4:	4013      	ands	r3, r2
 80024a6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	685b      	ldr	r3, [r3, #4]
 80024ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d003      	beq.n	80024bc <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80024b4:	693a      	ldr	r2, [r7, #16]
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	4313      	orrs	r3, r2
 80024ba:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80024bc:	4a12      	ldr	r2, [pc, #72]	; (8002508 <HAL_GPIO_Init+0x350>)
 80024be:	693b      	ldr	r3, [r7, #16]
 80024c0:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80024c2:	697b      	ldr	r3, [r7, #20]
 80024c4:	3301      	adds	r3, #1
 80024c6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	681a      	ldr	r2, [r3, #0]
 80024cc:	697b      	ldr	r3, [r7, #20]
 80024ce:	fa22 f303 	lsr.w	r3, r2, r3
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	f47f ae78 	bne.w	80021c8 <HAL_GPIO_Init+0x10>
  }
}
 80024d8:	bf00      	nop
 80024da:	bf00      	nop
 80024dc:	371c      	adds	r7, #28
 80024de:	46bd      	mov	sp, r7
 80024e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e4:	4770      	bx	lr
 80024e6:	bf00      	nop
 80024e8:	40021000 	.word	0x40021000
 80024ec:	40010000 	.word	0x40010000
 80024f0:	48000400 	.word	0x48000400
 80024f4:	48000800 	.word	0x48000800
 80024f8:	48000c00 	.word	0x48000c00
 80024fc:	48001000 	.word	0x48001000
 8002500:	48001400 	.word	0x48001400
 8002504:	48001800 	.word	0x48001800
 8002508:	40010400 	.word	0x40010400

0800250c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800250c:	b480      	push	{r7}
 800250e:	b083      	sub	sp, #12
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
 8002514:	460b      	mov	r3, r1
 8002516:	807b      	strh	r3, [r7, #2]
 8002518:	4613      	mov	r3, r2
 800251a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800251c:	787b      	ldrb	r3, [r7, #1]
 800251e:	2b00      	cmp	r3, #0
 8002520:	d003      	beq.n	800252a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002522:	887a      	ldrh	r2, [r7, #2]
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002528:	e002      	b.n	8002530 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800252a:	887a      	ldrh	r2, [r7, #2]
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002530:	bf00      	nop
 8002532:	370c      	adds	r7, #12
 8002534:	46bd      	mov	sp, r7
 8002536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253a:	4770      	bx	lr

0800253c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800253c:	b480      	push	{r7}
 800253e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002540:	4b04      	ldr	r3, [pc, #16]	; (8002554 <HAL_PWREx_GetVoltageRange+0x18>)
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002548:	4618      	mov	r0, r3
 800254a:	46bd      	mov	sp, r7
 800254c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002550:	4770      	bx	lr
 8002552:	bf00      	nop
 8002554:	40007000 	.word	0x40007000

08002558 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002558:	b480      	push	{r7}
 800255a:	b085      	sub	sp, #20
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002566:	d130      	bne.n	80025ca <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002568:	4b23      	ldr	r3, [pc, #140]	; (80025f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002570:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002574:	d038      	beq.n	80025e8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002576:	4b20      	ldr	r3, [pc, #128]	; (80025f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800257e:	4a1e      	ldr	r2, [pc, #120]	; (80025f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002580:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002584:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002586:	4b1d      	ldr	r3, [pc, #116]	; (80025fc <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	2232      	movs	r2, #50	; 0x32
 800258c:	fb02 f303 	mul.w	r3, r2, r3
 8002590:	4a1b      	ldr	r2, [pc, #108]	; (8002600 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002592:	fba2 2303 	umull	r2, r3, r2, r3
 8002596:	0c9b      	lsrs	r3, r3, #18
 8002598:	3301      	adds	r3, #1
 800259a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800259c:	e002      	b.n	80025a4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	3b01      	subs	r3, #1
 80025a2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80025a4:	4b14      	ldr	r3, [pc, #80]	; (80025f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80025a6:	695b      	ldr	r3, [r3, #20]
 80025a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80025b0:	d102      	bne.n	80025b8 <HAL_PWREx_ControlVoltageScaling+0x60>
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d1f2      	bne.n	800259e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80025b8:	4b0f      	ldr	r3, [pc, #60]	; (80025f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80025ba:	695b      	ldr	r3, [r3, #20]
 80025bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80025c4:	d110      	bne.n	80025e8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80025c6:	2303      	movs	r3, #3
 80025c8:	e00f      	b.n	80025ea <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80025ca:	4b0b      	ldr	r3, [pc, #44]	; (80025f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80025d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80025d6:	d007      	beq.n	80025e8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80025d8:	4b07      	ldr	r3, [pc, #28]	; (80025f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80025e0:	4a05      	ldr	r2, [pc, #20]	; (80025f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80025e2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80025e6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80025e8:	2300      	movs	r3, #0
}
 80025ea:	4618      	mov	r0, r3
 80025ec:	3714      	adds	r7, #20
 80025ee:	46bd      	mov	sp, r7
 80025f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f4:	4770      	bx	lr
 80025f6:	bf00      	nop
 80025f8:	40007000 	.word	0x40007000
 80025fc:	20000014 	.word	0x20000014
 8002600:	431bde83 	.word	0x431bde83

08002604 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	b088      	sub	sp, #32
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	2b00      	cmp	r3, #0
 8002610:	d101      	bne.n	8002616 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002612:	2301      	movs	r3, #1
 8002614:	e3d4      	b.n	8002dc0 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002616:	4ba1      	ldr	r3, [pc, #644]	; (800289c <HAL_RCC_OscConfig+0x298>)
 8002618:	689b      	ldr	r3, [r3, #8]
 800261a:	f003 030c 	and.w	r3, r3, #12
 800261e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002620:	4b9e      	ldr	r3, [pc, #632]	; (800289c <HAL_RCC_OscConfig+0x298>)
 8002622:	68db      	ldr	r3, [r3, #12]
 8002624:	f003 0303 	and.w	r3, r3, #3
 8002628:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f003 0310 	and.w	r3, r3, #16
 8002632:	2b00      	cmp	r3, #0
 8002634:	f000 80e4 	beq.w	8002800 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002638:	69bb      	ldr	r3, [r7, #24]
 800263a:	2b00      	cmp	r3, #0
 800263c:	d007      	beq.n	800264e <HAL_RCC_OscConfig+0x4a>
 800263e:	69bb      	ldr	r3, [r7, #24]
 8002640:	2b0c      	cmp	r3, #12
 8002642:	f040 808b 	bne.w	800275c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002646:	697b      	ldr	r3, [r7, #20]
 8002648:	2b01      	cmp	r3, #1
 800264a:	f040 8087 	bne.w	800275c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800264e:	4b93      	ldr	r3, [pc, #588]	; (800289c <HAL_RCC_OscConfig+0x298>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f003 0302 	and.w	r3, r3, #2
 8002656:	2b00      	cmp	r3, #0
 8002658:	d005      	beq.n	8002666 <HAL_RCC_OscConfig+0x62>
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	699b      	ldr	r3, [r3, #24]
 800265e:	2b00      	cmp	r3, #0
 8002660:	d101      	bne.n	8002666 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002662:	2301      	movs	r3, #1
 8002664:	e3ac      	b.n	8002dc0 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	6a1a      	ldr	r2, [r3, #32]
 800266a:	4b8c      	ldr	r3, [pc, #560]	; (800289c <HAL_RCC_OscConfig+0x298>)
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f003 0308 	and.w	r3, r3, #8
 8002672:	2b00      	cmp	r3, #0
 8002674:	d004      	beq.n	8002680 <HAL_RCC_OscConfig+0x7c>
 8002676:	4b89      	ldr	r3, [pc, #548]	; (800289c <HAL_RCC_OscConfig+0x298>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800267e:	e005      	b.n	800268c <HAL_RCC_OscConfig+0x88>
 8002680:	4b86      	ldr	r3, [pc, #536]	; (800289c <HAL_RCC_OscConfig+0x298>)
 8002682:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002686:	091b      	lsrs	r3, r3, #4
 8002688:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800268c:	4293      	cmp	r3, r2
 800268e:	d223      	bcs.n	80026d8 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	6a1b      	ldr	r3, [r3, #32]
 8002694:	4618      	mov	r0, r3
 8002696:	f000 fd41 	bl	800311c <RCC_SetFlashLatencyFromMSIRange>
 800269a:	4603      	mov	r3, r0
 800269c:	2b00      	cmp	r3, #0
 800269e:	d001      	beq.n	80026a4 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80026a0:	2301      	movs	r3, #1
 80026a2:	e38d      	b.n	8002dc0 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80026a4:	4b7d      	ldr	r3, [pc, #500]	; (800289c <HAL_RCC_OscConfig+0x298>)
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	4a7c      	ldr	r2, [pc, #496]	; (800289c <HAL_RCC_OscConfig+0x298>)
 80026aa:	f043 0308 	orr.w	r3, r3, #8
 80026ae:	6013      	str	r3, [r2, #0]
 80026b0:	4b7a      	ldr	r3, [pc, #488]	; (800289c <HAL_RCC_OscConfig+0x298>)
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	6a1b      	ldr	r3, [r3, #32]
 80026bc:	4977      	ldr	r1, [pc, #476]	; (800289c <HAL_RCC_OscConfig+0x298>)
 80026be:	4313      	orrs	r3, r2
 80026c0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80026c2:	4b76      	ldr	r3, [pc, #472]	; (800289c <HAL_RCC_OscConfig+0x298>)
 80026c4:	685b      	ldr	r3, [r3, #4]
 80026c6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	69db      	ldr	r3, [r3, #28]
 80026ce:	021b      	lsls	r3, r3, #8
 80026d0:	4972      	ldr	r1, [pc, #456]	; (800289c <HAL_RCC_OscConfig+0x298>)
 80026d2:	4313      	orrs	r3, r2
 80026d4:	604b      	str	r3, [r1, #4]
 80026d6:	e025      	b.n	8002724 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80026d8:	4b70      	ldr	r3, [pc, #448]	; (800289c <HAL_RCC_OscConfig+0x298>)
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	4a6f      	ldr	r2, [pc, #444]	; (800289c <HAL_RCC_OscConfig+0x298>)
 80026de:	f043 0308 	orr.w	r3, r3, #8
 80026e2:	6013      	str	r3, [r2, #0]
 80026e4:	4b6d      	ldr	r3, [pc, #436]	; (800289c <HAL_RCC_OscConfig+0x298>)
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	6a1b      	ldr	r3, [r3, #32]
 80026f0:	496a      	ldr	r1, [pc, #424]	; (800289c <HAL_RCC_OscConfig+0x298>)
 80026f2:	4313      	orrs	r3, r2
 80026f4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80026f6:	4b69      	ldr	r3, [pc, #420]	; (800289c <HAL_RCC_OscConfig+0x298>)
 80026f8:	685b      	ldr	r3, [r3, #4]
 80026fa:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	69db      	ldr	r3, [r3, #28]
 8002702:	021b      	lsls	r3, r3, #8
 8002704:	4965      	ldr	r1, [pc, #404]	; (800289c <HAL_RCC_OscConfig+0x298>)
 8002706:	4313      	orrs	r3, r2
 8002708:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800270a:	69bb      	ldr	r3, [r7, #24]
 800270c:	2b00      	cmp	r3, #0
 800270e:	d109      	bne.n	8002724 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	6a1b      	ldr	r3, [r3, #32]
 8002714:	4618      	mov	r0, r3
 8002716:	f000 fd01 	bl	800311c <RCC_SetFlashLatencyFromMSIRange>
 800271a:	4603      	mov	r3, r0
 800271c:	2b00      	cmp	r3, #0
 800271e:	d001      	beq.n	8002724 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002720:	2301      	movs	r3, #1
 8002722:	e34d      	b.n	8002dc0 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002724:	f000 fc36 	bl	8002f94 <HAL_RCC_GetSysClockFreq>
 8002728:	4602      	mov	r2, r0
 800272a:	4b5c      	ldr	r3, [pc, #368]	; (800289c <HAL_RCC_OscConfig+0x298>)
 800272c:	689b      	ldr	r3, [r3, #8]
 800272e:	091b      	lsrs	r3, r3, #4
 8002730:	f003 030f 	and.w	r3, r3, #15
 8002734:	495a      	ldr	r1, [pc, #360]	; (80028a0 <HAL_RCC_OscConfig+0x29c>)
 8002736:	5ccb      	ldrb	r3, [r1, r3]
 8002738:	f003 031f 	and.w	r3, r3, #31
 800273c:	fa22 f303 	lsr.w	r3, r2, r3
 8002740:	4a58      	ldr	r2, [pc, #352]	; (80028a4 <HAL_RCC_OscConfig+0x2a0>)
 8002742:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002744:	4b58      	ldr	r3, [pc, #352]	; (80028a8 <HAL_RCC_OscConfig+0x2a4>)
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	4618      	mov	r0, r3
 800274a:	f7ff f99b 	bl	8001a84 <HAL_InitTick>
 800274e:	4603      	mov	r3, r0
 8002750:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002752:	7bfb      	ldrb	r3, [r7, #15]
 8002754:	2b00      	cmp	r3, #0
 8002756:	d052      	beq.n	80027fe <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002758:	7bfb      	ldrb	r3, [r7, #15]
 800275a:	e331      	b.n	8002dc0 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	699b      	ldr	r3, [r3, #24]
 8002760:	2b00      	cmp	r3, #0
 8002762:	d032      	beq.n	80027ca <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002764:	4b4d      	ldr	r3, [pc, #308]	; (800289c <HAL_RCC_OscConfig+0x298>)
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	4a4c      	ldr	r2, [pc, #304]	; (800289c <HAL_RCC_OscConfig+0x298>)
 800276a:	f043 0301 	orr.w	r3, r3, #1
 800276e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002770:	f7ff f9d8 	bl	8001b24 <HAL_GetTick>
 8002774:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002776:	e008      	b.n	800278a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002778:	f7ff f9d4 	bl	8001b24 <HAL_GetTick>
 800277c:	4602      	mov	r2, r0
 800277e:	693b      	ldr	r3, [r7, #16]
 8002780:	1ad3      	subs	r3, r2, r3
 8002782:	2b02      	cmp	r3, #2
 8002784:	d901      	bls.n	800278a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002786:	2303      	movs	r3, #3
 8002788:	e31a      	b.n	8002dc0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800278a:	4b44      	ldr	r3, [pc, #272]	; (800289c <HAL_RCC_OscConfig+0x298>)
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f003 0302 	and.w	r3, r3, #2
 8002792:	2b00      	cmp	r3, #0
 8002794:	d0f0      	beq.n	8002778 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002796:	4b41      	ldr	r3, [pc, #260]	; (800289c <HAL_RCC_OscConfig+0x298>)
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	4a40      	ldr	r2, [pc, #256]	; (800289c <HAL_RCC_OscConfig+0x298>)
 800279c:	f043 0308 	orr.w	r3, r3, #8
 80027a0:	6013      	str	r3, [r2, #0]
 80027a2:	4b3e      	ldr	r3, [pc, #248]	; (800289c <HAL_RCC_OscConfig+0x298>)
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	6a1b      	ldr	r3, [r3, #32]
 80027ae:	493b      	ldr	r1, [pc, #236]	; (800289c <HAL_RCC_OscConfig+0x298>)
 80027b0:	4313      	orrs	r3, r2
 80027b2:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80027b4:	4b39      	ldr	r3, [pc, #228]	; (800289c <HAL_RCC_OscConfig+0x298>)
 80027b6:	685b      	ldr	r3, [r3, #4]
 80027b8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	69db      	ldr	r3, [r3, #28]
 80027c0:	021b      	lsls	r3, r3, #8
 80027c2:	4936      	ldr	r1, [pc, #216]	; (800289c <HAL_RCC_OscConfig+0x298>)
 80027c4:	4313      	orrs	r3, r2
 80027c6:	604b      	str	r3, [r1, #4]
 80027c8:	e01a      	b.n	8002800 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80027ca:	4b34      	ldr	r3, [pc, #208]	; (800289c <HAL_RCC_OscConfig+0x298>)
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	4a33      	ldr	r2, [pc, #204]	; (800289c <HAL_RCC_OscConfig+0x298>)
 80027d0:	f023 0301 	bic.w	r3, r3, #1
 80027d4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80027d6:	f7ff f9a5 	bl	8001b24 <HAL_GetTick>
 80027da:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80027dc:	e008      	b.n	80027f0 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80027de:	f7ff f9a1 	bl	8001b24 <HAL_GetTick>
 80027e2:	4602      	mov	r2, r0
 80027e4:	693b      	ldr	r3, [r7, #16]
 80027e6:	1ad3      	subs	r3, r2, r3
 80027e8:	2b02      	cmp	r3, #2
 80027ea:	d901      	bls.n	80027f0 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80027ec:	2303      	movs	r3, #3
 80027ee:	e2e7      	b.n	8002dc0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80027f0:	4b2a      	ldr	r3, [pc, #168]	; (800289c <HAL_RCC_OscConfig+0x298>)
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f003 0302 	and.w	r3, r3, #2
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d1f0      	bne.n	80027de <HAL_RCC_OscConfig+0x1da>
 80027fc:	e000      	b.n	8002800 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80027fe:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f003 0301 	and.w	r3, r3, #1
 8002808:	2b00      	cmp	r3, #0
 800280a:	d074      	beq.n	80028f6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800280c:	69bb      	ldr	r3, [r7, #24]
 800280e:	2b08      	cmp	r3, #8
 8002810:	d005      	beq.n	800281e <HAL_RCC_OscConfig+0x21a>
 8002812:	69bb      	ldr	r3, [r7, #24]
 8002814:	2b0c      	cmp	r3, #12
 8002816:	d10e      	bne.n	8002836 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002818:	697b      	ldr	r3, [r7, #20]
 800281a:	2b03      	cmp	r3, #3
 800281c:	d10b      	bne.n	8002836 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800281e:	4b1f      	ldr	r3, [pc, #124]	; (800289c <HAL_RCC_OscConfig+0x298>)
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002826:	2b00      	cmp	r3, #0
 8002828:	d064      	beq.n	80028f4 <HAL_RCC_OscConfig+0x2f0>
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	685b      	ldr	r3, [r3, #4]
 800282e:	2b00      	cmp	r3, #0
 8002830:	d160      	bne.n	80028f4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002832:	2301      	movs	r3, #1
 8002834:	e2c4      	b.n	8002dc0 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	685b      	ldr	r3, [r3, #4]
 800283a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800283e:	d106      	bne.n	800284e <HAL_RCC_OscConfig+0x24a>
 8002840:	4b16      	ldr	r3, [pc, #88]	; (800289c <HAL_RCC_OscConfig+0x298>)
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	4a15      	ldr	r2, [pc, #84]	; (800289c <HAL_RCC_OscConfig+0x298>)
 8002846:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800284a:	6013      	str	r3, [r2, #0]
 800284c:	e01d      	b.n	800288a <HAL_RCC_OscConfig+0x286>
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	685b      	ldr	r3, [r3, #4]
 8002852:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002856:	d10c      	bne.n	8002872 <HAL_RCC_OscConfig+0x26e>
 8002858:	4b10      	ldr	r3, [pc, #64]	; (800289c <HAL_RCC_OscConfig+0x298>)
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	4a0f      	ldr	r2, [pc, #60]	; (800289c <HAL_RCC_OscConfig+0x298>)
 800285e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002862:	6013      	str	r3, [r2, #0]
 8002864:	4b0d      	ldr	r3, [pc, #52]	; (800289c <HAL_RCC_OscConfig+0x298>)
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	4a0c      	ldr	r2, [pc, #48]	; (800289c <HAL_RCC_OscConfig+0x298>)
 800286a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800286e:	6013      	str	r3, [r2, #0]
 8002870:	e00b      	b.n	800288a <HAL_RCC_OscConfig+0x286>
 8002872:	4b0a      	ldr	r3, [pc, #40]	; (800289c <HAL_RCC_OscConfig+0x298>)
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	4a09      	ldr	r2, [pc, #36]	; (800289c <HAL_RCC_OscConfig+0x298>)
 8002878:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800287c:	6013      	str	r3, [r2, #0]
 800287e:	4b07      	ldr	r3, [pc, #28]	; (800289c <HAL_RCC_OscConfig+0x298>)
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	4a06      	ldr	r2, [pc, #24]	; (800289c <HAL_RCC_OscConfig+0x298>)
 8002884:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002888:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	685b      	ldr	r3, [r3, #4]
 800288e:	2b00      	cmp	r3, #0
 8002890:	d01c      	beq.n	80028cc <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002892:	f7ff f947 	bl	8001b24 <HAL_GetTick>
 8002896:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002898:	e011      	b.n	80028be <HAL_RCC_OscConfig+0x2ba>
 800289a:	bf00      	nop
 800289c:	40021000 	.word	0x40021000
 80028a0:	080057a4 	.word	0x080057a4
 80028a4:	20000014 	.word	0x20000014
 80028a8:	20000018 	.word	0x20000018
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80028ac:	f7ff f93a 	bl	8001b24 <HAL_GetTick>
 80028b0:	4602      	mov	r2, r0
 80028b2:	693b      	ldr	r3, [r7, #16]
 80028b4:	1ad3      	subs	r3, r2, r3
 80028b6:	2b64      	cmp	r3, #100	; 0x64
 80028b8:	d901      	bls.n	80028be <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80028ba:	2303      	movs	r3, #3
 80028bc:	e280      	b.n	8002dc0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80028be:	4baf      	ldr	r3, [pc, #700]	; (8002b7c <HAL_RCC_OscConfig+0x578>)
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d0f0      	beq.n	80028ac <HAL_RCC_OscConfig+0x2a8>
 80028ca:	e014      	b.n	80028f6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028cc:	f7ff f92a 	bl	8001b24 <HAL_GetTick>
 80028d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80028d2:	e008      	b.n	80028e6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80028d4:	f7ff f926 	bl	8001b24 <HAL_GetTick>
 80028d8:	4602      	mov	r2, r0
 80028da:	693b      	ldr	r3, [r7, #16]
 80028dc:	1ad3      	subs	r3, r2, r3
 80028de:	2b64      	cmp	r3, #100	; 0x64
 80028e0:	d901      	bls.n	80028e6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80028e2:	2303      	movs	r3, #3
 80028e4:	e26c      	b.n	8002dc0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80028e6:	4ba5      	ldr	r3, [pc, #660]	; (8002b7c <HAL_RCC_OscConfig+0x578>)
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d1f0      	bne.n	80028d4 <HAL_RCC_OscConfig+0x2d0>
 80028f2:	e000      	b.n	80028f6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f003 0302 	and.w	r3, r3, #2
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d060      	beq.n	80029c4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002902:	69bb      	ldr	r3, [r7, #24]
 8002904:	2b04      	cmp	r3, #4
 8002906:	d005      	beq.n	8002914 <HAL_RCC_OscConfig+0x310>
 8002908:	69bb      	ldr	r3, [r7, #24]
 800290a:	2b0c      	cmp	r3, #12
 800290c:	d119      	bne.n	8002942 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800290e:	697b      	ldr	r3, [r7, #20]
 8002910:	2b02      	cmp	r3, #2
 8002912:	d116      	bne.n	8002942 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002914:	4b99      	ldr	r3, [pc, #612]	; (8002b7c <HAL_RCC_OscConfig+0x578>)
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800291c:	2b00      	cmp	r3, #0
 800291e:	d005      	beq.n	800292c <HAL_RCC_OscConfig+0x328>
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	68db      	ldr	r3, [r3, #12]
 8002924:	2b00      	cmp	r3, #0
 8002926:	d101      	bne.n	800292c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002928:	2301      	movs	r3, #1
 800292a:	e249      	b.n	8002dc0 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800292c:	4b93      	ldr	r3, [pc, #588]	; (8002b7c <HAL_RCC_OscConfig+0x578>)
 800292e:	685b      	ldr	r3, [r3, #4]
 8002930:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	691b      	ldr	r3, [r3, #16]
 8002938:	061b      	lsls	r3, r3, #24
 800293a:	4990      	ldr	r1, [pc, #576]	; (8002b7c <HAL_RCC_OscConfig+0x578>)
 800293c:	4313      	orrs	r3, r2
 800293e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002940:	e040      	b.n	80029c4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	68db      	ldr	r3, [r3, #12]
 8002946:	2b00      	cmp	r3, #0
 8002948:	d023      	beq.n	8002992 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800294a:	4b8c      	ldr	r3, [pc, #560]	; (8002b7c <HAL_RCC_OscConfig+0x578>)
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	4a8b      	ldr	r2, [pc, #556]	; (8002b7c <HAL_RCC_OscConfig+0x578>)
 8002950:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002954:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002956:	f7ff f8e5 	bl	8001b24 <HAL_GetTick>
 800295a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800295c:	e008      	b.n	8002970 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800295e:	f7ff f8e1 	bl	8001b24 <HAL_GetTick>
 8002962:	4602      	mov	r2, r0
 8002964:	693b      	ldr	r3, [r7, #16]
 8002966:	1ad3      	subs	r3, r2, r3
 8002968:	2b02      	cmp	r3, #2
 800296a:	d901      	bls.n	8002970 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800296c:	2303      	movs	r3, #3
 800296e:	e227      	b.n	8002dc0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002970:	4b82      	ldr	r3, [pc, #520]	; (8002b7c <HAL_RCC_OscConfig+0x578>)
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002978:	2b00      	cmp	r3, #0
 800297a:	d0f0      	beq.n	800295e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800297c:	4b7f      	ldr	r3, [pc, #508]	; (8002b7c <HAL_RCC_OscConfig+0x578>)
 800297e:	685b      	ldr	r3, [r3, #4]
 8002980:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	691b      	ldr	r3, [r3, #16]
 8002988:	061b      	lsls	r3, r3, #24
 800298a:	497c      	ldr	r1, [pc, #496]	; (8002b7c <HAL_RCC_OscConfig+0x578>)
 800298c:	4313      	orrs	r3, r2
 800298e:	604b      	str	r3, [r1, #4]
 8002990:	e018      	b.n	80029c4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002992:	4b7a      	ldr	r3, [pc, #488]	; (8002b7c <HAL_RCC_OscConfig+0x578>)
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	4a79      	ldr	r2, [pc, #484]	; (8002b7c <HAL_RCC_OscConfig+0x578>)
 8002998:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800299c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800299e:	f7ff f8c1 	bl	8001b24 <HAL_GetTick>
 80029a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80029a4:	e008      	b.n	80029b8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80029a6:	f7ff f8bd 	bl	8001b24 <HAL_GetTick>
 80029aa:	4602      	mov	r2, r0
 80029ac:	693b      	ldr	r3, [r7, #16]
 80029ae:	1ad3      	subs	r3, r2, r3
 80029b0:	2b02      	cmp	r3, #2
 80029b2:	d901      	bls.n	80029b8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80029b4:	2303      	movs	r3, #3
 80029b6:	e203      	b.n	8002dc0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80029b8:	4b70      	ldr	r3, [pc, #448]	; (8002b7c <HAL_RCC_OscConfig+0x578>)
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d1f0      	bne.n	80029a6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f003 0308 	and.w	r3, r3, #8
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d03c      	beq.n	8002a4a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	695b      	ldr	r3, [r3, #20]
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d01c      	beq.n	8002a12 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80029d8:	4b68      	ldr	r3, [pc, #416]	; (8002b7c <HAL_RCC_OscConfig+0x578>)
 80029da:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80029de:	4a67      	ldr	r2, [pc, #412]	; (8002b7c <HAL_RCC_OscConfig+0x578>)
 80029e0:	f043 0301 	orr.w	r3, r3, #1
 80029e4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029e8:	f7ff f89c 	bl	8001b24 <HAL_GetTick>
 80029ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80029ee:	e008      	b.n	8002a02 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80029f0:	f7ff f898 	bl	8001b24 <HAL_GetTick>
 80029f4:	4602      	mov	r2, r0
 80029f6:	693b      	ldr	r3, [r7, #16]
 80029f8:	1ad3      	subs	r3, r2, r3
 80029fa:	2b02      	cmp	r3, #2
 80029fc:	d901      	bls.n	8002a02 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80029fe:	2303      	movs	r3, #3
 8002a00:	e1de      	b.n	8002dc0 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002a02:	4b5e      	ldr	r3, [pc, #376]	; (8002b7c <HAL_RCC_OscConfig+0x578>)
 8002a04:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a08:	f003 0302 	and.w	r3, r3, #2
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d0ef      	beq.n	80029f0 <HAL_RCC_OscConfig+0x3ec>
 8002a10:	e01b      	b.n	8002a4a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a12:	4b5a      	ldr	r3, [pc, #360]	; (8002b7c <HAL_RCC_OscConfig+0x578>)
 8002a14:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a18:	4a58      	ldr	r2, [pc, #352]	; (8002b7c <HAL_RCC_OscConfig+0x578>)
 8002a1a:	f023 0301 	bic.w	r3, r3, #1
 8002a1e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a22:	f7ff f87f 	bl	8001b24 <HAL_GetTick>
 8002a26:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002a28:	e008      	b.n	8002a3c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a2a:	f7ff f87b 	bl	8001b24 <HAL_GetTick>
 8002a2e:	4602      	mov	r2, r0
 8002a30:	693b      	ldr	r3, [r7, #16]
 8002a32:	1ad3      	subs	r3, r2, r3
 8002a34:	2b02      	cmp	r3, #2
 8002a36:	d901      	bls.n	8002a3c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002a38:	2303      	movs	r3, #3
 8002a3a:	e1c1      	b.n	8002dc0 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002a3c:	4b4f      	ldr	r3, [pc, #316]	; (8002b7c <HAL_RCC_OscConfig+0x578>)
 8002a3e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a42:	f003 0302 	and.w	r3, r3, #2
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d1ef      	bne.n	8002a2a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f003 0304 	and.w	r3, r3, #4
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	f000 80a6 	beq.w	8002ba4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a58:	2300      	movs	r3, #0
 8002a5a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002a5c:	4b47      	ldr	r3, [pc, #284]	; (8002b7c <HAL_RCC_OscConfig+0x578>)
 8002a5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a60:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d10d      	bne.n	8002a84 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a68:	4b44      	ldr	r3, [pc, #272]	; (8002b7c <HAL_RCC_OscConfig+0x578>)
 8002a6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a6c:	4a43      	ldr	r2, [pc, #268]	; (8002b7c <HAL_RCC_OscConfig+0x578>)
 8002a6e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a72:	6593      	str	r3, [r2, #88]	; 0x58
 8002a74:	4b41      	ldr	r3, [pc, #260]	; (8002b7c <HAL_RCC_OscConfig+0x578>)
 8002a76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a7c:	60bb      	str	r3, [r7, #8]
 8002a7e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a80:	2301      	movs	r3, #1
 8002a82:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a84:	4b3e      	ldr	r3, [pc, #248]	; (8002b80 <HAL_RCC_OscConfig+0x57c>)
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d118      	bne.n	8002ac2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002a90:	4b3b      	ldr	r3, [pc, #236]	; (8002b80 <HAL_RCC_OscConfig+0x57c>)
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	4a3a      	ldr	r2, [pc, #232]	; (8002b80 <HAL_RCC_OscConfig+0x57c>)
 8002a96:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a9a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a9c:	f7ff f842 	bl	8001b24 <HAL_GetTick>
 8002aa0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002aa2:	e008      	b.n	8002ab6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002aa4:	f7ff f83e 	bl	8001b24 <HAL_GetTick>
 8002aa8:	4602      	mov	r2, r0
 8002aaa:	693b      	ldr	r3, [r7, #16]
 8002aac:	1ad3      	subs	r3, r2, r3
 8002aae:	2b02      	cmp	r3, #2
 8002ab0:	d901      	bls.n	8002ab6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002ab2:	2303      	movs	r3, #3
 8002ab4:	e184      	b.n	8002dc0 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002ab6:	4b32      	ldr	r3, [pc, #200]	; (8002b80 <HAL_RCC_OscConfig+0x57c>)
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d0f0      	beq.n	8002aa4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	689b      	ldr	r3, [r3, #8]
 8002ac6:	2b01      	cmp	r3, #1
 8002ac8:	d108      	bne.n	8002adc <HAL_RCC_OscConfig+0x4d8>
 8002aca:	4b2c      	ldr	r3, [pc, #176]	; (8002b7c <HAL_RCC_OscConfig+0x578>)
 8002acc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ad0:	4a2a      	ldr	r2, [pc, #168]	; (8002b7c <HAL_RCC_OscConfig+0x578>)
 8002ad2:	f043 0301 	orr.w	r3, r3, #1
 8002ad6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002ada:	e024      	b.n	8002b26 <HAL_RCC_OscConfig+0x522>
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	689b      	ldr	r3, [r3, #8]
 8002ae0:	2b05      	cmp	r3, #5
 8002ae2:	d110      	bne.n	8002b06 <HAL_RCC_OscConfig+0x502>
 8002ae4:	4b25      	ldr	r3, [pc, #148]	; (8002b7c <HAL_RCC_OscConfig+0x578>)
 8002ae6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002aea:	4a24      	ldr	r2, [pc, #144]	; (8002b7c <HAL_RCC_OscConfig+0x578>)
 8002aec:	f043 0304 	orr.w	r3, r3, #4
 8002af0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002af4:	4b21      	ldr	r3, [pc, #132]	; (8002b7c <HAL_RCC_OscConfig+0x578>)
 8002af6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002afa:	4a20      	ldr	r2, [pc, #128]	; (8002b7c <HAL_RCC_OscConfig+0x578>)
 8002afc:	f043 0301 	orr.w	r3, r3, #1
 8002b00:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002b04:	e00f      	b.n	8002b26 <HAL_RCC_OscConfig+0x522>
 8002b06:	4b1d      	ldr	r3, [pc, #116]	; (8002b7c <HAL_RCC_OscConfig+0x578>)
 8002b08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b0c:	4a1b      	ldr	r2, [pc, #108]	; (8002b7c <HAL_RCC_OscConfig+0x578>)
 8002b0e:	f023 0301 	bic.w	r3, r3, #1
 8002b12:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002b16:	4b19      	ldr	r3, [pc, #100]	; (8002b7c <HAL_RCC_OscConfig+0x578>)
 8002b18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b1c:	4a17      	ldr	r2, [pc, #92]	; (8002b7c <HAL_RCC_OscConfig+0x578>)
 8002b1e:	f023 0304 	bic.w	r3, r3, #4
 8002b22:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	689b      	ldr	r3, [r3, #8]
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d016      	beq.n	8002b5c <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b2e:	f7fe fff9 	bl	8001b24 <HAL_GetTick>
 8002b32:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002b34:	e00a      	b.n	8002b4c <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b36:	f7fe fff5 	bl	8001b24 <HAL_GetTick>
 8002b3a:	4602      	mov	r2, r0
 8002b3c:	693b      	ldr	r3, [r7, #16]
 8002b3e:	1ad3      	subs	r3, r2, r3
 8002b40:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b44:	4293      	cmp	r3, r2
 8002b46:	d901      	bls.n	8002b4c <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8002b48:	2303      	movs	r3, #3
 8002b4a:	e139      	b.n	8002dc0 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002b4c:	4b0b      	ldr	r3, [pc, #44]	; (8002b7c <HAL_RCC_OscConfig+0x578>)
 8002b4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b52:	f003 0302 	and.w	r3, r3, #2
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d0ed      	beq.n	8002b36 <HAL_RCC_OscConfig+0x532>
 8002b5a:	e01a      	b.n	8002b92 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b5c:	f7fe ffe2 	bl	8001b24 <HAL_GetTick>
 8002b60:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002b62:	e00f      	b.n	8002b84 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b64:	f7fe ffde 	bl	8001b24 <HAL_GetTick>
 8002b68:	4602      	mov	r2, r0
 8002b6a:	693b      	ldr	r3, [r7, #16]
 8002b6c:	1ad3      	subs	r3, r2, r3
 8002b6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b72:	4293      	cmp	r3, r2
 8002b74:	d906      	bls.n	8002b84 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002b76:	2303      	movs	r3, #3
 8002b78:	e122      	b.n	8002dc0 <HAL_RCC_OscConfig+0x7bc>
 8002b7a:	bf00      	nop
 8002b7c:	40021000 	.word	0x40021000
 8002b80:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002b84:	4b90      	ldr	r3, [pc, #576]	; (8002dc8 <HAL_RCC_OscConfig+0x7c4>)
 8002b86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b8a:	f003 0302 	and.w	r3, r3, #2
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d1e8      	bne.n	8002b64 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002b92:	7ffb      	ldrb	r3, [r7, #31]
 8002b94:	2b01      	cmp	r3, #1
 8002b96:	d105      	bne.n	8002ba4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b98:	4b8b      	ldr	r3, [pc, #556]	; (8002dc8 <HAL_RCC_OscConfig+0x7c4>)
 8002b9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b9c:	4a8a      	ldr	r2, [pc, #552]	; (8002dc8 <HAL_RCC_OscConfig+0x7c4>)
 8002b9e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ba2:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	f000 8108 	beq.w	8002dbe <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bb2:	2b02      	cmp	r3, #2
 8002bb4:	f040 80d0 	bne.w	8002d58 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002bb8:	4b83      	ldr	r3, [pc, #524]	; (8002dc8 <HAL_RCC_OscConfig+0x7c4>)
 8002bba:	68db      	ldr	r3, [r3, #12]
 8002bbc:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bbe:	697b      	ldr	r3, [r7, #20]
 8002bc0:	f003 0203 	and.w	r2, r3, #3
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bc8:	429a      	cmp	r2, r3
 8002bca:	d130      	bne.n	8002c2e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002bcc:	697b      	ldr	r3, [r7, #20]
 8002bce:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bd6:	3b01      	subs	r3, #1
 8002bd8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bda:	429a      	cmp	r2, r3
 8002bdc:	d127      	bne.n	8002c2e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002bde:	697b      	ldr	r3, [r7, #20]
 8002be0:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002be8:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002bea:	429a      	cmp	r2, r3
 8002bec:	d11f      	bne.n	8002c2e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002bee:	697b      	ldr	r3, [r7, #20]
 8002bf0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bf4:	687a      	ldr	r2, [r7, #4]
 8002bf6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002bf8:	2a07      	cmp	r2, #7
 8002bfa:	bf14      	ite	ne
 8002bfc:	2201      	movne	r2, #1
 8002bfe:	2200      	moveq	r2, #0
 8002c00:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002c02:	4293      	cmp	r3, r2
 8002c04:	d113      	bne.n	8002c2e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002c06:	697b      	ldr	r3, [r7, #20]
 8002c08:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c10:	085b      	lsrs	r3, r3, #1
 8002c12:	3b01      	subs	r3, #1
 8002c14:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002c16:	429a      	cmp	r2, r3
 8002c18:	d109      	bne.n	8002c2e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002c1a:	697b      	ldr	r3, [r7, #20]
 8002c1c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c24:	085b      	lsrs	r3, r3, #1
 8002c26:	3b01      	subs	r3, #1
 8002c28:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002c2a:	429a      	cmp	r2, r3
 8002c2c:	d06e      	beq.n	8002d0c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002c2e:	69bb      	ldr	r3, [r7, #24]
 8002c30:	2b0c      	cmp	r3, #12
 8002c32:	d069      	beq.n	8002d08 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002c34:	4b64      	ldr	r3, [pc, #400]	; (8002dc8 <HAL_RCC_OscConfig+0x7c4>)
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d105      	bne.n	8002c4c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002c40:	4b61      	ldr	r3, [pc, #388]	; (8002dc8 <HAL_RCC_OscConfig+0x7c4>)
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d001      	beq.n	8002c50 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002c4c:	2301      	movs	r3, #1
 8002c4e:	e0b7      	b.n	8002dc0 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002c50:	4b5d      	ldr	r3, [pc, #372]	; (8002dc8 <HAL_RCC_OscConfig+0x7c4>)
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	4a5c      	ldr	r2, [pc, #368]	; (8002dc8 <HAL_RCC_OscConfig+0x7c4>)
 8002c56:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002c5a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002c5c:	f7fe ff62 	bl	8001b24 <HAL_GetTick>
 8002c60:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c62:	e008      	b.n	8002c76 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c64:	f7fe ff5e 	bl	8001b24 <HAL_GetTick>
 8002c68:	4602      	mov	r2, r0
 8002c6a:	693b      	ldr	r3, [r7, #16]
 8002c6c:	1ad3      	subs	r3, r2, r3
 8002c6e:	2b02      	cmp	r3, #2
 8002c70:	d901      	bls.n	8002c76 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002c72:	2303      	movs	r3, #3
 8002c74:	e0a4      	b.n	8002dc0 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c76:	4b54      	ldr	r3, [pc, #336]	; (8002dc8 <HAL_RCC_OscConfig+0x7c4>)
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d1f0      	bne.n	8002c64 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002c82:	4b51      	ldr	r3, [pc, #324]	; (8002dc8 <HAL_RCC_OscConfig+0x7c4>)
 8002c84:	68da      	ldr	r2, [r3, #12]
 8002c86:	4b51      	ldr	r3, [pc, #324]	; (8002dcc <HAL_RCC_OscConfig+0x7c8>)
 8002c88:	4013      	ands	r3, r2
 8002c8a:	687a      	ldr	r2, [r7, #4]
 8002c8c:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002c8e:	687a      	ldr	r2, [r7, #4]
 8002c90:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002c92:	3a01      	subs	r2, #1
 8002c94:	0112      	lsls	r2, r2, #4
 8002c96:	4311      	orrs	r1, r2
 8002c98:	687a      	ldr	r2, [r7, #4]
 8002c9a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002c9c:	0212      	lsls	r2, r2, #8
 8002c9e:	4311      	orrs	r1, r2
 8002ca0:	687a      	ldr	r2, [r7, #4]
 8002ca2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002ca4:	0852      	lsrs	r2, r2, #1
 8002ca6:	3a01      	subs	r2, #1
 8002ca8:	0552      	lsls	r2, r2, #21
 8002caa:	4311      	orrs	r1, r2
 8002cac:	687a      	ldr	r2, [r7, #4]
 8002cae:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002cb0:	0852      	lsrs	r2, r2, #1
 8002cb2:	3a01      	subs	r2, #1
 8002cb4:	0652      	lsls	r2, r2, #25
 8002cb6:	4311      	orrs	r1, r2
 8002cb8:	687a      	ldr	r2, [r7, #4]
 8002cba:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002cbc:	0912      	lsrs	r2, r2, #4
 8002cbe:	0452      	lsls	r2, r2, #17
 8002cc0:	430a      	orrs	r2, r1
 8002cc2:	4941      	ldr	r1, [pc, #260]	; (8002dc8 <HAL_RCC_OscConfig+0x7c4>)
 8002cc4:	4313      	orrs	r3, r2
 8002cc6:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002cc8:	4b3f      	ldr	r3, [pc, #252]	; (8002dc8 <HAL_RCC_OscConfig+0x7c4>)
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	4a3e      	ldr	r2, [pc, #248]	; (8002dc8 <HAL_RCC_OscConfig+0x7c4>)
 8002cce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002cd2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002cd4:	4b3c      	ldr	r3, [pc, #240]	; (8002dc8 <HAL_RCC_OscConfig+0x7c4>)
 8002cd6:	68db      	ldr	r3, [r3, #12]
 8002cd8:	4a3b      	ldr	r2, [pc, #236]	; (8002dc8 <HAL_RCC_OscConfig+0x7c4>)
 8002cda:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002cde:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002ce0:	f7fe ff20 	bl	8001b24 <HAL_GetTick>
 8002ce4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ce6:	e008      	b.n	8002cfa <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ce8:	f7fe ff1c 	bl	8001b24 <HAL_GetTick>
 8002cec:	4602      	mov	r2, r0
 8002cee:	693b      	ldr	r3, [r7, #16]
 8002cf0:	1ad3      	subs	r3, r2, r3
 8002cf2:	2b02      	cmp	r3, #2
 8002cf4:	d901      	bls.n	8002cfa <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002cf6:	2303      	movs	r3, #3
 8002cf8:	e062      	b.n	8002dc0 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002cfa:	4b33      	ldr	r3, [pc, #204]	; (8002dc8 <HAL_RCC_OscConfig+0x7c4>)
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d0f0      	beq.n	8002ce8 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002d06:	e05a      	b.n	8002dbe <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002d08:	2301      	movs	r3, #1
 8002d0a:	e059      	b.n	8002dc0 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d0c:	4b2e      	ldr	r3, [pc, #184]	; (8002dc8 <HAL_RCC_OscConfig+0x7c4>)
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d152      	bne.n	8002dbe <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002d18:	4b2b      	ldr	r3, [pc, #172]	; (8002dc8 <HAL_RCC_OscConfig+0x7c4>)
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	4a2a      	ldr	r2, [pc, #168]	; (8002dc8 <HAL_RCC_OscConfig+0x7c4>)
 8002d1e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002d22:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002d24:	4b28      	ldr	r3, [pc, #160]	; (8002dc8 <HAL_RCC_OscConfig+0x7c4>)
 8002d26:	68db      	ldr	r3, [r3, #12]
 8002d28:	4a27      	ldr	r2, [pc, #156]	; (8002dc8 <HAL_RCC_OscConfig+0x7c4>)
 8002d2a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002d2e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002d30:	f7fe fef8 	bl	8001b24 <HAL_GetTick>
 8002d34:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d36:	e008      	b.n	8002d4a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d38:	f7fe fef4 	bl	8001b24 <HAL_GetTick>
 8002d3c:	4602      	mov	r2, r0
 8002d3e:	693b      	ldr	r3, [r7, #16]
 8002d40:	1ad3      	subs	r3, r2, r3
 8002d42:	2b02      	cmp	r3, #2
 8002d44:	d901      	bls.n	8002d4a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002d46:	2303      	movs	r3, #3
 8002d48:	e03a      	b.n	8002dc0 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d4a:	4b1f      	ldr	r3, [pc, #124]	; (8002dc8 <HAL_RCC_OscConfig+0x7c4>)
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d0f0      	beq.n	8002d38 <HAL_RCC_OscConfig+0x734>
 8002d56:	e032      	b.n	8002dbe <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002d58:	69bb      	ldr	r3, [r7, #24]
 8002d5a:	2b0c      	cmp	r3, #12
 8002d5c:	d02d      	beq.n	8002dba <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d5e:	4b1a      	ldr	r3, [pc, #104]	; (8002dc8 <HAL_RCC_OscConfig+0x7c4>)
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	4a19      	ldr	r2, [pc, #100]	; (8002dc8 <HAL_RCC_OscConfig+0x7c4>)
 8002d64:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002d68:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8002d6a:	4b17      	ldr	r3, [pc, #92]	; (8002dc8 <HAL_RCC_OscConfig+0x7c4>)
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d105      	bne.n	8002d82 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002d76:	4b14      	ldr	r3, [pc, #80]	; (8002dc8 <HAL_RCC_OscConfig+0x7c4>)
 8002d78:	68db      	ldr	r3, [r3, #12]
 8002d7a:	4a13      	ldr	r2, [pc, #76]	; (8002dc8 <HAL_RCC_OscConfig+0x7c4>)
 8002d7c:	f023 0303 	bic.w	r3, r3, #3
 8002d80:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002d82:	4b11      	ldr	r3, [pc, #68]	; (8002dc8 <HAL_RCC_OscConfig+0x7c4>)
 8002d84:	68db      	ldr	r3, [r3, #12]
 8002d86:	4a10      	ldr	r2, [pc, #64]	; (8002dc8 <HAL_RCC_OscConfig+0x7c4>)
 8002d88:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002d8c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d90:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d92:	f7fe fec7 	bl	8001b24 <HAL_GetTick>
 8002d96:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002d98:	e008      	b.n	8002dac <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d9a:	f7fe fec3 	bl	8001b24 <HAL_GetTick>
 8002d9e:	4602      	mov	r2, r0
 8002da0:	693b      	ldr	r3, [r7, #16]
 8002da2:	1ad3      	subs	r3, r2, r3
 8002da4:	2b02      	cmp	r3, #2
 8002da6:	d901      	bls.n	8002dac <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8002da8:	2303      	movs	r3, #3
 8002daa:	e009      	b.n	8002dc0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002dac:	4b06      	ldr	r3, [pc, #24]	; (8002dc8 <HAL_RCC_OscConfig+0x7c4>)
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d1f0      	bne.n	8002d9a <HAL_RCC_OscConfig+0x796>
 8002db8:	e001      	b.n	8002dbe <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002dba:	2301      	movs	r3, #1
 8002dbc:	e000      	b.n	8002dc0 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8002dbe:	2300      	movs	r3, #0
}
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	3720      	adds	r7, #32
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	bd80      	pop	{r7, pc}
 8002dc8:	40021000 	.word	0x40021000
 8002dcc:	f99d808c 	.word	0xf99d808c

08002dd0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	b084      	sub	sp, #16
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
 8002dd8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d101      	bne.n	8002de4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002de0:	2301      	movs	r3, #1
 8002de2:	e0c8      	b.n	8002f76 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002de4:	4b66      	ldr	r3, [pc, #408]	; (8002f80 <HAL_RCC_ClockConfig+0x1b0>)
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f003 0307 	and.w	r3, r3, #7
 8002dec:	683a      	ldr	r2, [r7, #0]
 8002dee:	429a      	cmp	r2, r3
 8002df0:	d910      	bls.n	8002e14 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002df2:	4b63      	ldr	r3, [pc, #396]	; (8002f80 <HAL_RCC_ClockConfig+0x1b0>)
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f023 0207 	bic.w	r2, r3, #7
 8002dfa:	4961      	ldr	r1, [pc, #388]	; (8002f80 <HAL_RCC_ClockConfig+0x1b0>)
 8002dfc:	683b      	ldr	r3, [r7, #0]
 8002dfe:	4313      	orrs	r3, r2
 8002e00:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e02:	4b5f      	ldr	r3, [pc, #380]	; (8002f80 <HAL_RCC_ClockConfig+0x1b0>)
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f003 0307 	and.w	r3, r3, #7
 8002e0a:	683a      	ldr	r2, [r7, #0]
 8002e0c:	429a      	cmp	r2, r3
 8002e0e:	d001      	beq.n	8002e14 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002e10:	2301      	movs	r3, #1
 8002e12:	e0b0      	b.n	8002f76 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f003 0301 	and.w	r3, r3, #1
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d04c      	beq.n	8002eba <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	685b      	ldr	r3, [r3, #4]
 8002e24:	2b03      	cmp	r3, #3
 8002e26:	d107      	bne.n	8002e38 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e28:	4b56      	ldr	r3, [pc, #344]	; (8002f84 <HAL_RCC_ClockConfig+0x1b4>)
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d121      	bne.n	8002e78 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8002e34:	2301      	movs	r3, #1
 8002e36:	e09e      	b.n	8002f76 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	685b      	ldr	r3, [r3, #4]
 8002e3c:	2b02      	cmp	r3, #2
 8002e3e:	d107      	bne.n	8002e50 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002e40:	4b50      	ldr	r3, [pc, #320]	; (8002f84 <HAL_RCC_ClockConfig+0x1b4>)
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d115      	bne.n	8002e78 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002e4c:	2301      	movs	r3, #1
 8002e4e:	e092      	b.n	8002f76 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	685b      	ldr	r3, [r3, #4]
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d107      	bne.n	8002e68 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002e58:	4b4a      	ldr	r3, [pc, #296]	; (8002f84 <HAL_RCC_ClockConfig+0x1b4>)
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f003 0302 	and.w	r3, r3, #2
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d109      	bne.n	8002e78 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002e64:	2301      	movs	r3, #1
 8002e66:	e086      	b.n	8002f76 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002e68:	4b46      	ldr	r3, [pc, #280]	; (8002f84 <HAL_RCC_ClockConfig+0x1b4>)
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d101      	bne.n	8002e78 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002e74:	2301      	movs	r3, #1
 8002e76:	e07e      	b.n	8002f76 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002e78:	4b42      	ldr	r3, [pc, #264]	; (8002f84 <HAL_RCC_ClockConfig+0x1b4>)
 8002e7a:	689b      	ldr	r3, [r3, #8]
 8002e7c:	f023 0203 	bic.w	r2, r3, #3
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	685b      	ldr	r3, [r3, #4]
 8002e84:	493f      	ldr	r1, [pc, #252]	; (8002f84 <HAL_RCC_ClockConfig+0x1b4>)
 8002e86:	4313      	orrs	r3, r2
 8002e88:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e8a:	f7fe fe4b 	bl	8001b24 <HAL_GetTick>
 8002e8e:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e90:	e00a      	b.n	8002ea8 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e92:	f7fe fe47 	bl	8001b24 <HAL_GetTick>
 8002e96:	4602      	mov	r2, r0
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	1ad3      	subs	r3, r2, r3
 8002e9c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ea0:	4293      	cmp	r3, r2
 8002ea2:	d901      	bls.n	8002ea8 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8002ea4:	2303      	movs	r3, #3
 8002ea6:	e066      	b.n	8002f76 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ea8:	4b36      	ldr	r3, [pc, #216]	; (8002f84 <HAL_RCC_ClockConfig+0x1b4>)
 8002eaa:	689b      	ldr	r3, [r3, #8]
 8002eac:	f003 020c 	and.w	r2, r3, #12
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	685b      	ldr	r3, [r3, #4]
 8002eb4:	009b      	lsls	r3, r3, #2
 8002eb6:	429a      	cmp	r2, r3
 8002eb8:	d1eb      	bne.n	8002e92 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f003 0302 	and.w	r3, r3, #2
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d008      	beq.n	8002ed8 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ec6:	4b2f      	ldr	r3, [pc, #188]	; (8002f84 <HAL_RCC_ClockConfig+0x1b4>)
 8002ec8:	689b      	ldr	r3, [r3, #8]
 8002eca:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	689b      	ldr	r3, [r3, #8]
 8002ed2:	492c      	ldr	r1, [pc, #176]	; (8002f84 <HAL_RCC_ClockConfig+0x1b4>)
 8002ed4:	4313      	orrs	r3, r2
 8002ed6:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002ed8:	4b29      	ldr	r3, [pc, #164]	; (8002f80 <HAL_RCC_ClockConfig+0x1b0>)
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f003 0307 	and.w	r3, r3, #7
 8002ee0:	683a      	ldr	r2, [r7, #0]
 8002ee2:	429a      	cmp	r2, r3
 8002ee4:	d210      	bcs.n	8002f08 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ee6:	4b26      	ldr	r3, [pc, #152]	; (8002f80 <HAL_RCC_ClockConfig+0x1b0>)
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f023 0207 	bic.w	r2, r3, #7
 8002eee:	4924      	ldr	r1, [pc, #144]	; (8002f80 <HAL_RCC_ClockConfig+0x1b0>)
 8002ef0:	683b      	ldr	r3, [r7, #0]
 8002ef2:	4313      	orrs	r3, r2
 8002ef4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ef6:	4b22      	ldr	r3, [pc, #136]	; (8002f80 <HAL_RCC_ClockConfig+0x1b0>)
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f003 0307 	and.w	r3, r3, #7
 8002efe:	683a      	ldr	r2, [r7, #0]
 8002f00:	429a      	cmp	r2, r3
 8002f02:	d001      	beq.n	8002f08 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8002f04:	2301      	movs	r3, #1
 8002f06:	e036      	b.n	8002f76 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f003 0304 	and.w	r3, r3, #4
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d008      	beq.n	8002f26 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002f14:	4b1b      	ldr	r3, [pc, #108]	; (8002f84 <HAL_RCC_ClockConfig+0x1b4>)
 8002f16:	689b      	ldr	r3, [r3, #8]
 8002f18:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	68db      	ldr	r3, [r3, #12]
 8002f20:	4918      	ldr	r1, [pc, #96]	; (8002f84 <HAL_RCC_ClockConfig+0x1b4>)
 8002f22:	4313      	orrs	r3, r2
 8002f24:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f003 0308 	and.w	r3, r3, #8
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d009      	beq.n	8002f46 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002f32:	4b14      	ldr	r3, [pc, #80]	; (8002f84 <HAL_RCC_ClockConfig+0x1b4>)
 8002f34:	689b      	ldr	r3, [r3, #8]
 8002f36:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	691b      	ldr	r3, [r3, #16]
 8002f3e:	00db      	lsls	r3, r3, #3
 8002f40:	4910      	ldr	r1, [pc, #64]	; (8002f84 <HAL_RCC_ClockConfig+0x1b4>)
 8002f42:	4313      	orrs	r3, r2
 8002f44:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002f46:	f000 f825 	bl	8002f94 <HAL_RCC_GetSysClockFreq>
 8002f4a:	4602      	mov	r2, r0
 8002f4c:	4b0d      	ldr	r3, [pc, #52]	; (8002f84 <HAL_RCC_ClockConfig+0x1b4>)
 8002f4e:	689b      	ldr	r3, [r3, #8]
 8002f50:	091b      	lsrs	r3, r3, #4
 8002f52:	f003 030f 	and.w	r3, r3, #15
 8002f56:	490c      	ldr	r1, [pc, #48]	; (8002f88 <HAL_RCC_ClockConfig+0x1b8>)
 8002f58:	5ccb      	ldrb	r3, [r1, r3]
 8002f5a:	f003 031f 	and.w	r3, r3, #31
 8002f5e:	fa22 f303 	lsr.w	r3, r2, r3
 8002f62:	4a0a      	ldr	r2, [pc, #40]	; (8002f8c <HAL_RCC_ClockConfig+0x1bc>)
 8002f64:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002f66:	4b0a      	ldr	r3, [pc, #40]	; (8002f90 <HAL_RCC_ClockConfig+0x1c0>)
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	f7fe fd8a 	bl	8001a84 <HAL_InitTick>
 8002f70:	4603      	mov	r3, r0
 8002f72:	72fb      	strb	r3, [r7, #11]

  return status;
 8002f74:	7afb      	ldrb	r3, [r7, #11]
}
 8002f76:	4618      	mov	r0, r3
 8002f78:	3710      	adds	r7, #16
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	bd80      	pop	{r7, pc}
 8002f7e:	bf00      	nop
 8002f80:	40022000 	.word	0x40022000
 8002f84:	40021000 	.word	0x40021000
 8002f88:	080057a4 	.word	0x080057a4
 8002f8c:	20000014 	.word	0x20000014
 8002f90:	20000018 	.word	0x20000018

08002f94 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f94:	b480      	push	{r7}
 8002f96:	b089      	sub	sp, #36	; 0x24
 8002f98:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	61fb      	str	r3, [r7, #28]
 8002f9e:	2300      	movs	r3, #0
 8002fa0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002fa2:	4b3e      	ldr	r3, [pc, #248]	; (800309c <HAL_RCC_GetSysClockFreq+0x108>)
 8002fa4:	689b      	ldr	r3, [r3, #8]
 8002fa6:	f003 030c 	and.w	r3, r3, #12
 8002faa:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002fac:	4b3b      	ldr	r3, [pc, #236]	; (800309c <HAL_RCC_GetSysClockFreq+0x108>)
 8002fae:	68db      	ldr	r3, [r3, #12]
 8002fb0:	f003 0303 	and.w	r3, r3, #3
 8002fb4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002fb6:	693b      	ldr	r3, [r7, #16]
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d005      	beq.n	8002fc8 <HAL_RCC_GetSysClockFreq+0x34>
 8002fbc:	693b      	ldr	r3, [r7, #16]
 8002fbe:	2b0c      	cmp	r3, #12
 8002fc0:	d121      	bne.n	8003006 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	2b01      	cmp	r3, #1
 8002fc6:	d11e      	bne.n	8003006 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002fc8:	4b34      	ldr	r3, [pc, #208]	; (800309c <HAL_RCC_GetSysClockFreq+0x108>)
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f003 0308 	and.w	r3, r3, #8
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d107      	bne.n	8002fe4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002fd4:	4b31      	ldr	r3, [pc, #196]	; (800309c <HAL_RCC_GetSysClockFreq+0x108>)
 8002fd6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002fda:	0a1b      	lsrs	r3, r3, #8
 8002fdc:	f003 030f 	and.w	r3, r3, #15
 8002fe0:	61fb      	str	r3, [r7, #28]
 8002fe2:	e005      	b.n	8002ff0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002fe4:	4b2d      	ldr	r3, [pc, #180]	; (800309c <HAL_RCC_GetSysClockFreq+0x108>)
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	091b      	lsrs	r3, r3, #4
 8002fea:	f003 030f 	and.w	r3, r3, #15
 8002fee:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002ff0:	4a2b      	ldr	r2, [pc, #172]	; (80030a0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002ff2:	69fb      	ldr	r3, [r7, #28]
 8002ff4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ff8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002ffa:	693b      	ldr	r3, [r7, #16]
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d10d      	bne.n	800301c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003000:	69fb      	ldr	r3, [r7, #28]
 8003002:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003004:	e00a      	b.n	800301c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003006:	693b      	ldr	r3, [r7, #16]
 8003008:	2b04      	cmp	r3, #4
 800300a:	d102      	bne.n	8003012 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800300c:	4b25      	ldr	r3, [pc, #148]	; (80030a4 <HAL_RCC_GetSysClockFreq+0x110>)
 800300e:	61bb      	str	r3, [r7, #24]
 8003010:	e004      	b.n	800301c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003012:	693b      	ldr	r3, [r7, #16]
 8003014:	2b08      	cmp	r3, #8
 8003016:	d101      	bne.n	800301c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003018:	4b23      	ldr	r3, [pc, #140]	; (80030a8 <HAL_RCC_GetSysClockFreq+0x114>)
 800301a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800301c:	693b      	ldr	r3, [r7, #16]
 800301e:	2b0c      	cmp	r3, #12
 8003020:	d134      	bne.n	800308c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003022:	4b1e      	ldr	r3, [pc, #120]	; (800309c <HAL_RCC_GetSysClockFreq+0x108>)
 8003024:	68db      	ldr	r3, [r3, #12]
 8003026:	f003 0303 	and.w	r3, r3, #3
 800302a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800302c:	68bb      	ldr	r3, [r7, #8]
 800302e:	2b02      	cmp	r3, #2
 8003030:	d003      	beq.n	800303a <HAL_RCC_GetSysClockFreq+0xa6>
 8003032:	68bb      	ldr	r3, [r7, #8]
 8003034:	2b03      	cmp	r3, #3
 8003036:	d003      	beq.n	8003040 <HAL_RCC_GetSysClockFreq+0xac>
 8003038:	e005      	b.n	8003046 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800303a:	4b1a      	ldr	r3, [pc, #104]	; (80030a4 <HAL_RCC_GetSysClockFreq+0x110>)
 800303c:	617b      	str	r3, [r7, #20]
      break;
 800303e:	e005      	b.n	800304c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003040:	4b19      	ldr	r3, [pc, #100]	; (80030a8 <HAL_RCC_GetSysClockFreq+0x114>)
 8003042:	617b      	str	r3, [r7, #20]
      break;
 8003044:	e002      	b.n	800304c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003046:	69fb      	ldr	r3, [r7, #28]
 8003048:	617b      	str	r3, [r7, #20]
      break;
 800304a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800304c:	4b13      	ldr	r3, [pc, #76]	; (800309c <HAL_RCC_GetSysClockFreq+0x108>)
 800304e:	68db      	ldr	r3, [r3, #12]
 8003050:	091b      	lsrs	r3, r3, #4
 8003052:	f003 0307 	and.w	r3, r3, #7
 8003056:	3301      	adds	r3, #1
 8003058:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800305a:	4b10      	ldr	r3, [pc, #64]	; (800309c <HAL_RCC_GetSysClockFreq+0x108>)
 800305c:	68db      	ldr	r3, [r3, #12]
 800305e:	0a1b      	lsrs	r3, r3, #8
 8003060:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003064:	697a      	ldr	r2, [r7, #20]
 8003066:	fb02 f203 	mul.w	r2, r2, r3
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003070:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003072:	4b0a      	ldr	r3, [pc, #40]	; (800309c <HAL_RCC_GetSysClockFreq+0x108>)
 8003074:	68db      	ldr	r3, [r3, #12]
 8003076:	0e5b      	lsrs	r3, r3, #25
 8003078:	f003 0303 	and.w	r3, r3, #3
 800307c:	3301      	adds	r3, #1
 800307e:	005b      	lsls	r3, r3, #1
 8003080:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003082:	697a      	ldr	r2, [r7, #20]
 8003084:	683b      	ldr	r3, [r7, #0]
 8003086:	fbb2 f3f3 	udiv	r3, r2, r3
 800308a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800308c:	69bb      	ldr	r3, [r7, #24]
}
 800308e:	4618      	mov	r0, r3
 8003090:	3724      	adds	r7, #36	; 0x24
 8003092:	46bd      	mov	sp, r7
 8003094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003098:	4770      	bx	lr
 800309a:	bf00      	nop
 800309c:	40021000 	.word	0x40021000
 80030a0:	080057bc 	.word	0x080057bc
 80030a4:	00f42400 	.word	0x00f42400
 80030a8:	007a1200 	.word	0x007a1200

080030ac <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80030ac:	b480      	push	{r7}
 80030ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80030b0:	4b03      	ldr	r3, [pc, #12]	; (80030c0 <HAL_RCC_GetHCLKFreq+0x14>)
 80030b2:	681b      	ldr	r3, [r3, #0]
}
 80030b4:	4618      	mov	r0, r3
 80030b6:	46bd      	mov	sp, r7
 80030b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030bc:	4770      	bx	lr
 80030be:	bf00      	nop
 80030c0:	20000014 	.word	0x20000014

080030c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80030c4:	b580      	push	{r7, lr}
 80030c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80030c8:	f7ff fff0 	bl	80030ac <HAL_RCC_GetHCLKFreq>
 80030cc:	4602      	mov	r2, r0
 80030ce:	4b06      	ldr	r3, [pc, #24]	; (80030e8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80030d0:	689b      	ldr	r3, [r3, #8]
 80030d2:	0a1b      	lsrs	r3, r3, #8
 80030d4:	f003 0307 	and.w	r3, r3, #7
 80030d8:	4904      	ldr	r1, [pc, #16]	; (80030ec <HAL_RCC_GetPCLK1Freq+0x28>)
 80030da:	5ccb      	ldrb	r3, [r1, r3]
 80030dc:	f003 031f 	and.w	r3, r3, #31
 80030e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80030e4:	4618      	mov	r0, r3
 80030e6:	bd80      	pop	{r7, pc}
 80030e8:	40021000 	.word	0x40021000
 80030ec:	080057b4 	.word	0x080057b4

080030f0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80030f0:	b580      	push	{r7, lr}
 80030f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80030f4:	f7ff ffda 	bl	80030ac <HAL_RCC_GetHCLKFreq>
 80030f8:	4602      	mov	r2, r0
 80030fa:	4b06      	ldr	r3, [pc, #24]	; (8003114 <HAL_RCC_GetPCLK2Freq+0x24>)
 80030fc:	689b      	ldr	r3, [r3, #8]
 80030fe:	0adb      	lsrs	r3, r3, #11
 8003100:	f003 0307 	and.w	r3, r3, #7
 8003104:	4904      	ldr	r1, [pc, #16]	; (8003118 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003106:	5ccb      	ldrb	r3, [r1, r3]
 8003108:	f003 031f 	and.w	r3, r3, #31
 800310c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003110:	4618      	mov	r0, r3
 8003112:	bd80      	pop	{r7, pc}
 8003114:	40021000 	.word	0x40021000
 8003118:	080057b4 	.word	0x080057b4

0800311c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800311c:	b580      	push	{r7, lr}
 800311e:	b086      	sub	sp, #24
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003124:	2300      	movs	r3, #0
 8003126:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003128:	4b2a      	ldr	r3, [pc, #168]	; (80031d4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800312a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800312c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003130:	2b00      	cmp	r3, #0
 8003132:	d003      	beq.n	800313c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003134:	f7ff fa02 	bl	800253c <HAL_PWREx_GetVoltageRange>
 8003138:	6178      	str	r0, [r7, #20]
 800313a:	e014      	b.n	8003166 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800313c:	4b25      	ldr	r3, [pc, #148]	; (80031d4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800313e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003140:	4a24      	ldr	r2, [pc, #144]	; (80031d4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003142:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003146:	6593      	str	r3, [r2, #88]	; 0x58
 8003148:	4b22      	ldr	r3, [pc, #136]	; (80031d4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800314a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800314c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003150:	60fb      	str	r3, [r7, #12]
 8003152:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003154:	f7ff f9f2 	bl	800253c <HAL_PWREx_GetVoltageRange>
 8003158:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800315a:	4b1e      	ldr	r3, [pc, #120]	; (80031d4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800315c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800315e:	4a1d      	ldr	r2, [pc, #116]	; (80031d4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003160:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003164:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003166:	697b      	ldr	r3, [r7, #20]
 8003168:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800316c:	d10b      	bne.n	8003186 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	2b80      	cmp	r3, #128	; 0x80
 8003172:	d919      	bls.n	80031a8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	2ba0      	cmp	r3, #160	; 0xa0
 8003178:	d902      	bls.n	8003180 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800317a:	2302      	movs	r3, #2
 800317c:	613b      	str	r3, [r7, #16]
 800317e:	e013      	b.n	80031a8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003180:	2301      	movs	r3, #1
 8003182:	613b      	str	r3, [r7, #16]
 8003184:	e010      	b.n	80031a8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	2b80      	cmp	r3, #128	; 0x80
 800318a:	d902      	bls.n	8003192 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800318c:	2303      	movs	r3, #3
 800318e:	613b      	str	r3, [r7, #16]
 8003190:	e00a      	b.n	80031a8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	2b80      	cmp	r3, #128	; 0x80
 8003196:	d102      	bne.n	800319e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003198:	2302      	movs	r3, #2
 800319a:	613b      	str	r3, [r7, #16]
 800319c:	e004      	b.n	80031a8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	2b70      	cmp	r3, #112	; 0x70
 80031a2:	d101      	bne.n	80031a8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80031a4:	2301      	movs	r3, #1
 80031a6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80031a8:	4b0b      	ldr	r3, [pc, #44]	; (80031d8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f023 0207 	bic.w	r2, r3, #7
 80031b0:	4909      	ldr	r1, [pc, #36]	; (80031d8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80031b2:	693b      	ldr	r3, [r7, #16]
 80031b4:	4313      	orrs	r3, r2
 80031b6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80031b8:	4b07      	ldr	r3, [pc, #28]	; (80031d8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f003 0307 	and.w	r3, r3, #7
 80031c0:	693a      	ldr	r2, [r7, #16]
 80031c2:	429a      	cmp	r2, r3
 80031c4:	d001      	beq.n	80031ca <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80031c6:	2301      	movs	r3, #1
 80031c8:	e000      	b.n	80031cc <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80031ca:	2300      	movs	r3, #0
}
 80031cc:	4618      	mov	r0, r3
 80031ce:	3718      	adds	r7, #24
 80031d0:	46bd      	mov	sp, r7
 80031d2:	bd80      	pop	{r7, pc}
 80031d4:	40021000 	.word	0x40021000
 80031d8:	40022000 	.word	0x40022000

080031dc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	b086      	sub	sp, #24
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80031e4:	2300      	movs	r3, #0
 80031e6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80031e8:	2300      	movs	r3, #0
 80031ea:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d041      	beq.n	800327c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80031fc:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003200:	d02a      	beq.n	8003258 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003202:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003206:	d824      	bhi.n	8003252 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003208:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800320c:	d008      	beq.n	8003220 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800320e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003212:	d81e      	bhi.n	8003252 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003214:	2b00      	cmp	r3, #0
 8003216:	d00a      	beq.n	800322e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003218:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800321c:	d010      	beq.n	8003240 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800321e:	e018      	b.n	8003252 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003220:	4b86      	ldr	r3, [pc, #536]	; (800343c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003222:	68db      	ldr	r3, [r3, #12]
 8003224:	4a85      	ldr	r2, [pc, #532]	; (800343c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003226:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800322a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800322c:	e015      	b.n	800325a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	3304      	adds	r3, #4
 8003232:	2100      	movs	r1, #0
 8003234:	4618      	mov	r0, r3
 8003236:	f000 fabb 	bl	80037b0 <RCCEx_PLLSAI1_Config>
 800323a:	4603      	mov	r3, r0
 800323c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800323e:	e00c      	b.n	800325a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	3320      	adds	r3, #32
 8003244:	2100      	movs	r1, #0
 8003246:	4618      	mov	r0, r3
 8003248:	f000 fba6 	bl	8003998 <RCCEx_PLLSAI2_Config>
 800324c:	4603      	mov	r3, r0
 800324e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003250:	e003      	b.n	800325a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003252:	2301      	movs	r3, #1
 8003254:	74fb      	strb	r3, [r7, #19]
      break;
 8003256:	e000      	b.n	800325a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003258:	bf00      	nop
    }

    if(ret == HAL_OK)
 800325a:	7cfb      	ldrb	r3, [r7, #19]
 800325c:	2b00      	cmp	r3, #0
 800325e:	d10b      	bne.n	8003278 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003260:	4b76      	ldr	r3, [pc, #472]	; (800343c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003262:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003266:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800326e:	4973      	ldr	r1, [pc, #460]	; (800343c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003270:	4313      	orrs	r3, r2
 8003272:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003276:	e001      	b.n	800327c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003278:	7cfb      	ldrb	r3, [r7, #19]
 800327a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003284:	2b00      	cmp	r3, #0
 8003286:	d041      	beq.n	800330c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800328c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003290:	d02a      	beq.n	80032e8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8003292:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003296:	d824      	bhi.n	80032e2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003298:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800329c:	d008      	beq.n	80032b0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800329e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80032a2:	d81e      	bhi.n	80032e2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d00a      	beq.n	80032be <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80032a8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80032ac:	d010      	beq.n	80032d0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80032ae:	e018      	b.n	80032e2 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80032b0:	4b62      	ldr	r3, [pc, #392]	; (800343c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032b2:	68db      	ldr	r3, [r3, #12]
 80032b4:	4a61      	ldr	r2, [pc, #388]	; (800343c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032ba:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80032bc:	e015      	b.n	80032ea <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	3304      	adds	r3, #4
 80032c2:	2100      	movs	r1, #0
 80032c4:	4618      	mov	r0, r3
 80032c6:	f000 fa73 	bl	80037b0 <RCCEx_PLLSAI1_Config>
 80032ca:	4603      	mov	r3, r0
 80032cc:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80032ce:	e00c      	b.n	80032ea <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	3320      	adds	r3, #32
 80032d4:	2100      	movs	r1, #0
 80032d6:	4618      	mov	r0, r3
 80032d8:	f000 fb5e 	bl	8003998 <RCCEx_PLLSAI2_Config>
 80032dc:	4603      	mov	r3, r0
 80032de:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80032e0:	e003      	b.n	80032ea <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80032e2:	2301      	movs	r3, #1
 80032e4:	74fb      	strb	r3, [r7, #19]
      break;
 80032e6:	e000      	b.n	80032ea <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80032e8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80032ea:	7cfb      	ldrb	r3, [r7, #19]
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d10b      	bne.n	8003308 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80032f0:	4b52      	ldr	r3, [pc, #328]	; (800343c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032f6:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80032fe:	494f      	ldr	r1, [pc, #316]	; (800343c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003300:	4313      	orrs	r3, r2
 8003302:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003306:	e001      	b.n	800330c <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003308:	7cfb      	ldrb	r3, [r7, #19]
 800330a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003314:	2b00      	cmp	r3, #0
 8003316:	f000 80a0 	beq.w	800345a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800331a:	2300      	movs	r3, #0
 800331c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800331e:	4b47      	ldr	r3, [pc, #284]	; (800343c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003320:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003322:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003326:	2b00      	cmp	r3, #0
 8003328:	d101      	bne.n	800332e <HAL_RCCEx_PeriphCLKConfig+0x152>
 800332a:	2301      	movs	r3, #1
 800332c:	e000      	b.n	8003330 <HAL_RCCEx_PeriphCLKConfig+0x154>
 800332e:	2300      	movs	r3, #0
 8003330:	2b00      	cmp	r3, #0
 8003332:	d00d      	beq.n	8003350 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003334:	4b41      	ldr	r3, [pc, #260]	; (800343c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003336:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003338:	4a40      	ldr	r2, [pc, #256]	; (800343c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800333a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800333e:	6593      	str	r3, [r2, #88]	; 0x58
 8003340:	4b3e      	ldr	r3, [pc, #248]	; (800343c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003342:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003344:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003348:	60bb      	str	r3, [r7, #8]
 800334a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800334c:	2301      	movs	r3, #1
 800334e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003350:	4b3b      	ldr	r3, [pc, #236]	; (8003440 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	4a3a      	ldr	r2, [pc, #232]	; (8003440 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003356:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800335a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800335c:	f7fe fbe2 	bl	8001b24 <HAL_GetTick>
 8003360:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003362:	e009      	b.n	8003378 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003364:	f7fe fbde 	bl	8001b24 <HAL_GetTick>
 8003368:	4602      	mov	r2, r0
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	1ad3      	subs	r3, r2, r3
 800336e:	2b02      	cmp	r3, #2
 8003370:	d902      	bls.n	8003378 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8003372:	2303      	movs	r3, #3
 8003374:	74fb      	strb	r3, [r7, #19]
        break;
 8003376:	e005      	b.n	8003384 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003378:	4b31      	ldr	r3, [pc, #196]	; (8003440 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003380:	2b00      	cmp	r3, #0
 8003382:	d0ef      	beq.n	8003364 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003384:	7cfb      	ldrb	r3, [r7, #19]
 8003386:	2b00      	cmp	r3, #0
 8003388:	d15c      	bne.n	8003444 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800338a:	4b2c      	ldr	r3, [pc, #176]	; (800343c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800338c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003390:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003394:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003396:	697b      	ldr	r3, [r7, #20]
 8003398:	2b00      	cmp	r3, #0
 800339a:	d01f      	beq.n	80033dc <HAL_RCCEx_PeriphCLKConfig+0x200>
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80033a2:	697a      	ldr	r2, [r7, #20]
 80033a4:	429a      	cmp	r2, r3
 80033a6:	d019      	beq.n	80033dc <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80033a8:	4b24      	ldr	r3, [pc, #144]	; (800343c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80033b2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80033b4:	4b21      	ldr	r3, [pc, #132]	; (800343c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033ba:	4a20      	ldr	r2, [pc, #128]	; (800343c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80033c4:	4b1d      	ldr	r3, [pc, #116]	; (800343c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033ca:	4a1c      	ldr	r2, [pc, #112]	; (800343c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033cc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033d0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80033d4:	4a19      	ldr	r2, [pc, #100]	; (800343c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033d6:	697b      	ldr	r3, [r7, #20]
 80033d8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80033dc:	697b      	ldr	r3, [r7, #20]
 80033de:	f003 0301 	and.w	r3, r3, #1
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d016      	beq.n	8003414 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033e6:	f7fe fb9d 	bl	8001b24 <HAL_GetTick>
 80033ea:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80033ec:	e00b      	b.n	8003406 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033ee:	f7fe fb99 	bl	8001b24 <HAL_GetTick>
 80033f2:	4602      	mov	r2, r0
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	1ad3      	subs	r3, r2, r3
 80033f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80033fc:	4293      	cmp	r3, r2
 80033fe:	d902      	bls.n	8003406 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003400:	2303      	movs	r3, #3
 8003402:	74fb      	strb	r3, [r7, #19]
            break;
 8003404:	e006      	b.n	8003414 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003406:	4b0d      	ldr	r3, [pc, #52]	; (800343c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003408:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800340c:	f003 0302 	and.w	r3, r3, #2
 8003410:	2b00      	cmp	r3, #0
 8003412:	d0ec      	beq.n	80033ee <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003414:	7cfb      	ldrb	r3, [r7, #19]
 8003416:	2b00      	cmp	r3, #0
 8003418:	d10c      	bne.n	8003434 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800341a:	4b08      	ldr	r3, [pc, #32]	; (800343c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800341c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003420:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800342a:	4904      	ldr	r1, [pc, #16]	; (800343c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800342c:	4313      	orrs	r3, r2
 800342e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003432:	e009      	b.n	8003448 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003434:	7cfb      	ldrb	r3, [r7, #19]
 8003436:	74bb      	strb	r3, [r7, #18]
 8003438:	e006      	b.n	8003448 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800343a:	bf00      	nop
 800343c:	40021000 	.word	0x40021000
 8003440:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003444:	7cfb      	ldrb	r3, [r7, #19]
 8003446:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003448:	7c7b      	ldrb	r3, [r7, #17]
 800344a:	2b01      	cmp	r3, #1
 800344c:	d105      	bne.n	800345a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800344e:	4b9e      	ldr	r3, [pc, #632]	; (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003450:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003452:	4a9d      	ldr	r2, [pc, #628]	; (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003454:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003458:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f003 0301 	and.w	r3, r3, #1
 8003462:	2b00      	cmp	r3, #0
 8003464:	d00a      	beq.n	800347c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003466:	4b98      	ldr	r3, [pc, #608]	; (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003468:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800346c:	f023 0203 	bic.w	r2, r3, #3
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003474:	4994      	ldr	r1, [pc, #592]	; (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003476:	4313      	orrs	r3, r2
 8003478:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f003 0302 	and.w	r3, r3, #2
 8003484:	2b00      	cmp	r3, #0
 8003486:	d00a      	beq.n	800349e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003488:	4b8f      	ldr	r3, [pc, #572]	; (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800348a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800348e:	f023 020c 	bic.w	r2, r3, #12
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003496:	498c      	ldr	r1, [pc, #560]	; (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003498:	4313      	orrs	r3, r2
 800349a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f003 0304 	and.w	r3, r3, #4
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d00a      	beq.n	80034c0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80034aa:	4b87      	ldr	r3, [pc, #540]	; (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034b0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034b8:	4983      	ldr	r1, [pc, #524]	; (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034ba:	4313      	orrs	r3, r2
 80034bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f003 0308 	and.w	r3, r3, #8
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d00a      	beq.n	80034e2 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80034cc:	4b7e      	ldr	r3, [pc, #504]	; (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034d2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034da:	497b      	ldr	r1, [pc, #492]	; (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034dc:	4313      	orrs	r3, r2
 80034de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f003 0310 	and.w	r3, r3, #16
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d00a      	beq.n	8003504 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80034ee:	4b76      	ldr	r3, [pc, #472]	; (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034f4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80034fc:	4972      	ldr	r1, [pc, #456]	; (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034fe:	4313      	orrs	r3, r2
 8003500:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f003 0320 	and.w	r3, r3, #32
 800350c:	2b00      	cmp	r3, #0
 800350e:	d00a      	beq.n	8003526 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003510:	4b6d      	ldr	r3, [pc, #436]	; (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003512:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003516:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800351e:	496a      	ldr	r1, [pc, #424]	; (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003520:	4313      	orrs	r3, r2
 8003522:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800352e:	2b00      	cmp	r3, #0
 8003530:	d00a      	beq.n	8003548 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003532:	4b65      	ldr	r3, [pc, #404]	; (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003534:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003538:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003540:	4961      	ldr	r1, [pc, #388]	; (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003542:	4313      	orrs	r3, r2
 8003544:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003550:	2b00      	cmp	r3, #0
 8003552:	d00a      	beq.n	800356a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003554:	4b5c      	ldr	r3, [pc, #368]	; (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003556:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800355a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003562:	4959      	ldr	r1, [pc, #356]	; (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003564:	4313      	orrs	r3, r2
 8003566:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003572:	2b00      	cmp	r3, #0
 8003574:	d00a      	beq.n	800358c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003576:	4b54      	ldr	r3, [pc, #336]	; (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003578:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800357c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003584:	4950      	ldr	r1, [pc, #320]	; (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003586:	4313      	orrs	r3, r2
 8003588:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003594:	2b00      	cmp	r3, #0
 8003596:	d00a      	beq.n	80035ae <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003598:	4b4b      	ldr	r3, [pc, #300]	; (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800359a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800359e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035a6:	4948      	ldr	r1, [pc, #288]	; (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035a8:	4313      	orrs	r3, r2
 80035aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d00a      	beq.n	80035d0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80035ba:	4b43      	ldr	r3, [pc, #268]	; (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035c0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035c8:	493f      	ldr	r1, [pc, #252]	; (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035ca:	4313      	orrs	r3, r2
 80035cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d028      	beq.n	800362e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80035dc:	4b3a      	ldr	r3, [pc, #232]	; (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035e2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80035ea:	4937      	ldr	r1, [pc, #220]	; (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035ec:	4313      	orrs	r3, r2
 80035ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80035f6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80035fa:	d106      	bne.n	800360a <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80035fc:	4b32      	ldr	r3, [pc, #200]	; (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035fe:	68db      	ldr	r3, [r3, #12]
 8003600:	4a31      	ldr	r2, [pc, #196]	; (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003602:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003606:	60d3      	str	r3, [r2, #12]
 8003608:	e011      	b.n	800362e <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800360e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003612:	d10c      	bne.n	800362e <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	3304      	adds	r3, #4
 8003618:	2101      	movs	r1, #1
 800361a:	4618      	mov	r0, r3
 800361c:	f000 f8c8 	bl	80037b0 <RCCEx_PLLSAI1_Config>
 8003620:	4603      	mov	r3, r0
 8003622:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003624:	7cfb      	ldrb	r3, [r7, #19]
 8003626:	2b00      	cmp	r3, #0
 8003628:	d001      	beq.n	800362e <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800362a:	7cfb      	ldrb	r3, [r7, #19]
 800362c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003636:	2b00      	cmp	r3, #0
 8003638:	d028      	beq.n	800368c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800363a:	4b23      	ldr	r3, [pc, #140]	; (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800363c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003640:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003648:	491f      	ldr	r1, [pc, #124]	; (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800364a:	4313      	orrs	r3, r2
 800364c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003654:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003658:	d106      	bne.n	8003668 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800365a:	4b1b      	ldr	r3, [pc, #108]	; (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800365c:	68db      	ldr	r3, [r3, #12]
 800365e:	4a1a      	ldr	r2, [pc, #104]	; (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003660:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003664:	60d3      	str	r3, [r2, #12]
 8003666:	e011      	b.n	800368c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800366c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003670:	d10c      	bne.n	800368c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	3304      	adds	r3, #4
 8003676:	2101      	movs	r1, #1
 8003678:	4618      	mov	r0, r3
 800367a:	f000 f899 	bl	80037b0 <RCCEx_PLLSAI1_Config>
 800367e:	4603      	mov	r3, r0
 8003680:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003682:	7cfb      	ldrb	r3, [r7, #19]
 8003684:	2b00      	cmp	r3, #0
 8003686:	d001      	beq.n	800368c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003688:	7cfb      	ldrb	r3, [r7, #19]
 800368a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003694:	2b00      	cmp	r3, #0
 8003696:	d02b      	beq.n	80036f0 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003698:	4b0b      	ldr	r3, [pc, #44]	; (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800369a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800369e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80036a6:	4908      	ldr	r1, [pc, #32]	; (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036a8:	4313      	orrs	r3, r2
 80036aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80036b2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80036b6:	d109      	bne.n	80036cc <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80036b8:	4b03      	ldr	r3, [pc, #12]	; (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036ba:	68db      	ldr	r3, [r3, #12]
 80036bc:	4a02      	ldr	r2, [pc, #8]	; (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036be:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80036c2:	60d3      	str	r3, [r2, #12]
 80036c4:	e014      	b.n	80036f0 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80036c6:	bf00      	nop
 80036c8:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80036d0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80036d4:	d10c      	bne.n	80036f0 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	3304      	adds	r3, #4
 80036da:	2101      	movs	r1, #1
 80036dc:	4618      	mov	r0, r3
 80036de:	f000 f867 	bl	80037b0 <RCCEx_PLLSAI1_Config>
 80036e2:	4603      	mov	r3, r0
 80036e4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80036e6:	7cfb      	ldrb	r3, [r7, #19]
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d001      	beq.n	80036f0 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80036ec:	7cfb      	ldrb	r3, [r7, #19]
 80036ee:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d02f      	beq.n	800375c <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80036fc:	4b2b      	ldr	r3, [pc, #172]	; (80037ac <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80036fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003702:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800370a:	4928      	ldr	r1, [pc, #160]	; (80037ac <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800370c:	4313      	orrs	r3, r2
 800370e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003716:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800371a:	d10d      	bne.n	8003738 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	3304      	adds	r3, #4
 8003720:	2102      	movs	r1, #2
 8003722:	4618      	mov	r0, r3
 8003724:	f000 f844 	bl	80037b0 <RCCEx_PLLSAI1_Config>
 8003728:	4603      	mov	r3, r0
 800372a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800372c:	7cfb      	ldrb	r3, [r7, #19]
 800372e:	2b00      	cmp	r3, #0
 8003730:	d014      	beq.n	800375c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003732:	7cfb      	ldrb	r3, [r7, #19]
 8003734:	74bb      	strb	r3, [r7, #18]
 8003736:	e011      	b.n	800375c <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800373c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003740:	d10c      	bne.n	800375c <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	3320      	adds	r3, #32
 8003746:	2102      	movs	r1, #2
 8003748:	4618      	mov	r0, r3
 800374a:	f000 f925 	bl	8003998 <RCCEx_PLLSAI2_Config>
 800374e:	4603      	mov	r3, r0
 8003750:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003752:	7cfb      	ldrb	r3, [r7, #19]
 8003754:	2b00      	cmp	r3, #0
 8003756:	d001      	beq.n	800375c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003758:	7cfb      	ldrb	r3, [r7, #19]
 800375a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003764:	2b00      	cmp	r3, #0
 8003766:	d00a      	beq.n	800377e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003768:	4b10      	ldr	r3, [pc, #64]	; (80037ac <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800376a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800376e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003776:	490d      	ldr	r1, [pc, #52]	; (80037ac <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003778:	4313      	orrs	r3, r2
 800377a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003786:	2b00      	cmp	r3, #0
 8003788:	d00b      	beq.n	80037a2 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800378a:	4b08      	ldr	r3, [pc, #32]	; (80037ac <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800378c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003790:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800379a:	4904      	ldr	r1, [pc, #16]	; (80037ac <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800379c:	4313      	orrs	r3, r2
 800379e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80037a2:	7cbb      	ldrb	r3, [r7, #18]
}
 80037a4:	4618      	mov	r0, r3
 80037a6:	3718      	adds	r7, #24
 80037a8:	46bd      	mov	sp, r7
 80037aa:	bd80      	pop	{r7, pc}
 80037ac:	40021000 	.word	0x40021000

080037b0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80037b0:	b580      	push	{r7, lr}
 80037b2:	b084      	sub	sp, #16
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]
 80037b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80037ba:	2300      	movs	r3, #0
 80037bc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80037be:	4b75      	ldr	r3, [pc, #468]	; (8003994 <RCCEx_PLLSAI1_Config+0x1e4>)
 80037c0:	68db      	ldr	r3, [r3, #12]
 80037c2:	f003 0303 	and.w	r3, r3, #3
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d018      	beq.n	80037fc <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80037ca:	4b72      	ldr	r3, [pc, #456]	; (8003994 <RCCEx_PLLSAI1_Config+0x1e4>)
 80037cc:	68db      	ldr	r3, [r3, #12]
 80037ce:	f003 0203 	and.w	r2, r3, #3
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	429a      	cmp	r2, r3
 80037d8:	d10d      	bne.n	80037f6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
       ||
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d009      	beq.n	80037f6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80037e2:	4b6c      	ldr	r3, [pc, #432]	; (8003994 <RCCEx_PLLSAI1_Config+0x1e4>)
 80037e4:	68db      	ldr	r3, [r3, #12]
 80037e6:	091b      	lsrs	r3, r3, #4
 80037e8:	f003 0307 	and.w	r3, r3, #7
 80037ec:	1c5a      	adds	r2, r3, #1
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	685b      	ldr	r3, [r3, #4]
       ||
 80037f2:	429a      	cmp	r2, r3
 80037f4:	d047      	beq.n	8003886 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80037f6:	2301      	movs	r3, #1
 80037f8:	73fb      	strb	r3, [r7, #15]
 80037fa:	e044      	b.n	8003886 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	2b03      	cmp	r3, #3
 8003802:	d018      	beq.n	8003836 <RCCEx_PLLSAI1_Config+0x86>
 8003804:	2b03      	cmp	r3, #3
 8003806:	d825      	bhi.n	8003854 <RCCEx_PLLSAI1_Config+0xa4>
 8003808:	2b01      	cmp	r3, #1
 800380a:	d002      	beq.n	8003812 <RCCEx_PLLSAI1_Config+0x62>
 800380c:	2b02      	cmp	r3, #2
 800380e:	d009      	beq.n	8003824 <RCCEx_PLLSAI1_Config+0x74>
 8003810:	e020      	b.n	8003854 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003812:	4b60      	ldr	r3, [pc, #384]	; (8003994 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f003 0302 	and.w	r3, r3, #2
 800381a:	2b00      	cmp	r3, #0
 800381c:	d11d      	bne.n	800385a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800381e:	2301      	movs	r3, #1
 8003820:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003822:	e01a      	b.n	800385a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003824:	4b5b      	ldr	r3, [pc, #364]	; (8003994 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800382c:	2b00      	cmp	r3, #0
 800382e:	d116      	bne.n	800385e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003830:	2301      	movs	r3, #1
 8003832:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003834:	e013      	b.n	800385e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003836:	4b57      	ldr	r3, [pc, #348]	; (8003994 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800383e:	2b00      	cmp	r3, #0
 8003840:	d10f      	bne.n	8003862 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003842:	4b54      	ldr	r3, [pc, #336]	; (8003994 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800384a:	2b00      	cmp	r3, #0
 800384c:	d109      	bne.n	8003862 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800384e:	2301      	movs	r3, #1
 8003850:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003852:	e006      	b.n	8003862 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003854:	2301      	movs	r3, #1
 8003856:	73fb      	strb	r3, [r7, #15]
      break;
 8003858:	e004      	b.n	8003864 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800385a:	bf00      	nop
 800385c:	e002      	b.n	8003864 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800385e:	bf00      	nop
 8003860:	e000      	b.n	8003864 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003862:	bf00      	nop
    }

    if(status == HAL_OK)
 8003864:	7bfb      	ldrb	r3, [r7, #15]
 8003866:	2b00      	cmp	r3, #0
 8003868:	d10d      	bne.n	8003886 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800386a:	4b4a      	ldr	r3, [pc, #296]	; (8003994 <RCCEx_PLLSAI1_Config+0x1e4>)
 800386c:	68db      	ldr	r3, [r3, #12]
 800386e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	6819      	ldr	r1, [r3, #0]
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	685b      	ldr	r3, [r3, #4]
 800387a:	3b01      	subs	r3, #1
 800387c:	011b      	lsls	r3, r3, #4
 800387e:	430b      	orrs	r3, r1
 8003880:	4944      	ldr	r1, [pc, #272]	; (8003994 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003882:	4313      	orrs	r3, r2
 8003884:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003886:	7bfb      	ldrb	r3, [r7, #15]
 8003888:	2b00      	cmp	r3, #0
 800388a:	d17d      	bne.n	8003988 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800388c:	4b41      	ldr	r3, [pc, #260]	; (8003994 <RCCEx_PLLSAI1_Config+0x1e4>)
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	4a40      	ldr	r2, [pc, #256]	; (8003994 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003892:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003896:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003898:	f7fe f944 	bl	8001b24 <HAL_GetTick>
 800389c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800389e:	e009      	b.n	80038b4 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80038a0:	f7fe f940 	bl	8001b24 <HAL_GetTick>
 80038a4:	4602      	mov	r2, r0
 80038a6:	68bb      	ldr	r3, [r7, #8]
 80038a8:	1ad3      	subs	r3, r2, r3
 80038aa:	2b02      	cmp	r3, #2
 80038ac:	d902      	bls.n	80038b4 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80038ae:	2303      	movs	r3, #3
 80038b0:	73fb      	strb	r3, [r7, #15]
        break;
 80038b2:	e005      	b.n	80038c0 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80038b4:	4b37      	ldr	r3, [pc, #220]	; (8003994 <RCCEx_PLLSAI1_Config+0x1e4>)
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d1ef      	bne.n	80038a0 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80038c0:	7bfb      	ldrb	r3, [r7, #15]
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d160      	bne.n	8003988 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80038c6:	683b      	ldr	r3, [r7, #0]
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d111      	bne.n	80038f0 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80038cc:	4b31      	ldr	r3, [pc, #196]	; (8003994 <RCCEx_PLLSAI1_Config+0x1e4>)
 80038ce:	691b      	ldr	r3, [r3, #16]
 80038d0:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80038d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80038d8:	687a      	ldr	r2, [r7, #4]
 80038da:	6892      	ldr	r2, [r2, #8]
 80038dc:	0211      	lsls	r1, r2, #8
 80038de:	687a      	ldr	r2, [r7, #4]
 80038e0:	68d2      	ldr	r2, [r2, #12]
 80038e2:	0912      	lsrs	r2, r2, #4
 80038e4:	0452      	lsls	r2, r2, #17
 80038e6:	430a      	orrs	r2, r1
 80038e8:	492a      	ldr	r1, [pc, #168]	; (8003994 <RCCEx_PLLSAI1_Config+0x1e4>)
 80038ea:	4313      	orrs	r3, r2
 80038ec:	610b      	str	r3, [r1, #16]
 80038ee:	e027      	b.n	8003940 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80038f0:	683b      	ldr	r3, [r7, #0]
 80038f2:	2b01      	cmp	r3, #1
 80038f4:	d112      	bne.n	800391c <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80038f6:	4b27      	ldr	r3, [pc, #156]	; (8003994 <RCCEx_PLLSAI1_Config+0x1e4>)
 80038f8:	691b      	ldr	r3, [r3, #16]
 80038fa:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80038fe:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003902:	687a      	ldr	r2, [r7, #4]
 8003904:	6892      	ldr	r2, [r2, #8]
 8003906:	0211      	lsls	r1, r2, #8
 8003908:	687a      	ldr	r2, [r7, #4]
 800390a:	6912      	ldr	r2, [r2, #16]
 800390c:	0852      	lsrs	r2, r2, #1
 800390e:	3a01      	subs	r2, #1
 8003910:	0552      	lsls	r2, r2, #21
 8003912:	430a      	orrs	r2, r1
 8003914:	491f      	ldr	r1, [pc, #124]	; (8003994 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003916:	4313      	orrs	r3, r2
 8003918:	610b      	str	r3, [r1, #16]
 800391a:	e011      	b.n	8003940 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800391c:	4b1d      	ldr	r3, [pc, #116]	; (8003994 <RCCEx_PLLSAI1_Config+0x1e4>)
 800391e:	691b      	ldr	r3, [r3, #16]
 8003920:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003924:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003928:	687a      	ldr	r2, [r7, #4]
 800392a:	6892      	ldr	r2, [r2, #8]
 800392c:	0211      	lsls	r1, r2, #8
 800392e:	687a      	ldr	r2, [r7, #4]
 8003930:	6952      	ldr	r2, [r2, #20]
 8003932:	0852      	lsrs	r2, r2, #1
 8003934:	3a01      	subs	r2, #1
 8003936:	0652      	lsls	r2, r2, #25
 8003938:	430a      	orrs	r2, r1
 800393a:	4916      	ldr	r1, [pc, #88]	; (8003994 <RCCEx_PLLSAI1_Config+0x1e4>)
 800393c:	4313      	orrs	r3, r2
 800393e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003940:	4b14      	ldr	r3, [pc, #80]	; (8003994 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	4a13      	ldr	r2, [pc, #76]	; (8003994 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003946:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800394a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800394c:	f7fe f8ea 	bl	8001b24 <HAL_GetTick>
 8003950:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003952:	e009      	b.n	8003968 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003954:	f7fe f8e6 	bl	8001b24 <HAL_GetTick>
 8003958:	4602      	mov	r2, r0
 800395a:	68bb      	ldr	r3, [r7, #8]
 800395c:	1ad3      	subs	r3, r2, r3
 800395e:	2b02      	cmp	r3, #2
 8003960:	d902      	bls.n	8003968 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8003962:	2303      	movs	r3, #3
 8003964:	73fb      	strb	r3, [r7, #15]
          break;
 8003966:	e005      	b.n	8003974 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003968:	4b0a      	ldr	r3, [pc, #40]	; (8003994 <RCCEx_PLLSAI1_Config+0x1e4>)
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003970:	2b00      	cmp	r3, #0
 8003972:	d0ef      	beq.n	8003954 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003974:	7bfb      	ldrb	r3, [r7, #15]
 8003976:	2b00      	cmp	r3, #0
 8003978:	d106      	bne.n	8003988 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800397a:	4b06      	ldr	r3, [pc, #24]	; (8003994 <RCCEx_PLLSAI1_Config+0x1e4>)
 800397c:	691a      	ldr	r2, [r3, #16]
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	699b      	ldr	r3, [r3, #24]
 8003982:	4904      	ldr	r1, [pc, #16]	; (8003994 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003984:	4313      	orrs	r3, r2
 8003986:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003988:	7bfb      	ldrb	r3, [r7, #15]
}
 800398a:	4618      	mov	r0, r3
 800398c:	3710      	adds	r7, #16
 800398e:	46bd      	mov	sp, r7
 8003990:	bd80      	pop	{r7, pc}
 8003992:	bf00      	nop
 8003994:	40021000 	.word	0x40021000

08003998 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003998:	b580      	push	{r7, lr}
 800399a:	b084      	sub	sp, #16
 800399c:	af00      	add	r7, sp, #0
 800399e:	6078      	str	r0, [r7, #4]
 80039a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80039a2:	2300      	movs	r3, #0
 80039a4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80039a6:	4b6a      	ldr	r3, [pc, #424]	; (8003b50 <RCCEx_PLLSAI2_Config+0x1b8>)
 80039a8:	68db      	ldr	r3, [r3, #12]
 80039aa:	f003 0303 	and.w	r3, r3, #3
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d018      	beq.n	80039e4 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80039b2:	4b67      	ldr	r3, [pc, #412]	; (8003b50 <RCCEx_PLLSAI2_Config+0x1b8>)
 80039b4:	68db      	ldr	r3, [r3, #12]
 80039b6:	f003 0203 	and.w	r2, r3, #3
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	429a      	cmp	r2, r3
 80039c0:	d10d      	bne.n	80039de <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
       ||
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d009      	beq.n	80039de <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80039ca:	4b61      	ldr	r3, [pc, #388]	; (8003b50 <RCCEx_PLLSAI2_Config+0x1b8>)
 80039cc:	68db      	ldr	r3, [r3, #12]
 80039ce:	091b      	lsrs	r3, r3, #4
 80039d0:	f003 0307 	and.w	r3, r3, #7
 80039d4:	1c5a      	adds	r2, r3, #1
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	685b      	ldr	r3, [r3, #4]
       ||
 80039da:	429a      	cmp	r2, r3
 80039dc:	d047      	beq.n	8003a6e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80039de:	2301      	movs	r3, #1
 80039e0:	73fb      	strb	r3, [r7, #15]
 80039e2:	e044      	b.n	8003a6e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	2b03      	cmp	r3, #3
 80039ea:	d018      	beq.n	8003a1e <RCCEx_PLLSAI2_Config+0x86>
 80039ec:	2b03      	cmp	r3, #3
 80039ee:	d825      	bhi.n	8003a3c <RCCEx_PLLSAI2_Config+0xa4>
 80039f0:	2b01      	cmp	r3, #1
 80039f2:	d002      	beq.n	80039fa <RCCEx_PLLSAI2_Config+0x62>
 80039f4:	2b02      	cmp	r3, #2
 80039f6:	d009      	beq.n	8003a0c <RCCEx_PLLSAI2_Config+0x74>
 80039f8:	e020      	b.n	8003a3c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80039fa:	4b55      	ldr	r3, [pc, #340]	; (8003b50 <RCCEx_PLLSAI2_Config+0x1b8>)
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f003 0302 	and.w	r3, r3, #2
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d11d      	bne.n	8003a42 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8003a06:	2301      	movs	r3, #1
 8003a08:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a0a:	e01a      	b.n	8003a42 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003a0c:	4b50      	ldr	r3, [pc, #320]	; (8003b50 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d116      	bne.n	8003a46 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003a18:	2301      	movs	r3, #1
 8003a1a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a1c:	e013      	b.n	8003a46 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003a1e:	4b4c      	ldr	r3, [pc, #304]	; (8003b50 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d10f      	bne.n	8003a4a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003a2a:	4b49      	ldr	r3, [pc, #292]	; (8003b50 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d109      	bne.n	8003a4a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003a36:	2301      	movs	r3, #1
 8003a38:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003a3a:	e006      	b.n	8003a4a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003a3c:	2301      	movs	r3, #1
 8003a3e:	73fb      	strb	r3, [r7, #15]
      break;
 8003a40:	e004      	b.n	8003a4c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003a42:	bf00      	nop
 8003a44:	e002      	b.n	8003a4c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003a46:	bf00      	nop
 8003a48:	e000      	b.n	8003a4c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003a4a:	bf00      	nop
    }

    if(status == HAL_OK)
 8003a4c:	7bfb      	ldrb	r3, [r7, #15]
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d10d      	bne.n	8003a6e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003a52:	4b3f      	ldr	r3, [pc, #252]	; (8003b50 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a54:	68db      	ldr	r3, [r3, #12]
 8003a56:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	6819      	ldr	r1, [r3, #0]
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	685b      	ldr	r3, [r3, #4]
 8003a62:	3b01      	subs	r3, #1
 8003a64:	011b      	lsls	r3, r3, #4
 8003a66:	430b      	orrs	r3, r1
 8003a68:	4939      	ldr	r1, [pc, #228]	; (8003b50 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a6a:	4313      	orrs	r3, r2
 8003a6c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003a6e:	7bfb      	ldrb	r3, [r7, #15]
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d167      	bne.n	8003b44 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003a74:	4b36      	ldr	r3, [pc, #216]	; (8003b50 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	4a35      	ldr	r2, [pc, #212]	; (8003b50 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a7a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a7e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a80:	f7fe f850 	bl	8001b24 <HAL_GetTick>
 8003a84:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003a86:	e009      	b.n	8003a9c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003a88:	f7fe f84c 	bl	8001b24 <HAL_GetTick>
 8003a8c:	4602      	mov	r2, r0
 8003a8e:	68bb      	ldr	r3, [r7, #8]
 8003a90:	1ad3      	subs	r3, r2, r3
 8003a92:	2b02      	cmp	r3, #2
 8003a94:	d902      	bls.n	8003a9c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003a96:	2303      	movs	r3, #3
 8003a98:	73fb      	strb	r3, [r7, #15]
        break;
 8003a9a:	e005      	b.n	8003aa8 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003a9c:	4b2c      	ldr	r3, [pc, #176]	; (8003b50 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d1ef      	bne.n	8003a88 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003aa8:	7bfb      	ldrb	r3, [r7, #15]
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d14a      	bne.n	8003b44 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003aae:	683b      	ldr	r3, [r7, #0]
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d111      	bne.n	8003ad8 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003ab4:	4b26      	ldr	r3, [pc, #152]	; (8003b50 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ab6:	695b      	ldr	r3, [r3, #20]
 8003ab8:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003abc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ac0:	687a      	ldr	r2, [r7, #4]
 8003ac2:	6892      	ldr	r2, [r2, #8]
 8003ac4:	0211      	lsls	r1, r2, #8
 8003ac6:	687a      	ldr	r2, [r7, #4]
 8003ac8:	68d2      	ldr	r2, [r2, #12]
 8003aca:	0912      	lsrs	r2, r2, #4
 8003acc:	0452      	lsls	r2, r2, #17
 8003ace:	430a      	orrs	r2, r1
 8003ad0:	491f      	ldr	r1, [pc, #124]	; (8003b50 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ad2:	4313      	orrs	r3, r2
 8003ad4:	614b      	str	r3, [r1, #20]
 8003ad6:	e011      	b.n	8003afc <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003ad8:	4b1d      	ldr	r3, [pc, #116]	; (8003b50 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ada:	695b      	ldr	r3, [r3, #20]
 8003adc:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003ae0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003ae4:	687a      	ldr	r2, [r7, #4]
 8003ae6:	6892      	ldr	r2, [r2, #8]
 8003ae8:	0211      	lsls	r1, r2, #8
 8003aea:	687a      	ldr	r2, [r7, #4]
 8003aec:	6912      	ldr	r2, [r2, #16]
 8003aee:	0852      	lsrs	r2, r2, #1
 8003af0:	3a01      	subs	r2, #1
 8003af2:	0652      	lsls	r2, r2, #25
 8003af4:	430a      	orrs	r2, r1
 8003af6:	4916      	ldr	r1, [pc, #88]	; (8003b50 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003af8:	4313      	orrs	r3, r2
 8003afa:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003afc:	4b14      	ldr	r3, [pc, #80]	; (8003b50 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	4a13      	ldr	r2, [pc, #76]	; (8003b50 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b02:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b06:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b08:	f7fe f80c 	bl	8001b24 <HAL_GetTick>
 8003b0c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003b0e:	e009      	b.n	8003b24 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003b10:	f7fe f808 	bl	8001b24 <HAL_GetTick>
 8003b14:	4602      	mov	r2, r0
 8003b16:	68bb      	ldr	r3, [r7, #8]
 8003b18:	1ad3      	subs	r3, r2, r3
 8003b1a:	2b02      	cmp	r3, #2
 8003b1c:	d902      	bls.n	8003b24 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8003b1e:	2303      	movs	r3, #3
 8003b20:	73fb      	strb	r3, [r7, #15]
          break;
 8003b22:	e005      	b.n	8003b30 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003b24:	4b0a      	ldr	r3, [pc, #40]	; (8003b50 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d0ef      	beq.n	8003b10 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003b30:	7bfb      	ldrb	r3, [r7, #15]
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d106      	bne.n	8003b44 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003b36:	4b06      	ldr	r3, [pc, #24]	; (8003b50 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b38:	695a      	ldr	r2, [r3, #20]
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	695b      	ldr	r3, [r3, #20]
 8003b3e:	4904      	ldr	r1, [pc, #16]	; (8003b50 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b40:	4313      	orrs	r3, r2
 8003b42:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003b44:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b46:	4618      	mov	r0, r3
 8003b48:	3710      	adds	r7, #16
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	bd80      	pop	{r7, pc}
 8003b4e:	bf00      	nop
 8003b50:	40021000 	.word	0x40021000

08003b54 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003b54:	b580      	push	{r7, lr}
 8003b56:	b082      	sub	sp, #8
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d101      	bne.n	8003b66 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003b62:	2301      	movs	r3, #1
 8003b64:	e040      	b.n	8003be8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d106      	bne.n	8003b7c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	2200      	movs	r2, #0
 8003b72:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003b76:	6878      	ldr	r0, [r7, #4]
 8003b78:	f7fd fde2 	bl	8001740 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2224      	movs	r2, #36	; 0x24
 8003b80:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	681a      	ldr	r2, [r3, #0]
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f022 0201 	bic.w	r2, r2, #1
 8003b90:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003b92:	6878      	ldr	r0, [r7, #4]
 8003b94:	f000 fb26 	bl	80041e4 <UART_SetConfig>
 8003b98:	4603      	mov	r3, r0
 8003b9a:	2b01      	cmp	r3, #1
 8003b9c:	d101      	bne.n	8003ba2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003b9e:	2301      	movs	r3, #1
 8003ba0:	e022      	b.n	8003be8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d002      	beq.n	8003bb0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003baa:	6878      	ldr	r0, [r7, #4]
 8003bac:	f000 fda4 	bl	80046f8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	685a      	ldr	r2, [r3, #4]
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003bbe:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	689a      	ldr	r2, [r3, #8]
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003bce:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	681a      	ldr	r2, [r3, #0]
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f042 0201 	orr.w	r2, r2, #1
 8003bde:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003be0:	6878      	ldr	r0, [r7, #4]
 8003be2:	f000 fe2b 	bl	800483c <UART_CheckIdleState>
 8003be6:	4603      	mov	r3, r0
}
 8003be8:	4618      	mov	r0, r3
 8003bea:	3708      	adds	r7, #8
 8003bec:	46bd      	mov	sp, r7
 8003bee:	bd80      	pop	{r7, pc}

08003bf0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003bf0:	b580      	push	{r7, lr}
 8003bf2:	b08a      	sub	sp, #40	; 0x28
 8003bf4:	af02      	add	r7, sp, #8
 8003bf6:	60f8      	str	r0, [r7, #12]
 8003bf8:	60b9      	str	r1, [r7, #8]
 8003bfa:	603b      	str	r3, [r7, #0]
 8003bfc:	4613      	mov	r3, r2
 8003bfe:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003c04:	2b20      	cmp	r3, #32
 8003c06:	f040 8082 	bne.w	8003d0e <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003c0a:	68bb      	ldr	r3, [r7, #8]
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d002      	beq.n	8003c16 <HAL_UART_Transmit+0x26>
 8003c10:	88fb      	ldrh	r3, [r7, #6]
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d101      	bne.n	8003c1a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003c16:	2301      	movs	r3, #1
 8003c18:	e07a      	b.n	8003d10 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003c20:	2b01      	cmp	r3, #1
 8003c22:	d101      	bne.n	8003c28 <HAL_UART_Transmit+0x38>
 8003c24:	2302      	movs	r3, #2
 8003c26:	e073      	b.n	8003d10 <HAL_UART_Transmit+0x120>
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	2201      	movs	r2, #1
 8003c2c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	2200      	movs	r2, #0
 8003c34:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	2221      	movs	r2, #33	; 0x21
 8003c3c:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003c3e:	f7fd ff71 	bl	8001b24 <HAL_GetTick>
 8003c42:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	88fa      	ldrh	r2, [r7, #6]
 8003c48:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	88fa      	ldrh	r2, [r7, #6]
 8003c50:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	689b      	ldr	r3, [r3, #8]
 8003c58:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c5c:	d108      	bne.n	8003c70 <HAL_UART_Transmit+0x80>
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	691b      	ldr	r3, [r3, #16]
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d104      	bne.n	8003c70 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8003c66:	2300      	movs	r3, #0
 8003c68:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003c6a:	68bb      	ldr	r3, [r7, #8]
 8003c6c:	61bb      	str	r3, [r7, #24]
 8003c6e:	e003      	b.n	8003c78 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8003c70:	68bb      	ldr	r3, [r7, #8]
 8003c72:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003c74:	2300      	movs	r3, #0
 8003c76:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	2200      	movs	r2, #0
 8003c7c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8003c80:	e02d      	b.n	8003cde <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003c82:	683b      	ldr	r3, [r7, #0]
 8003c84:	9300      	str	r3, [sp, #0]
 8003c86:	697b      	ldr	r3, [r7, #20]
 8003c88:	2200      	movs	r2, #0
 8003c8a:	2180      	movs	r1, #128	; 0x80
 8003c8c:	68f8      	ldr	r0, [r7, #12]
 8003c8e:	f000 fe1e 	bl	80048ce <UART_WaitOnFlagUntilTimeout>
 8003c92:	4603      	mov	r3, r0
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d001      	beq.n	8003c9c <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8003c98:	2303      	movs	r3, #3
 8003c9a:	e039      	b.n	8003d10 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8003c9c:	69fb      	ldr	r3, [r7, #28]
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d10b      	bne.n	8003cba <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003ca2:	69bb      	ldr	r3, [r7, #24]
 8003ca4:	881a      	ldrh	r2, [r3, #0]
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003cae:	b292      	uxth	r2, r2
 8003cb0:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003cb2:	69bb      	ldr	r3, [r7, #24]
 8003cb4:	3302      	adds	r3, #2
 8003cb6:	61bb      	str	r3, [r7, #24]
 8003cb8:	e008      	b.n	8003ccc <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003cba:	69fb      	ldr	r3, [r7, #28]
 8003cbc:	781a      	ldrb	r2, [r3, #0]
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	b292      	uxth	r2, r2
 8003cc4:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003cc6:	69fb      	ldr	r3, [r7, #28]
 8003cc8:	3301      	adds	r3, #1
 8003cca:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003cd2:	b29b      	uxth	r3, r3
 8003cd4:	3b01      	subs	r3, #1
 8003cd6:	b29a      	uxth	r2, r3
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003ce4:	b29b      	uxth	r3, r3
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d1cb      	bne.n	8003c82 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003cea:	683b      	ldr	r3, [r7, #0]
 8003cec:	9300      	str	r3, [sp, #0]
 8003cee:	697b      	ldr	r3, [r7, #20]
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	2140      	movs	r1, #64	; 0x40
 8003cf4:	68f8      	ldr	r0, [r7, #12]
 8003cf6:	f000 fdea 	bl	80048ce <UART_WaitOnFlagUntilTimeout>
 8003cfa:	4603      	mov	r3, r0
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d001      	beq.n	8003d04 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8003d00:	2303      	movs	r3, #3
 8003d02:	e005      	b.n	8003d10 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	2220      	movs	r2, #32
 8003d08:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8003d0a:	2300      	movs	r3, #0
 8003d0c:	e000      	b.n	8003d10 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8003d0e:	2302      	movs	r3, #2
  }
}
 8003d10:	4618      	mov	r0, r3
 8003d12:	3720      	adds	r7, #32
 8003d14:	46bd      	mov	sp, r7
 8003d16:	bd80      	pop	{r7, pc}

08003d18 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003d18:	b580      	push	{r7, lr}
 8003d1a:	b084      	sub	sp, #16
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	60f8      	str	r0, [r7, #12]
 8003d20:	60b9      	str	r1, [r7, #8]
 8003d22:	4613      	mov	r3, r2
 8003d24:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003d2a:	2b20      	cmp	r3, #32
 8003d2c:	d131      	bne.n	8003d92 <HAL_UART_Receive_IT+0x7a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003d2e:	68bb      	ldr	r3, [r7, #8]
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d002      	beq.n	8003d3a <HAL_UART_Receive_IT+0x22>
 8003d34:	88fb      	ldrh	r3, [r7, #6]
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d101      	bne.n	8003d3e <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 8003d3a:	2301      	movs	r3, #1
 8003d3c:	e02a      	b.n	8003d94 <HAL_UART_Receive_IT+0x7c>
    }

    __HAL_LOCK(huart);
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003d44:	2b01      	cmp	r3, #1
 8003d46:	d101      	bne.n	8003d4c <HAL_UART_Receive_IT+0x34>
 8003d48:	2302      	movs	r3, #2
 8003d4a:	e023      	b.n	8003d94 <HAL_UART_Receive_IT+0x7c>
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	2201      	movs	r2, #1
 8003d50:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	2200      	movs	r2, #0
 8003d58:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	4a0f      	ldr	r2, [pc, #60]	; (8003d9c <HAL_UART_Receive_IT+0x84>)
 8003d60:	4293      	cmp	r3, r2
 8003d62:	d00e      	beq.n	8003d82 <HAL_UART_Receive_IT+0x6a>
    {
      /* Check that USART RTOEN bit is set */
      if(READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	685b      	ldr	r3, [r3, #4]
 8003d6a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d007      	beq.n	8003d82 <HAL_UART_Receive_IT+0x6a>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	681a      	ldr	r2, [r3, #0]
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8003d80:	601a      	str	r2, [r3, #0]
      }
    }

    return(UART_Start_Receive_IT(huart, pData, Size));
 8003d82:	88fb      	ldrh	r3, [r7, #6]
 8003d84:	461a      	mov	r2, r3
 8003d86:	68b9      	ldr	r1, [r7, #8]
 8003d88:	68f8      	ldr	r0, [r7, #12]
 8003d8a:	f000 fe1d 	bl	80049c8 <UART_Start_Receive_IT>
 8003d8e:	4603      	mov	r3, r0
 8003d90:	e000      	b.n	8003d94 <HAL_UART_Receive_IT+0x7c>
  }
  else
  {
    return HAL_BUSY;
 8003d92:	2302      	movs	r3, #2
  }
}
 8003d94:	4618      	mov	r0, r3
 8003d96:	3710      	adds	r7, #16
 8003d98:	46bd      	mov	sp, r7
 8003d9a:	bd80      	pop	{r7, pc}
 8003d9c:	40008000 	.word	0x40008000

08003da0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003da0:	b580      	push	{r7, lr}
 8003da2:	b088      	sub	sp, #32
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	69db      	ldr	r3, [r3, #28]
 8003dae:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	689b      	ldr	r3, [r3, #8]
 8003dbe:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003dc0:	69fa      	ldr	r2, [r7, #28]
 8003dc2:	f640 030f 	movw	r3, #2063	; 0x80f
 8003dc6:	4013      	ands	r3, r2
 8003dc8:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8003dca:	693b      	ldr	r3, [r7, #16]
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d113      	bne.n	8003df8 <HAL_UART_IRQHandler+0x58>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003dd0:	69fb      	ldr	r3, [r7, #28]
 8003dd2:	f003 0320 	and.w	r3, r3, #32
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d00e      	beq.n	8003df8 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003dda:	69bb      	ldr	r3, [r7, #24]
 8003ddc:	f003 0320 	and.w	r3, r3, #32
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d009      	beq.n	8003df8 <HAL_UART_IRQHandler+0x58>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	f000 81ce 	beq.w	800418a <HAL_UART_IRQHandler+0x3ea>
      {
        huart->RxISR(huart);
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003df2:	6878      	ldr	r0, [r7, #4]
 8003df4:	4798      	blx	r3
      }
      return;
 8003df6:	e1c8      	b.n	800418a <HAL_UART_IRQHandler+0x3ea>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8003df8:	693b      	ldr	r3, [r7, #16]
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	f000 80e3 	beq.w	8003fc6 <HAL_UART_IRQHandler+0x226>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003e00:	697b      	ldr	r3, [r7, #20]
 8003e02:	f003 0301 	and.w	r3, r3, #1
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d105      	bne.n	8003e16 <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003e0a:	69ba      	ldr	r2, [r7, #24]
 8003e0c:	4ba6      	ldr	r3, [pc, #664]	; (80040a8 <HAL_UART_IRQHandler+0x308>)
 8003e0e:	4013      	ands	r3, r2
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	f000 80d8 	beq.w	8003fc6 <HAL_UART_IRQHandler+0x226>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003e16:	69fb      	ldr	r3, [r7, #28]
 8003e18:	f003 0301 	and.w	r3, r3, #1
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d010      	beq.n	8003e42 <HAL_UART_IRQHandler+0xa2>
 8003e20:	69bb      	ldr	r3, [r7, #24]
 8003e22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d00b      	beq.n	8003e42 <HAL_UART_IRQHandler+0xa2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	2201      	movs	r2, #1
 8003e30:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003e38:	f043 0201 	orr.w	r2, r3, #1
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003e42:	69fb      	ldr	r3, [r7, #28]
 8003e44:	f003 0302 	and.w	r3, r3, #2
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d010      	beq.n	8003e6e <HAL_UART_IRQHandler+0xce>
 8003e4c:	697b      	ldr	r3, [r7, #20]
 8003e4e:	f003 0301 	and.w	r3, r3, #1
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d00b      	beq.n	8003e6e <HAL_UART_IRQHandler+0xce>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	2202      	movs	r2, #2
 8003e5c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003e64:	f043 0204 	orr.w	r2, r3, #4
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003e6e:	69fb      	ldr	r3, [r7, #28]
 8003e70:	f003 0304 	and.w	r3, r3, #4
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d010      	beq.n	8003e9a <HAL_UART_IRQHandler+0xfa>
 8003e78:	697b      	ldr	r3, [r7, #20]
 8003e7a:	f003 0301 	and.w	r3, r3, #1
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d00b      	beq.n	8003e9a <HAL_UART_IRQHandler+0xfa>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	2204      	movs	r2, #4
 8003e88:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003e90:	f043 0202 	orr.w	r2, r3, #2
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003e9a:	69fb      	ldr	r3, [r7, #28]
 8003e9c:	f003 0308 	and.w	r3, r3, #8
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d015      	beq.n	8003ed0 <HAL_UART_IRQHandler+0x130>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003ea4:	69bb      	ldr	r3, [r7, #24]
 8003ea6:	f003 0320 	and.w	r3, r3, #32
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d104      	bne.n	8003eb8 <HAL_UART_IRQHandler+0x118>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003eae:	697b      	ldr	r3, [r7, #20]
 8003eb0:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d00b      	beq.n	8003ed0 <HAL_UART_IRQHandler+0x130>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	2208      	movs	r2, #8
 8003ebe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003ec6:	f043 0208 	orr.w	r2, r3, #8
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003ed0:	69fb      	ldr	r3, [r7, #28]
 8003ed2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d011      	beq.n	8003efe <HAL_UART_IRQHandler+0x15e>
 8003eda:	69bb      	ldr	r3, [r7, #24]
 8003edc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d00c      	beq.n	8003efe <HAL_UART_IRQHandler+0x15e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003eec:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003ef4:	f043 0220 	orr.w	r2, r3, #32
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	f000 8142 	beq.w	800418e <HAL_UART_IRQHandler+0x3ee>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003f0a:	69fb      	ldr	r3, [r7, #28]
 8003f0c:	f003 0320 	and.w	r3, r3, #32
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d00c      	beq.n	8003f2e <HAL_UART_IRQHandler+0x18e>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003f14:	69bb      	ldr	r3, [r7, #24]
 8003f16:	f003 0320 	and.w	r3, r3, #32
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d007      	beq.n	8003f2e <HAL_UART_IRQHandler+0x18e>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d003      	beq.n	8003f2e <HAL_UART_IRQHandler+0x18e>
        {
          huart->RxISR(huart);
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003f2a:	6878      	ldr	r0, [r7, #4]
 8003f2c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003f34:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	689b      	ldr	r3, [r3, #8]
 8003f3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f40:	2b40      	cmp	r3, #64	; 0x40
 8003f42:	d004      	beq.n	8003f4e <HAL_UART_IRQHandler+0x1ae>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d031      	beq.n	8003fb2 <HAL_UART_IRQHandler+0x212>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003f4e:	6878      	ldr	r0, [r7, #4]
 8003f50:	f000 fdc2 	bl	8004ad8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	689b      	ldr	r3, [r3, #8]
 8003f5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f5e:	2b40      	cmp	r3, #64	; 0x40
 8003f60:	d123      	bne.n	8003faa <HAL_UART_IRQHandler+0x20a>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	689a      	ldr	r2, [r3, #8]
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003f70:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d013      	beq.n	8003fa2 <HAL_UART_IRQHandler+0x202>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f7e:	4a4b      	ldr	r2, [pc, #300]	; (80040ac <HAL_UART_IRQHandler+0x30c>)
 8003f80:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f86:	4618      	mov	r0, r3
 8003f88:	f7fe f8d4 	bl	8002134 <HAL_DMA_Abort_IT>
 8003f8c:	4603      	mov	r3, r0
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d017      	beq.n	8003fc2 <HAL_UART_IRQHandler+0x222>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f98:	687a      	ldr	r2, [r7, #4]
 8003f9a:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8003f9c:	4610      	mov	r0, r2
 8003f9e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003fa0:	e00f      	b.n	8003fc2 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003fa2:	6878      	ldr	r0, [r7, #4]
 8003fa4:	f000 f908 	bl	80041b8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003fa8:	e00b      	b.n	8003fc2 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003faa:	6878      	ldr	r0, [r7, #4]
 8003fac:	f000 f904 	bl	80041b8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003fb0:	e007      	b.n	8003fc2 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003fb2:	6878      	ldr	r0, [r7, #4]
 8003fb4:	f000 f900 	bl	80041b8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2200      	movs	r2, #0
 8003fbc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8003fc0:	e0e5      	b.n	800418e <HAL_UART_IRQHandler+0x3ee>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003fc2:	bf00      	nop
    return;
 8003fc4:	e0e3      	b.n	800418e <HAL_UART_IRQHandler+0x3ee>

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003fca:	2b01      	cmp	r3, #1
 8003fcc:	f040 80a9 	bne.w	8004122 <HAL_UART_IRQHandler+0x382>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 8003fd0:	69fb      	ldr	r3, [r7, #28]
 8003fd2:	f003 0310 	and.w	r3, r3, #16
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	f000 80a3 	beq.w	8004122 <HAL_UART_IRQHandler+0x382>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 8003fdc:	69bb      	ldr	r3, [r7, #24]
 8003fde:	f003 0310 	and.w	r3, r3, #16
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	f000 809d 	beq.w	8004122 <HAL_UART_IRQHandler+0x382>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	2210      	movs	r2, #16
 8003fee:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	689b      	ldr	r3, [r3, #8]
 8003ff6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ffa:	2b40      	cmp	r3, #64	; 0x40
 8003ffc:	d158      	bne.n	80040b0 <HAL_UART_IRQHandler+0x310>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	685b      	ldr	r3, [r3, #4]
 8004006:	813b      	strh	r3, [r7, #8]
      if (  (nb_remaining_rx_data > 0U)
 8004008:	893b      	ldrh	r3, [r7, #8]
 800400a:	2b00      	cmp	r3, #0
 800400c:	f000 80c1 	beq.w	8004192 <HAL_UART_IRQHandler+0x3f2>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004016:	893a      	ldrh	r2, [r7, #8]
 8004018:	429a      	cmp	r2, r3
 800401a:	f080 80ba 	bcs.w	8004192 <HAL_UART_IRQHandler+0x3f2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	893a      	ldrh	r2, [r7, #8]
 8004022:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f003 0320 	and.w	r3, r3, #32
 8004032:	2b00      	cmp	r3, #0
 8004034:	d12a      	bne.n	800408c <HAL_UART_IRQHandler+0x2ec>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	681a      	ldr	r2, [r3, #0]
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004044:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	689a      	ldr	r2, [r3, #8]
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f022 0201 	bic.w	r2, r2, #1
 8004054:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	689a      	ldr	r2, [r3, #8]
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004064:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	2220      	movs	r2, #32
 800406a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2200      	movs	r2, #0
 8004070:	661a      	str	r2, [r3, #96]	; 0x60

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	681a      	ldr	r2, [r3, #0]
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f022 0210 	bic.w	r2, r2, #16
 8004080:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004086:	4618      	mov	r0, r3
 8004088:	f7fe f816 	bl	80020b8 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004098:	b29b      	uxth	r3, r3
 800409a:	1ad3      	subs	r3, r2, r3
 800409c:	b29b      	uxth	r3, r3
 800409e:	4619      	mov	r1, r3
 80040a0:	6878      	ldr	r0, [r7, #4]
 80040a2:	f000 f893 	bl	80041cc <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80040a6:	e074      	b.n	8004192 <HAL_UART_IRQHandler+0x3f2>
 80040a8:	04000120 	.word	0x04000120
 80040ac:	08004b37 	.word	0x08004b37
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80040bc:	b29b      	uxth	r3, r3
 80040be:	1ad3      	subs	r3, r2, r3
 80040c0:	817b      	strh	r3, [r7, #10]
      if (  (huart->RxXferCount > 0U)
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80040c8:	b29b      	uxth	r3, r3
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d063      	beq.n	8004196 <HAL_UART_IRQHandler+0x3f6>
          &&(nb_rx_data > 0U) )
 80040ce:	897b      	ldrh	r3, [r7, #10]
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d060      	beq.n	8004196 <HAL_UART_IRQHandler+0x3f6>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	681a      	ldr	r2, [r3, #0]
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80040e2:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	689a      	ldr	r2, [r3, #8]
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f022 0201 	bic.w	r2, r2, #1
 80040f2:	609a      	str	r2, [r3, #8]
#endif

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	2220      	movs	r2, #32
 80040f8:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	2200      	movs	r2, #0
 80040fe:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	2200      	movs	r2, #0
 8004104:	665a      	str	r2, [r3, #100]	; 0x64

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	681a      	ldr	r2, [r3, #0]
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f022 0210 	bic.w	r2, r2, #16
 8004114:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004116:	897b      	ldrh	r3, [r7, #10]
 8004118:	4619      	mov	r1, r3
 800411a:	6878      	ldr	r0, [r7, #4]
 800411c:	f000 f856 	bl	80041cc <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8004120:	e039      	b.n	8004196 <HAL_UART_IRQHandler+0x3f6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004122:	69fb      	ldr	r3, [r7, #28]
 8004124:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004128:	2b00      	cmp	r3, #0
 800412a:	d00d      	beq.n	8004148 <HAL_UART_IRQHandler+0x3a8>
 800412c:	697b      	ldr	r3, [r7, #20]
 800412e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004132:	2b00      	cmp	r3, #0
 8004134:	d008      	beq.n	8004148 <HAL_UART_IRQHandler+0x3a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800413e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004140:	6878      	ldr	r0, [r7, #4]
 8004142:	f000 fdff 	bl	8004d44 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004146:	e029      	b.n	800419c <HAL_UART_IRQHandler+0x3fc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004148:	69fb      	ldr	r3, [r7, #28]
 800414a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800414e:	2b00      	cmp	r3, #0
 8004150:	d00d      	beq.n	800416e <HAL_UART_IRQHandler+0x3ce>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004152:	69bb      	ldr	r3, [r7, #24]
 8004154:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004158:	2b00      	cmp	r3, #0
 800415a:	d008      	beq.n	800416e <HAL_UART_IRQHandler+0x3ce>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004160:	2b00      	cmp	r3, #0
 8004162:	d01a      	beq.n	800419a <HAL_UART_IRQHandler+0x3fa>
    {
      huart->TxISR(huart);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004168:	6878      	ldr	r0, [r7, #4]
 800416a:	4798      	blx	r3
    }
    return;
 800416c:	e015      	b.n	800419a <HAL_UART_IRQHandler+0x3fa>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800416e:	69fb      	ldr	r3, [r7, #28]
 8004170:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004174:	2b00      	cmp	r3, #0
 8004176:	d011      	beq.n	800419c <HAL_UART_IRQHandler+0x3fc>
 8004178:	69bb      	ldr	r3, [r7, #24]
 800417a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800417e:	2b00      	cmp	r3, #0
 8004180:	d00c      	beq.n	800419c <HAL_UART_IRQHandler+0x3fc>
  {
    UART_EndTransmit_IT(huart);
 8004182:	6878      	ldr	r0, [r7, #4]
 8004184:	f000 fced 	bl	8004b62 <UART_EndTransmit_IT>
    return;
 8004188:	e008      	b.n	800419c <HAL_UART_IRQHandler+0x3fc>
      return;
 800418a:	bf00      	nop
 800418c:	e006      	b.n	800419c <HAL_UART_IRQHandler+0x3fc>
    return;
 800418e:	bf00      	nop
 8004190:	e004      	b.n	800419c <HAL_UART_IRQHandler+0x3fc>
      return;
 8004192:	bf00      	nop
 8004194:	e002      	b.n	800419c <HAL_UART_IRQHandler+0x3fc>
      return;
 8004196:	bf00      	nop
 8004198:	e000      	b.n	800419c <HAL_UART_IRQHandler+0x3fc>
    return;
 800419a:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 800419c:	3720      	adds	r7, #32
 800419e:	46bd      	mov	sp, r7
 80041a0:	bd80      	pop	{r7, pc}
 80041a2:	bf00      	nop

080041a4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80041a4:	b480      	push	{r7}
 80041a6:	b083      	sub	sp, #12
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80041ac:	bf00      	nop
 80041ae:	370c      	adds	r7, #12
 80041b0:	46bd      	mov	sp, r7
 80041b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b6:	4770      	bx	lr

080041b8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80041b8:	b480      	push	{r7}
 80041ba:	b083      	sub	sp, #12
 80041bc:	af00      	add	r7, sp, #0
 80041be:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80041c0:	bf00      	nop
 80041c2:	370c      	adds	r7, #12
 80041c4:	46bd      	mov	sp, r7
 80041c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ca:	4770      	bx	lr

080041cc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80041cc:	b480      	push	{r7}
 80041ce:	b083      	sub	sp, #12
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	6078      	str	r0, [r7, #4]
 80041d4:	460b      	mov	r3, r1
 80041d6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80041d8:	bf00      	nop
 80041da:	370c      	adds	r7, #12
 80041dc:	46bd      	mov	sp, r7
 80041de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e2:	4770      	bx	lr

080041e4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80041e4:	b5b0      	push	{r4, r5, r7, lr}
 80041e6:	b088      	sub	sp, #32
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80041ec:	2300      	movs	r3, #0
 80041ee:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	689a      	ldr	r2, [r3, #8]
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	691b      	ldr	r3, [r3, #16]
 80041f8:	431a      	orrs	r2, r3
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	695b      	ldr	r3, [r3, #20]
 80041fe:	431a      	orrs	r2, r3
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	69db      	ldr	r3, [r3, #28]
 8004204:	4313      	orrs	r3, r2
 8004206:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	681a      	ldr	r2, [r3, #0]
 800420e:	4bad      	ldr	r3, [pc, #692]	; (80044c4 <UART_SetConfig+0x2e0>)
 8004210:	4013      	ands	r3, r2
 8004212:	687a      	ldr	r2, [r7, #4]
 8004214:	6812      	ldr	r2, [r2, #0]
 8004216:	69f9      	ldr	r1, [r7, #28]
 8004218:	430b      	orrs	r3, r1
 800421a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	685b      	ldr	r3, [r3, #4]
 8004222:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	68da      	ldr	r2, [r3, #12]
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	430a      	orrs	r2, r1
 8004230:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	699b      	ldr	r3, [r3, #24]
 8004236:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	4aa2      	ldr	r2, [pc, #648]	; (80044c8 <UART_SetConfig+0x2e4>)
 800423e:	4293      	cmp	r3, r2
 8004240:	d004      	beq.n	800424c <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	6a1b      	ldr	r3, [r3, #32]
 8004246:	69fa      	ldr	r2, [r7, #28]
 8004248:	4313      	orrs	r3, r2
 800424a:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	689b      	ldr	r3, [r3, #8]
 8004252:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	69fa      	ldr	r2, [r7, #28]
 800425c:	430a      	orrs	r2, r1
 800425e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	4a99      	ldr	r2, [pc, #612]	; (80044cc <UART_SetConfig+0x2e8>)
 8004266:	4293      	cmp	r3, r2
 8004268:	d121      	bne.n	80042ae <UART_SetConfig+0xca>
 800426a:	4b99      	ldr	r3, [pc, #612]	; (80044d0 <UART_SetConfig+0x2ec>)
 800426c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004270:	f003 0303 	and.w	r3, r3, #3
 8004274:	2b03      	cmp	r3, #3
 8004276:	d817      	bhi.n	80042a8 <UART_SetConfig+0xc4>
 8004278:	a201      	add	r2, pc, #4	; (adr r2, 8004280 <UART_SetConfig+0x9c>)
 800427a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800427e:	bf00      	nop
 8004280:	08004291 	.word	0x08004291
 8004284:	0800429d 	.word	0x0800429d
 8004288:	08004297 	.word	0x08004297
 800428c:	080042a3 	.word	0x080042a3
 8004290:	2301      	movs	r3, #1
 8004292:	76fb      	strb	r3, [r7, #27]
 8004294:	e0e7      	b.n	8004466 <UART_SetConfig+0x282>
 8004296:	2302      	movs	r3, #2
 8004298:	76fb      	strb	r3, [r7, #27]
 800429a:	e0e4      	b.n	8004466 <UART_SetConfig+0x282>
 800429c:	2304      	movs	r3, #4
 800429e:	76fb      	strb	r3, [r7, #27]
 80042a0:	e0e1      	b.n	8004466 <UART_SetConfig+0x282>
 80042a2:	2308      	movs	r3, #8
 80042a4:	76fb      	strb	r3, [r7, #27]
 80042a6:	e0de      	b.n	8004466 <UART_SetConfig+0x282>
 80042a8:	2310      	movs	r3, #16
 80042aa:	76fb      	strb	r3, [r7, #27]
 80042ac:	e0db      	b.n	8004466 <UART_SetConfig+0x282>
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	4a88      	ldr	r2, [pc, #544]	; (80044d4 <UART_SetConfig+0x2f0>)
 80042b4:	4293      	cmp	r3, r2
 80042b6:	d132      	bne.n	800431e <UART_SetConfig+0x13a>
 80042b8:	4b85      	ldr	r3, [pc, #532]	; (80044d0 <UART_SetConfig+0x2ec>)
 80042ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042be:	f003 030c 	and.w	r3, r3, #12
 80042c2:	2b0c      	cmp	r3, #12
 80042c4:	d828      	bhi.n	8004318 <UART_SetConfig+0x134>
 80042c6:	a201      	add	r2, pc, #4	; (adr r2, 80042cc <UART_SetConfig+0xe8>)
 80042c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042cc:	08004301 	.word	0x08004301
 80042d0:	08004319 	.word	0x08004319
 80042d4:	08004319 	.word	0x08004319
 80042d8:	08004319 	.word	0x08004319
 80042dc:	0800430d 	.word	0x0800430d
 80042e0:	08004319 	.word	0x08004319
 80042e4:	08004319 	.word	0x08004319
 80042e8:	08004319 	.word	0x08004319
 80042ec:	08004307 	.word	0x08004307
 80042f0:	08004319 	.word	0x08004319
 80042f4:	08004319 	.word	0x08004319
 80042f8:	08004319 	.word	0x08004319
 80042fc:	08004313 	.word	0x08004313
 8004300:	2300      	movs	r3, #0
 8004302:	76fb      	strb	r3, [r7, #27]
 8004304:	e0af      	b.n	8004466 <UART_SetConfig+0x282>
 8004306:	2302      	movs	r3, #2
 8004308:	76fb      	strb	r3, [r7, #27]
 800430a:	e0ac      	b.n	8004466 <UART_SetConfig+0x282>
 800430c:	2304      	movs	r3, #4
 800430e:	76fb      	strb	r3, [r7, #27]
 8004310:	e0a9      	b.n	8004466 <UART_SetConfig+0x282>
 8004312:	2308      	movs	r3, #8
 8004314:	76fb      	strb	r3, [r7, #27]
 8004316:	e0a6      	b.n	8004466 <UART_SetConfig+0x282>
 8004318:	2310      	movs	r3, #16
 800431a:	76fb      	strb	r3, [r7, #27]
 800431c:	e0a3      	b.n	8004466 <UART_SetConfig+0x282>
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	4a6d      	ldr	r2, [pc, #436]	; (80044d8 <UART_SetConfig+0x2f4>)
 8004324:	4293      	cmp	r3, r2
 8004326:	d120      	bne.n	800436a <UART_SetConfig+0x186>
 8004328:	4b69      	ldr	r3, [pc, #420]	; (80044d0 <UART_SetConfig+0x2ec>)
 800432a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800432e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004332:	2b30      	cmp	r3, #48	; 0x30
 8004334:	d013      	beq.n	800435e <UART_SetConfig+0x17a>
 8004336:	2b30      	cmp	r3, #48	; 0x30
 8004338:	d814      	bhi.n	8004364 <UART_SetConfig+0x180>
 800433a:	2b20      	cmp	r3, #32
 800433c:	d009      	beq.n	8004352 <UART_SetConfig+0x16e>
 800433e:	2b20      	cmp	r3, #32
 8004340:	d810      	bhi.n	8004364 <UART_SetConfig+0x180>
 8004342:	2b00      	cmp	r3, #0
 8004344:	d002      	beq.n	800434c <UART_SetConfig+0x168>
 8004346:	2b10      	cmp	r3, #16
 8004348:	d006      	beq.n	8004358 <UART_SetConfig+0x174>
 800434a:	e00b      	b.n	8004364 <UART_SetConfig+0x180>
 800434c:	2300      	movs	r3, #0
 800434e:	76fb      	strb	r3, [r7, #27]
 8004350:	e089      	b.n	8004466 <UART_SetConfig+0x282>
 8004352:	2302      	movs	r3, #2
 8004354:	76fb      	strb	r3, [r7, #27]
 8004356:	e086      	b.n	8004466 <UART_SetConfig+0x282>
 8004358:	2304      	movs	r3, #4
 800435a:	76fb      	strb	r3, [r7, #27]
 800435c:	e083      	b.n	8004466 <UART_SetConfig+0x282>
 800435e:	2308      	movs	r3, #8
 8004360:	76fb      	strb	r3, [r7, #27]
 8004362:	e080      	b.n	8004466 <UART_SetConfig+0x282>
 8004364:	2310      	movs	r3, #16
 8004366:	76fb      	strb	r3, [r7, #27]
 8004368:	e07d      	b.n	8004466 <UART_SetConfig+0x282>
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	4a5b      	ldr	r2, [pc, #364]	; (80044dc <UART_SetConfig+0x2f8>)
 8004370:	4293      	cmp	r3, r2
 8004372:	d120      	bne.n	80043b6 <UART_SetConfig+0x1d2>
 8004374:	4b56      	ldr	r3, [pc, #344]	; (80044d0 <UART_SetConfig+0x2ec>)
 8004376:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800437a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800437e:	2bc0      	cmp	r3, #192	; 0xc0
 8004380:	d013      	beq.n	80043aa <UART_SetConfig+0x1c6>
 8004382:	2bc0      	cmp	r3, #192	; 0xc0
 8004384:	d814      	bhi.n	80043b0 <UART_SetConfig+0x1cc>
 8004386:	2b80      	cmp	r3, #128	; 0x80
 8004388:	d009      	beq.n	800439e <UART_SetConfig+0x1ba>
 800438a:	2b80      	cmp	r3, #128	; 0x80
 800438c:	d810      	bhi.n	80043b0 <UART_SetConfig+0x1cc>
 800438e:	2b00      	cmp	r3, #0
 8004390:	d002      	beq.n	8004398 <UART_SetConfig+0x1b4>
 8004392:	2b40      	cmp	r3, #64	; 0x40
 8004394:	d006      	beq.n	80043a4 <UART_SetConfig+0x1c0>
 8004396:	e00b      	b.n	80043b0 <UART_SetConfig+0x1cc>
 8004398:	2300      	movs	r3, #0
 800439a:	76fb      	strb	r3, [r7, #27]
 800439c:	e063      	b.n	8004466 <UART_SetConfig+0x282>
 800439e:	2302      	movs	r3, #2
 80043a0:	76fb      	strb	r3, [r7, #27]
 80043a2:	e060      	b.n	8004466 <UART_SetConfig+0x282>
 80043a4:	2304      	movs	r3, #4
 80043a6:	76fb      	strb	r3, [r7, #27]
 80043a8:	e05d      	b.n	8004466 <UART_SetConfig+0x282>
 80043aa:	2308      	movs	r3, #8
 80043ac:	76fb      	strb	r3, [r7, #27]
 80043ae:	e05a      	b.n	8004466 <UART_SetConfig+0x282>
 80043b0:	2310      	movs	r3, #16
 80043b2:	76fb      	strb	r3, [r7, #27]
 80043b4:	e057      	b.n	8004466 <UART_SetConfig+0x282>
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	4a49      	ldr	r2, [pc, #292]	; (80044e0 <UART_SetConfig+0x2fc>)
 80043bc:	4293      	cmp	r3, r2
 80043be:	d125      	bne.n	800440c <UART_SetConfig+0x228>
 80043c0:	4b43      	ldr	r3, [pc, #268]	; (80044d0 <UART_SetConfig+0x2ec>)
 80043c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80043ca:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80043ce:	d017      	beq.n	8004400 <UART_SetConfig+0x21c>
 80043d0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80043d4:	d817      	bhi.n	8004406 <UART_SetConfig+0x222>
 80043d6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80043da:	d00b      	beq.n	80043f4 <UART_SetConfig+0x210>
 80043dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80043e0:	d811      	bhi.n	8004406 <UART_SetConfig+0x222>
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d003      	beq.n	80043ee <UART_SetConfig+0x20a>
 80043e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80043ea:	d006      	beq.n	80043fa <UART_SetConfig+0x216>
 80043ec:	e00b      	b.n	8004406 <UART_SetConfig+0x222>
 80043ee:	2300      	movs	r3, #0
 80043f0:	76fb      	strb	r3, [r7, #27]
 80043f2:	e038      	b.n	8004466 <UART_SetConfig+0x282>
 80043f4:	2302      	movs	r3, #2
 80043f6:	76fb      	strb	r3, [r7, #27]
 80043f8:	e035      	b.n	8004466 <UART_SetConfig+0x282>
 80043fa:	2304      	movs	r3, #4
 80043fc:	76fb      	strb	r3, [r7, #27]
 80043fe:	e032      	b.n	8004466 <UART_SetConfig+0x282>
 8004400:	2308      	movs	r3, #8
 8004402:	76fb      	strb	r3, [r7, #27]
 8004404:	e02f      	b.n	8004466 <UART_SetConfig+0x282>
 8004406:	2310      	movs	r3, #16
 8004408:	76fb      	strb	r3, [r7, #27]
 800440a:	e02c      	b.n	8004466 <UART_SetConfig+0x282>
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	4a2d      	ldr	r2, [pc, #180]	; (80044c8 <UART_SetConfig+0x2e4>)
 8004412:	4293      	cmp	r3, r2
 8004414:	d125      	bne.n	8004462 <UART_SetConfig+0x27e>
 8004416:	4b2e      	ldr	r3, [pc, #184]	; (80044d0 <UART_SetConfig+0x2ec>)
 8004418:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800441c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004420:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004424:	d017      	beq.n	8004456 <UART_SetConfig+0x272>
 8004426:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800442a:	d817      	bhi.n	800445c <UART_SetConfig+0x278>
 800442c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004430:	d00b      	beq.n	800444a <UART_SetConfig+0x266>
 8004432:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004436:	d811      	bhi.n	800445c <UART_SetConfig+0x278>
 8004438:	2b00      	cmp	r3, #0
 800443a:	d003      	beq.n	8004444 <UART_SetConfig+0x260>
 800443c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004440:	d006      	beq.n	8004450 <UART_SetConfig+0x26c>
 8004442:	e00b      	b.n	800445c <UART_SetConfig+0x278>
 8004444:	2300      	movs	r3, #0
 8004446:	76fb      	strb	r3, [r7, #27]
 8004448:	e00d      	b.n	8004466 <UART_SetConfig+0x282>
 800444a:	2302      	movs	r3, #2
 800444c:	76fb      	strb	r3, [r7, #27]
 800444e:	e00a      	b.n	8004466 <UART_SetConfig+0x282>
 8004450:	2304      	movs	r3, #4
 8004452:	76fb      	strb	r3, [r7, #27]
 8004454:	e007      	b.n	8004466 <UART_SetConfig+0x282>
 8004456:	2308      	movs	r3, #8
 8004458:	76fb      	strb	r3, [r7, #27]
 800445a:	e004      	b.n	8004466 <UART_SetConfig+0x282>
 800445c:	2310      	movs	r3, #16
 800445e:	76fb      	strb	r3, [r7, #27]
 8004460:	e001      	b.n	8004466 <UART_SetConfig+0x282>
 8004462:	2310      	movs	r3, #16
 8004464:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	4a17      	ldr	r2, [pc, #92]	; (80044c8 <UART_SetConfig+0x2e4>)
 800446c:	4293      	cmp	r3, r2
 800446e:	f040 8087 	bne.w	8004580 <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004472:	7efb      	ldrb	r3, [r7, #27]
 8004474:	2b08      	cmp	r3, #8
 8004476:	d837      	bhi.n	80044e8 <UART_SetConfig+0x304>
 8004478:	a201      	add	r2, pc, #4	; (adr r2, 8004480 <UART_SetConfig+0x29c>)
 800447a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800447e:	bf00      	nop
 8004480:	080044a5 	.word	0x080044a5
 8004484:	080044e9 	.word	0x080044e9
 8004488:	080044ad 	.word	0x080044ad
 800448c:	080044e9 	.word	0x080044e9
 8004490:	080044b3 	.word	0x080044b3
 8004494:	080044e9 	.word	0x080044e9
 8004498:	080044e9 	.word	0x080044e9
 800449c:	080044e9 	.word	0x080044e9
 80044a0:	080044bb 	.word	0x080044bb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80044a4:	f7fe fe0e 	bl	80030c4 <HAL_RCC_GetPCLK1Freq>
 80044a8:	6178      	str	r0, [r7, #20]
        break;
 80044aa:	e022      	b.n	80044f2 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80044ac:	4b0d      	ldr	r3, [pc, #52]	; (80044e4 <UART_SetConfig+0x300>)
 80044ae:	617b      	str	r3, [r7, #20]
        break;
 80044b0:	e01f      	b.n	80044f2 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80044b2:	f7fe fd6f 	bl	8002f94 <HAL_RCC_GetSysClockFreq>
 80044b6:	6178      	str	r0, [r7, #20]
        break;
 80044b8:	e01b      	b.n	80044f2 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80044ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80044be:	617b      	str	r3, [r7, #20]
        break;
 80044c0:	e017      	b.n	80044f2 <UART_SetConfig+0x30e>
 80044c2:	bf00      	nop
 80044c4:	efff69f3 	.word	0xefff69f3
 80044c8:	40008000 	.word	0x40008000
 80044cc:	40013800 	.word	0x40013800
 80044d0:	40021000 	.word	0x40021000
 80044d4:	40004400 	.word	0x40004400
 80044d8:	40004800 	.word	0x40004800
 80044dc:	40004c00 	.word	0x40004c00
 80044e0:	40005000 	.word	0x40005000
 80044e4:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 80044e8:	2300      	movs	r3, #0
 80044ea:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80044ec:	2301      	movs	r3, #1
 80044ee:	76bb      	strb	r3, [r7, #26]
        break;
 80044f0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80044f2:	697b      	ldr	r3, [r7, #20]
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	f000 80f1 	beq.w	80046dc <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	685a      	ldr	r2, [r3, #4]
 80044fe:	4613      	mov	r3, r2
 8004500:	005b      	lsls	r3, r3, #1
 8004502:	4413      	add	r3, r2
 8004504:	697a      	ldr	r2, [r7, #20]
 8004506:	429a      	cmp	r2, r3
 8004508:	d305      	bcc.n	8004516 <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	685b      	ldr	r3, [r3, #4]
 800450e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004510:	697a      	ldr	r2, [r7, #20]
 8004512:	429a      	cmp	r2, r3
 8004514:	d902      	bls.n	800451c <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 8004516:	2301      	movs	r3, #1
 8004518:	76bb      	strb	r3, [r7, #26]
 800451a:	e0df      	b.n	80046dc <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800451c:	697b      	ldr	r3, [r7, #20]
 800451e:	4618      	mov	r0, r3
 8004520:	f04f 0100 	mov.w	r1, #0
 8004524:	f04f 0200 	mov.w	r2, #0
 8004528:	f04f 0300 	mov.w	r3, #0
 800452c:	020b      	lsls	r3, r1, #8
 800452e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004532:	0202      	lsls	r2, r0, #8
 8004534:	6879      	ldr	r1, [r7, #4]
 8004536:	6849      	ldr	r1, [r1, #4]
 8004538:	0849      	lsrs	r1, r1, #1
 800453a:	4608      	mov	r0, r1
 800453c:	f04f 0100 	mov.w	r1, #0
 8004540:	1814      	adds	r4, r2, r0
 8004542:	eb43 0501 	adc.w	r5, r3, r1
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	685b      	ldr	r3, [r3, #4]
 800454a:	461a      	mov	r2, r3
 800454c:	f04f 0300 	mov.w	r3, #0
 8004550:	4620      	mov	r0, r4
 8004552:	4629      	mov	r1, r5
 8004554:	f7fc faaa 	bl	8000aac <__aeabi_uldivmod>
 8004558:	4602      	mov	r2, r0
 800455a:	460b      	mov	r3, r1
 800455c:	4613      	mov	r3, r2
 800455e:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004560:	693b      	ldr	r3, [r7, #16]
 8004562:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004566:	d308      	bcc.n	800457a <UART_SetConfig+0x396>
 8004568:	693b      	ldr	r3, [r7, #16]
 800456a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800456e:	d204      	bcs.n	800457a <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	693a      	ldr	r2, [r7, #16]
 8004576:	60da      	str	r2, [r3, #12]
 8004578:	e0b0      	b.n	80046dc <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 800457a:	2301      	movs	r3, #1
 800457c:	76bb      	strb	r3, [r7, #26]
 800457e:	e0ad      	b.n	80046dc <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	69db      	ldr	r3, [r3, #28]
 8004584:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004588:	d15c      	bne.n	8004644 <UART_SetConfig+0x460>
  {
    switch (clocksource)
 800458a:	7efb      	ldrb	r3, [r7, #27]
 800458c:	2b08      	cmp	r3, #8
 800458e:	d828      	bhi.n	80045e2 <UART_SetConfig+0x3fe>
 8004590:	a201      	add	r2, pc, #4	; (adr r2, 8004598 <UART_SetConfig+0x3b4>)
 8004592:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004596:	bf00      	nop
 8004598:	080045bd 	.word	0x080045bd
 800459c:	080045c5 	.word	0x080045c5
 80045a0:	080045cd 	.word	0x080045cd
 80045a4:	080045e3 	.word	0x080045e3
 80045a8:	080045d3 	.word	0x080045d3
 80045ac:	080045e3 	.word	0x080045e3
 80045b0:	080045e3 	.word	0x080045e3
 80045b4:	080045e3 	.word	0x080045e3
 80045b8:	080045db 	.word	0x080045db
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80045bc:	f7fe fd82 	bl	80030c4 <HAL_RCC_GetPCLK1Freq>
 80045c0:	6178      	str	r0, [r7, #20]
        break;
 80045c2:	e013      	b.n	80045ec <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80045c4:	f7fe fd94 	bl	80030f0 <HAL_RCC_GetPCLK2Freq>
 80045c8:	6178      	str	r0, [r7, #20]
        break;
 80045ca:	e00f      	b.n	80045ec <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80045cc:	4b49      	ldr	r3, [pc, #292]	; (80046f4 <UART_SetConfig+0x510>)
 80045ce:	617b      	str	r3, [r7, #20]
        break;
 80045d0:	e00c      	b.n	80045ec <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80045d2:	f7fe fcdf 	bl	8002f94 <HAL_RCC_GetSysClockFreq>
 80045d6:	6178      	str	r0, [r7, #20]
        break;
 80045d8:	e008      	b.n	80045ec <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80045da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80045de:	617b      	str	r3, [r7, #20]
        break;
 80045e0:	e004      	b.n	80045ec <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 80045e2:	2300      	movs	r3, #0
 80045e4:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80045e6:	2301      	movs	r3, #1
 80045e8:	76bb      	strb	r3, [r7, #26]
        break;
 80045ea:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80045ec:	697b      	ldr	r3, [r7, #20]
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d074      	beq.n	80046dc <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80045f2:	697b      	ldr	r3, [r7, #20]
 80045f4:	005a      	lsls	r2, r3, #1
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	685b      	ldr	r3, [r3, #4]
 80045fa:	085b      	lsrs	r3, r3, #1
 80045fc:	441a      	add	r2, r3
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	685b      	ldr	r3, [r3, #4]
 8004602:	fbb2 f3f3 	udiv	r3, r2, r3
 8004606:	b29b      	uxth	r3, r3
 8004608:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800460a:	693b      	ldr	r3, [r7, #16]
 800460c:	2b0f      	cmp	r3, #15
 800460e:	d916      	bls.n	800463e <UART_SetConfig+0x45a>
 8004610:	693b      	ldr	r3, [r7, #16]
 8004612:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004616:	d212      	bcs.n	800463e <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004618:	693b      	ldr	r3, [r7, #16]
 800461a:	b29b      	uxth	r3, r3
 800461c:	f023 030f 	bic.w	r3, r3, #15
 8004620:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004622:	693b      	ldr	r3, [r7, #16]
 8004624:	085b      	lsrs	r3, r3, #1
 8004626:	b29b      	uxth	r3, r3
 8004628:	f003 0307 	and.w	r3, r3, #7
 800462c:	b29a      	uxth	r2, r3
 800462e:	89fb      	ldrh	r3, [r7, #14]
 8004630:	4313      	orrs	r3, r2
 8004632:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	89fa      	ldrh	r2, [r7, #14]
 800463a:	60da      	str	r2, [r3, #12]
 800463c:	e04e      	b.n	80046dc <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 800463e:	2301      	movs	r3, #1
 8004640:	76bb      	strb	r3, [r7, #26]
 8004642:	e04b      	b.n	80046dc <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004644:	7efb      	ldrb	r3, [r7, #27]
 8004646:	2b08      	cmp	r3, #8
 8004648:	d827      	bhi.n	800469a <UART_SetConfig+0x4b6>
 800464a:	a201      	add	r2, pc, #4	; (adr r2, 8004650 <UART_SetConfig+0x46c>)
 800464c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004650:	08004675 	.word	0x08004675
 8004654:	0800467d 	.word	0x0800467d
 8004658:	08004685 	.word	0x08004685
 800465c:	0800469b 	.word	0x0800469b
 8004660:	0800468b 	.word	0x0800468b
 8004664:	0800469b 	.word	0x0800469b
 8004668:	0800469b 	.word	0x0800469b
 800466c:	0800469b 	.word	0x0800469b
 8004670:	08004693 	.word	0x08004693
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004674:	f7fe fd26 	bl	80030c4 <HAL_RCC_GetPCLK1Freq>
 8004678:	6178      	str	r0, [r7, #20]
        break;
 800467a:	e013      	b.n	80046a4 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800467c:	f7fe fd38 	bl	80030f0 <HAL_RCC_GetPCLK2Freq>
 8004680:	6178      	str	r0, [r7, #20]
        break;
 8004682:	e00f      	b.n	80046a4 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004684:	4b1b      	ldr	r3, [pc, #108]	; (80046f4 <UART_SetConfig+0x510>)
 8004686:	617b      	str	r3, [r7, #20]
        break;
 8004688:	e00c      	b.n	80046a4 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800468a:	f7fe fc83 	bl	8002f94 <HAL_RCC_GetSysClockFreq>
 800468e:	6178      	str	r0, [r7, #20]
        break;
 8004690:	e008      	b.n	80046a4 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004692:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004696:	617b      	str	r3, [r7, #20]
        break;
 8004698:	e004      	b.n	80046a4 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 800469a:	2300      	movs	r3, #0
 800469c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800469e:	2301      	movs	r3, #1
 80046a0:	76bb      	strb	r3, [r7, #26]
        break;
 80046a2:	bf00      	nop
    }

    if (pclk != 0U)
 80046a4:	697b      	ldr	r3, [r7, #20]
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d018      	beq.n	80046dc <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	685b      	ldr	r3, [r3, #4]
 80046ae:	085a      	lsrs	r2, r3, #1
 80046b0:	697b      	ldr	r3, [r7, #20]
 80046b2:	441a      	add	r2, r3
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	685b      	ldr	r3, [r3, #4]
 80046b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80046bc:	b29b      	uxth	r3, r3
 80046be:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80046c0:	693b      	ldr	r3, [r7, #16]
 80046c2:	2b0f      	cmp	r3, #15
 80046c4:	d908      	bls.n	80046d8 <UART_SetConfig+0x4f4>
 80046c6:	693b      	ldr	r3, [r7, #16]
 80046c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80046cc:	d204      	bcs.n	80046d8 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	693a      	ldr	r2, [r7, #16]
 80046d4:	60da      	str	r2, [r3, #12]
 80046d6:	e001      	b.n	80046dc <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 80046d8:	2301      	movs	r3, #1
 80046da:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	2200      	movs	r2, #0
 80046e0:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	2200      	movs	r2, #0
 80046e6:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80046e8:	7ebb      	ldrb	r3, [r7, #26]
}
 80046ea:	4618      	mov	r0, r3
 80046ec:	3720      	adds	r7, #32
 80046ee:	46bd      	mov	sp, r7
 80046f0:	bdb0      	pop	{r4, r5, r7, pc}
 80046f2:	bf00      	nop
 80046f4:	00f42400 	.word	0x00f42400

080046f8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80046f8:	b480      	push	{r7}
 80046fa:	b083      	sub	sp, #12
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004704:	f003 0301 	and.w	r3, r3, #1
 8004708:	2b00      	cmp	r3, #0
 800470a:	d00a      	beq.n	8004722 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	685b      	ldr	r3, [r3, #4]
 8004712:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	430a      	orrs	r2, r1
 8004720:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004726:	f003 0302 	and.w	r3, r3, #2
 800472a:	2b00      	cmp	r3, #0
 800472c:	d00a      	beq.n	8004744 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	685b      	ldr	r3, [r3, #4]
 8004734:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	430a      	orrs	r2, r1
 8004742:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004748:	f003 0304 	and.w	r3, r3, #4
 800474c:	2b00      	cmp	r3, #0
 800474e:	d00a      	beq.n	8004766 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	685b      	ldr	r3, [r3, #4]
 8004756:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	430a      	orrs	r2, r1
 8004764:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800476a:	f003 0308 	and.w	r3, r3, #8
 800476e:	2b00      	cmp	r3, #0
 8004770:	d00a      	beq.n	8004788 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	685b      	ldr	r3, [r3, #4]
 8004778:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	430a      	orrs	r2, r1
 8004786:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800478c:	f003 0310 	and.w	r3, r3, #16
 8004790:	2b00      	cmp	r3, #0
 8004792:	d00a      	beq.n	80047aa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	689b      	ldr	r3, [r3, #8]
 800479a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	430a      	orrs	r2, r1
 80047a8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047ae:	f003 0320 	and.w	r3, r3, #32
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d00a      	beq.n	80047cc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	689b      	ldr	r3, [r3, #8]
 80047bc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	430a      	orrs	r2, r1
 80047ca:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d01a      	beq.n	800480e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	685b      	ldr	r3, [r3, #4]
 80047de:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	430a      	orrs	r2, r1
 80047ec:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047f2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80047f6:	d10a      	bne.n	800480e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	685b      	ldr	r3, [r3, #4]
 80047fe:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	430a      	orrs	r2, r1
 800480c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004812:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004816:	2b00      	cmp	r3, #0
 8004818:	d00a      	beq.n	8004830 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	685b      	ldr	r3, [r3, #4]
 8004820:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	430a      	orrs	r2, r1
 800482e:	605a      	str	r2, [r3, #4]
  }
}
 8004830:	bf00      	nop
 8004832:	370c      	adds	r7, #12
 8004834:	46bd      	mov	sp, r7
 8004836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800483a:	4770      	bx	lr

0800483c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800483c:	b580      	push	{r7, lr}
 800483e:	b086      	sub	sp, #24
 8004840:	af02      	add	r7, sp, #8
 8004842:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	2200      	movs	r2, #0
 8004848:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800484c:	f7fd f96a 	bl	8001b24 <HAL_GetTick>
 8004850:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f003 0308 	and.w	r3, r3, #8
 800485c:	2b08      	cmp	r3, #8
 800485e:	d10e      	bne.n	800487e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004860:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004864:	9300      	str	r3, [sp, #0]
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	2200      	movs	r2, #0
 800486a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800486e:	6878      	ldr	r0, [r7, #4]
 8004870:	f000 f82d 	bl	80048ce <UART_WaitOnFlagUntilTimeout>
 8004874:	4603      	mov	r3, r0
 8004876:	2b00      	cmp	r3, #0
 8004878:	d001      	beq.n	800487e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800487a:	2303      	movs	r3, #3
 800487c:	e023      	b.n	80048c6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	f003 0304 	and.w	r3, r3, #4
 8004888:	2b04      	cmp	r3, #4
 800488a:	d10e      	bne.n	80048aa <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800488c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004890:	9300      	str	r3, [sp, #0]
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	2200      	movs	r2, #0
 8004896:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800489a:	6878      	ldr	r0, [r7, #4]
 800489c:	f000 f817 	bl	80048ce <UART_WaitOnFlagUntilTimeout>
 80048a0:	4603      	mov	r3, r0
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d001      	beq.n	80048aa <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80048a6:	2303      	movs	r3, #3
 80048a8:	e00d      	b.n	80048c6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	2220      	movs	r2, #32
 80048ae:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	2220      	movs	r2, #32
 80048b4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	2200      	movs	r2, #0
 80048ba:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	2200      	movs	r2, #0
 80048c0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80048c4:	2300      	movs	r3, #0
}
 80048c6:	4618      	mov	r0, r3
 80048c8:	3710      	adds	r7, #16
 80048ca:	46bd      	mov	sp, r7
 80048cc:	bd80      	pop	{r7, pc}

080048ce <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80048ce:	b580      	push	{r7, lr}
 80048d0:	b084      	sub	sp, #16
 80048d2:	af00      	add	r7, sp, #0
 80048d4:	60f8      	str	r0, [r7, #12]
 80048d6:	60b9      	str	r1, [r7, #8]
 80048d8:	603b      	str	r3, [r7, #0]
 80048da:	4613      	mov	r3, r2
 80048dc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80048de:	e05e      	b.n	800499e <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80048e0:	69bb      	ldr	r3, [r7, #24]
 80048e2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80048e6:	d05a      	beq.n	800499e <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80048e8:	f7fd f91c 	bl	8001b24 <HAL_GetTick>
 80048ec:	4602      	mov	r2, r0
 80048ee:	683b      	ldr	r3, [r7, #0]
 80048f0:	1ad3      	subs	r3, r2, r3
 80048f2:	69ba      	ldr	r2, [r7, #24]
 80048f4:	429a      	cmp	r2, r3
 80048f6:	d302      	bcc.n	80048fe <UART_WaitOnFlagUntilTimeout+0x30>
 80048f8:	69bb      	ldr	r3, [r7, #24]
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d11b      	bne.n	8004936 <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	681a      	ldr	r2, [r3, #0]
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800490c:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	689a      	ldr	r2, [r3, #8]
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f022 0201 	bic.w	r2, r2, #1
 800491c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	2220      	movs	r2, #32
 8004922:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	2220      	movs	r2, #32
 8004928:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	2200      	movs	r2, #0
 800492e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8004932:	2303      	movs	r3, #3
 8004934:	e043      	b.n	80049be <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	f003 0304 	and.w	r3, r3, #4
 8004940:	2b00      	cmp	r3, #0
 8004942:	d02c      	beq.n	800499e <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	69db      	ldr	r3, [r3, #28]
 800494a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800494e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004952:	d124      	bne.n	800499e <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800495c:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	681a      	ldr	r2, [r3, #0]
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800496c:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	689a      	ldr	r2, [r3, #8]
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f022 0201 	bic.w	r2, r2, #1
 800497c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	2220      	movs	r2, #32
 8004982:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	2220      	movs	r2, #32
 8004988:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	2220      	movs	r2, #32
 800498e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	2200      	movs	r2, #0
 8004996:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800499a:	2303      	movs	r3, #3
 800499c:	e00f      	b.n	80049be <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	69da      	ldr	r2, [r3, #28]
 80049a4:	68bb      	ldr	r3, [r7, #8]
 80049a6:	4013      	ands	r3, r2
 80049a8:	68ba      	ldr	r2, [r7, #8]
 80049aa:	429a      	cmp	r2, r3
 80049ac:	bf0c      	ite	eq
 80049ae:	2301      	moveq	r3, #1
 80049b0:	2300      	movne	r3, #0
 80049b2:	b2db      	uxtb	r3, r3
 80049b4:	461a      	mov	r2, r3
 80049b6:	79fb      	ldrb	r3, [r7, #7]
 80049b8:	429a      	cmp	r2, r3
 80049ba:	d091      	beq.n	80048e0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80049bc:	2300      	movs	r3, #0
}
 80049be:	4618      	mov	r0, r3
 80049c0:	3710      	adds	r7, #16
 80049c2:	46bd      	mov	sp, r7
 80049c4:	bd80      	pop	{r7, pc}
	...

080049c8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80049c8:	b480      	push	{r7}
 80049ca:	b085      	sub	sp, #20
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	60f8      	str	r0, [r7, #12]
 80049d0:	60b9      	str	r1, [r7, #8]
 80049d2:	4613      	mov	r3, r2
 80049d4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	68ba      	ldr	r2, [r7, #8]
 80049da:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	88fa      	ldrh	r2, [r7, #6]
 80049e0:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	88fa      	ldrh	r2, [r7, #6]
 80049e8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	2200      	movs	r2, #0
 80049f0:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	689b      	ldr	r3, [r3, #8]
 80049f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80049fa:	d10e      	bne.n	8004a1a <UART_Start_Receive_IT+0x52>
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	691b      	ldr	r3, [r3, #16]
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d105      	bne.n	8004a10 <UART_Start_Receive_IT+0x48>
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	f240 12ff 	movw	r2, #511	; 0x1ff
 8004a0a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004a0e:	e02d      	b.n	8004a6c <UART_Start_Receive_IT+0xa4>
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	22ff      	movs	r2, #255	; 0xff
 8004a14:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004a18:	e028      	b.n	8004a6c <UART_Start_Receive_IT+0xa4>
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	689b      	ldr	r3, [r3, #8]
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d10d      	bne.n	8004a3e <UART_Start_Receive_IT+0x76>
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	691b      	ldr	r3, [r3, #16]
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d104      	bne.n	8004a34 <UART_Start_Receive_IT+0x6c>
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	22ff      	movs	r2, #255	; 0xff
 8004a2e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004a32:	e01b      	b.n	8004a6c <UART_Start_Receive_IT+0xa4>
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	227f      	movs	r2, #127	; 0x7f
 8004a38:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004a3c:	e016      	b.n	8004a6c <UART_Start_Receive_IT+0xa4>
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	689b      	ldr	r3, [r3, #8]
 8004a42:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004a46:	d10d      	bne.n	8004a64 <UART_Start_Receive_IT+0x9c>
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	691b      	ldr	r3, [r3, #16]
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d104      	bne.n	8004a5a <UART_Start_Receive_IT+0x92>
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	227f      	movs	r2, #127	; 0x7f
 8004a54:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004a58:	e008      	b.n	8004a6c <UART_Start_Receive_IT+0xa4>
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	223f      	movs	r2, #63	; 0x3f
 8004a5e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004a62:	e003      	b.n	8004a6c <UART_Start_Receive_IT+0xa4>
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	2200      	movs	r2, #0
 8004a68:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	2200      	movs	r2, #0
 8004a70:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	2222      	movs	r2, #34	; 0x22
 8004a78:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	689a      	ldr	r2, [r3, #8]
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	f042 0201 	orr.w	r2, r2, #1
 8004a88:	609a      	str	r2, [r3, #8]
    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	689b      	ldr	r3, [r3, #8]
 8004a8e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a92:	d107      	bne.n	8004aa4 <UART_Start_Receive_IT+0xdc>
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	691b      	ldr	r3, [r3, #16]
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d103      	bne.n	8004aa4 <UART_Start_Receive_IT+0xdc>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	4a0c      	ldr	r2, [pc, #48]	; (8004ad0 <UART_Start_Receive_IT+0x108>)
 8004aa0:	665a      	str	r2, [r3, #100]	; 0x64
 8004aa2:	e002      	b.n	8004aaa <UART_Start_Receive_IT+0xe2>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	4a0b      	ldr	r2, [pc, #44]	; (8004ad4 <UART_Start_Receive_IT+0x10c>)
 8004aa8:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	2200      	movs	r2, #0
 8004aae:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	681a      	ldr	r2, [r3, #0]
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 8004ac0:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8004ac2:	2300      	movs	r3, #0
}
 8004ac4:	4618      	mov	r0, r3
 8004ac6:	3714      	adds	r7, #20
 8004ac8:	46bd      	mov	sp, r7
 8004aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ace:	4770      	bx	lr
 8004ad0:	08004c6d 	.word	0x08004c6d
 8004ad4:	08004b95 	.word	0x08004b95

08004ad8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004ad8:	b480      	push	{r7}
 8004ada:	b083      	sub	sp, #12
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	681a      	ldr	r2, [r3, #0]
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004aee:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	689a      	ldr	r2, [r3, #8]
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	f022 0201 	bic.w	r2, r2, #1
 8004afe:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b04:	2b01      	cmp	r3, #1
 8004b06:	d107      	bne.n	8004b18 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	681a      	ldr	r2, [r3, #0]
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	f022 0210 	bic.w	r2, r2, #16
 8004b16:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	2220      	movs	r2, #32
 8004b1c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	2200      	movs	r2, #0
 8004b22:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	2200      	movs	r2, #0
 8004b28:	665a      	str	r2, [r3, #100]	; 0x64
}
 8004b2a:	bf00      	nop
 8004b2c:	370c      	adds	r7, #12
 8004b2e:	46bd      	mov	sp, r7
 8004b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b34:	4770      	bx	lr

08004b36 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004b36:	b580      	push	{r7, lr}
 8004b38:	b084      	sub	sp, #16
 8004b3a:	af00      	add	r7, sp, #0
 8004b3c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b42:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	2200      	movs	r2, #0
 8004b48:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	2200      	movs	r2, #0
 8004b50:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004b54:	68f8      	ldr	r0, [r7, #12]
 8004b56:	f7ff fb2f 	bl	80041b8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004b5a:	bf00      	nop
 8004b5c:	3710      	adds	r7, #16
 8004b5e:	46bd      	mov	sp, r7
 8004b60:	bd80      	pop	{r7, pc}

08004b62 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004b62:	b580      	push	{r7, lr}
 8004b64:	b082      	sub	sp, #8
 8004b66:	af00      	add	r7, sp, #0
 8004b68:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	681a      	ldr	r2, [r3, #0]
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004b78:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	2220      	movs	r2, #32
 8004b7e:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	2200      	movs	r2, #0
 8004b84:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004b86:	6878      	ldr	r0, [r7, #4]
 8004b88:	f7ff fb0c 	bl	80041a4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004b8c:	bf00      	nop
 8004b8e:	3708      	adds	r7, #8
 8004b90:	46bd      	mov	sp, r7
 8004b92:	bd80      	pop	{r7, pc}

08004b94 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004b94:	b580      	push	{r7, lr}
 8004b96:	b084      	sub	sp, #16
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004ba2:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004ba8:	2b22      	cmp	r3, #34	; 0x22
 8004baa:	d151      	bne.n	8004c50 <UART_RxISR_8BIT+0xbc>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004bb2:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004bb4:	89bb      	ldrh	r3, [r7, #12]
 8004bb6:	b2d9      	uxtb	r1, r3
 8004bb8:	89fb      	ldrh	r3, [r7, #14]
 8004bba:	b2da      	uxtb	r2, r3
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bc0:	400a      	ands	r2, r1
 8004bc2:	b2d2      	uxtb	r2, r2
 8004bc4:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bca:	1c5a      	adds	r2, r3, #1
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004bd6:	b29b      	uxth	r3, r3
 8004bd8:	3b01      	subs	r3, #1
 8004bda:	b29a      	uxth	r2, r3
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004be8:	b29b      	uxth	r3, r3
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d13a      	bne.n	8004c64 <UART_RxISR_8BIT+0xd0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	681a      	ldr	r2, [r3, #0]
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004bfc:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	689a      	ldr	r2, [r3, #8]
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	f022 0201 	bic.w	r2, r2, #1
 8004c0c:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	2220      	movs	r2, #32
 8004c12:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	2200      	movs	r2, #0
 8004c18:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c1e:	2b01      	cmp	r3, #1
 8004c20:	d10f      	bne.n	8004c42 <UART_RxISR_8BIT+0xae>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	681a      	ldr	r2, [r3, #0]
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	f022 0210 	bic.w	r2, r2, #16
 8004c30:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004c38:	4619      	mov	r1, r3
 8004c3a:	6878      	ldr	r0, [r7, #4]
 8004c3c:	f7ff fac6 	bl	80041cc <HAL_UARTEx_RxEventCallback>
 8004c40:	e002      	b.n	8004c48 <UART_RxISR_8BIT+0xb4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004c42:	6878      	ldr	r0, [r7, #4]
 8004c44:	f7fc f904 	bl	8000e50 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	2200      	movs	r2, #0
 8004c4c:	661a      	str	r2, [r3, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004c4e:	e009      	b.n	8004c64 <UART_RxISR_8BIT+0xd0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	8b1b      	ldrh	r3, [r3, #24]
 8004c56:	b29a      	uxth	r2, r3
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f042 0208 	orr.w	r2, r2, #8
 8004c60:	b292      	uxth	r2, r2
 8004c62:	831a      	strh	r2, [r3, #24]
}
 8004c64:	bf00      	nop
 8004c66:	3710      	adds	r7, #16
 8004c68:	46bd      	mov	sp, r7
 8004c6a:	bd80      	pop	{r7, pc}

08004c6c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004c6c:	b580      	push	{r7, lr}
 8004c6e:	b084      	sub	sp, #16
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004c7a:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004c80:	2b22      	cmp	r3, #34	; 0x22
 8004c82:	d151      	bne.n	8004d28 <UART_RxISR_16BIT+0xbc>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004c8a:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c90:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 8004c92:	89ba      	ldrh	r2, [r7, #12]
 8004c94:	89fb      	ldrh	r3, [r7, #14]
 8004c96:	4013      	ands	r3, r2
 8004c98:	b29a      	uxth	r2, r3
 8004c9a:	68bb      	ldr	r3, [r7, #8]
 8004c9c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ca2:	1c9a      	adds	r2, r3, #2
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004cae:	b29b      	uxth	r3, r3
 8004cb0:	3b01      	subs	r3, #1
 8004cb2:	b29a      	uxth	r2, r3
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004cc0:	b29b      	uxth	r3, r3
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d13a      	bne.n	8004d3c <UART_RxISR_16BIT+0xd0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	681a      	ldr	r2, [r3, #0]
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004cd4:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	689a      	ldr	r2, [r3, #8]
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	f022 0201 	bic.w	r2, r2, #1
 8004ce4:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	2220      	movs	r2, #32
 8004cea:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	2200      	movs	r2, #0
 8004cf0:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004cf6:	2b01      	cmp	r3, #1
 8004cf8:	d10f      	bne.n	8004d1a <UART_RxISR_16BIT+0xae>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	681a      	ldr	r2, [r3, #0]
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	f022 0210 	bic.w	r2, r2, #16
 8004d08:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004d10:	4619      	mov	r1, r3
 8004d12:	6878      	ldr	r0, [r7, #4]
 8004d14:	f7ff fa5a 	bl	80041cc <HAL_UARTEx_RxEventCallback>
 8004d18:	e002      	b.n	8004d20 <UART_RxISR_16BIT+0xb4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004d1a:	6878      	ldr	r0, [r7, #4]
 8004d1c:	f7fc f898 	bl	8000e50 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	2200      	movs	r2, #0
 8004d24:	661a      	str	r2, [r3, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004d26:	e009      	b.n	8004d3c <UART_RxISR_16BIT+0xd0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	8b1b      	ldrh	r3, [r3, #24]
 8004d2e:	b29a      	uxth	r2, r3
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	f042 0208 	orr.w	r2, r2, #8
 8004d38:	b292      	uxth	r2, r2
 8004d3a:	831a      	strh	r2, [r3, #24]
}
 8004d3c:	bf00      	nop
 8004d3e:	3710      	adds	r7, #16
 8004d40:	46bd      	mov	sp, r7
 8004d42:	bd80      	pop	{r7, pc}

08004d44 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004d44:	b480      	push	{r7}
 8004d46:	b083      	sub	sp, #12
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004d4c:	bf00      	nop
 8004d4e:	370c      	adds	r7, #12
 8004d50:	46bd      	mov	sp, r7
 8004d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d56:	4770      	bx	lr

08004d58 <__errno>:
 8004d58:	4b01      	ldr	r3, [pc, #4]	; (8004d60 <__errno+0x8>)
 8004d5a:	6818      	ldr	r0, [r3, #0]
 8004d5c:	4770      	bx	lr
 8004d5e:	bf00      	nop
 8004d60:	20000020 	.word	0x20000020

08004d64 <__libc_init_array>:
 8004d64:	b570      	push	{r4, r5, r6, lr}
 8004d66:	4d0d      	ldr	r5, [pc, #52]	; (8004d9c <__libc_init_array+0x38>)
 8004d68:	4c0d      	ldr	r4, [pc, #52]	; (8004da0 <__libc_init_array+0x3c>)
 8004d6a:	1b64      	subs	r4, r4, r5
 8004d6c:	10a4      	asrs	r4, r4, #2
 8004d6e:	2600      	movs	r6, #0
 8004d70:	42a6      	cmp	r6, r4
 8004d72:	d109      	bne.n	8004d88 <__libc_init_array+0x24>
 8004d74:	4d0b      	ldr	r5, [pc, #44]	; (8004da4 <__libc_init_array+0x40>)
 8004d76:	4c0c      	ldr	r4, [pc, #48]	; (8004da8 <__libc_init_array+0x44>)
 8004d78:	f000 fc4e 	bl	8005618 <_init>
 8004d7c:	1b64      	subs	r4, r4, r5
 8004d7e:	10a4      	asrs	r4, r4, #2
 8004d80:	2600      	movs	r6, #0
 8004d82:	42a6      	cmp	r6, r4
 8004d84:	d105      	bne.n	8004d92 <__libc_init_array+0x2e>
 8004d86:	bd70      	pop	{r4, r5, r6, pc}
 8004d88:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d8c:	4798      	blx	r3
 8004d8e:	3601      	adds	r6, #1
 8004d90:	e7ee      	b.n	8004d70 <__libc_init_array+0xc>
 8004d92:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d96:	4798      	blx	r3
 8004d98:	3601      	adds	r6, #1
 8004d9a:	e7f2      	b.n	8004d82 <__libc_init_array+0x1e>
 8004d9c:	08005828 	.word	0x08005828
 8004da0:	08005828 	.word	0x08005828
 8004da4:	08005828 	.word	0x08005828
 8004da8:	0800582c 	.word	0x0800582c

08004dac <memset>:
 8004dac:	4402      	add	r2, r0
 8004dae:	4603      	mov	r3, r0
 8004db0:	4293      	cmp	r3, r2
 8004db2:	d100      	bne.n	8004db6 <memset+0xa>
 8004db4:	4770      	bx	lr
 8004db6:	f803 1b01 	strb.w	r1, [r3], #1
 8004dba:	e7f9      	b.n	8004db0 <memset+0x4>

08004dbc <siprintf>:
 8004dbc:	b40e      	push	{r1, r2, r3}
 8004dbe:	b500      	push	{lr}
 8004dc0:	b09c      	sub	sp, #112	; 0x70
 8004dc2:	ab1d      	add	r3, sp, #116	; 0x74
 8004dc4:	9002      	str	r0, [sp, #8]
 8004dc6:	9006      	str	r0, [sp, #24]
 8004dc8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004dcc:	4809      	ldr	r0, [pc, #36]	; (8004df4 <siprintf+0x38>)
 8004dce:	9107      	str	r1, [sp, #28]
 8004dd0:	9104      	str	r1, [sp, #16]
 8004dd2:	4909      	ldr	r1, [pc, #36]	; (8004df8 <siprintf+0x3c>)
 8004dd4:	f853 2b04 	ldr.w	r2, [r3], #4
 8004dd8:	9105      	str	r1, [sp, #20]
 8004dda:	6800      	ldr	r0, [r0, #0]
 8004ddc:	9301      	str	r3, [sp, #4]
 8004dde:	a902      	add	r1, sp, #8
 8004de0:	f000 f868 	bl	8004eb4 <_svfiprintf_r>
 8004de4:	9b02      	ldr	r3, [sp, #8]
 8004de6:	2200      	movs	r2, #0
 8004de8:	701a      	strb	r2, [r3, #0]
 8004dea:	b01c      	add	sp, #112	; 0x70
 8004dec:	f85d eb04 	ldr.w	lr, [sp], #4
 8004df0:	b003      	add	sp, #12
 8004df2:	4770      	bx	lr
 8004df4:	20000020 	.word	0x20000020
 8004df8:	ffff0208 	.word	0xffff0208

08004dfc <__ssputs_r>:
 8004dfc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004e00:	688e      	ldr	r6, [r1, #8]
 8004e02:	429e      	cmp	r6, r3
 8004e04:	4682      	mov	sl, r0
 8004e06:	460c      	mov	r4, r1
 8004e08:	4690      	mov	r8, r2
 8004e0a:	461f      	mov	r7, r3
 8004e0c:	d838      	bhi.n	8004e80 <__ssputs_r+0x84>
 8004e0e:	898a      	ldrh	r2, [r1, #12]
 8004e10:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004e14:	d032      	beq.n	8004e7c <__ssputs_r+0x80>
 8004e16:	6825      	ldr	r5, [r4, #0]
 8004e18:	6909      	ldr	r1, [r1, #16]
 8004e1a:	eba5 0901 	sub.w	r9, r5, r1
 8004e1e:	6965      	ldr	r5, [r4, #20]
 8004e20:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004e24:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004e28:	3301      	adds	r3, #1
 8004e2a:	444b      	add	r3, r9
 8004e2c:	106d      	asrs	r5, r5, #1
 8004e2e:	429d      	cmp	r5, r3
 8004e30:	bf38      	it	cc
 8004e32:	461d      	movcc	r5, r3
 8004e34:	0553      	lsls	r3, r2, #21
 8004e36:	d531      	bpl.n	8004e9c <__ssputs_r+0xa0>
 8004e38:	4629      	mov	r1, r5
 8004e3a:	f000 fb47 	bl	80054cc <_malloc_r>
 8004e3e:	4606      	mov	r6, r0
 8004e40:	b950      	cbnz	r0, 8004e58 <__ssputs_r+0x5c>
 8004e42:	230c      	movs	r3, #12
 8004e44:	f8ca 3000 	str.w	r3, [sl]
 8004e48:	89a3      	ldrh	r3, [r4, #12]
 8004e4a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004e4e:	81a3      	strh	r3, [r4, #12]
 8004e50:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004e54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e58:	6921      	ldr	r1, [r4, #16]
 8004e5a:	464a      	mov	r2, r9
 8004e5c:	f000 fabe 	bl	80053dc <memcpy>
 8004e60:	89a3      	ldrh	r3, [r4, #12]
 8004e62:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004e66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e6a:	81a3      	strh	r3, [r4, #12]
 8004e6c:	6126      	str	r6, [r4, #16]
 8004e6e:	6165      	str	r5, [r4, #20]
 8004e70:	444e      	add	r6, r9
 8004e72:	eba5 0509 	sub.w	r5, r5, r9
 8004e76:	6026      	str	r6, [r4, #0]
 8004e78:	60a5      	str	r5, [r4, #8]
 8004e7a:	463e      	mov	r6, r7
 8004e7c:	42be      	cmp	r6, r7
 8004e7e:	d900      	bls.n	8004e82 <__ssputs_r+0x86>
 8004e80:	463e      	mov	r6, r7
 8004e82:	4632      	mov	r2, r6
 8004e84:	6820      	ldr	r0, [r4, #0]
 8004e86:	4641      	mov	r1, r8
 8004e88:	f000 fab6 	bl	80053f8 <memmove>
 8004e8c:	68a3      	ldr	r3, [r4, #8]
 8004e8e:	6822      	ldr	r2, [r4, #0]
 8004e90:	1b9b      	subs	r3, r3, r6
 8004e92:	4432      	add	r2, r6
 8004e94:	60a3      	str	r3, [r4, #8]
 8004e96:	6022      	str	r2, [r4, #0]
 8004e98:	2000      	movs	r0, #0
 8004e9a:	e7db      	b.n	8004e54 <__ssputs_r+0x58>
 8004e9c:	462a      	mov	r2, r5
 8004e9e:	f000 fb6f 	bl	8005580 <_realloc_r>
 8004ea2:	4606      	mov	r6, r0
 8004ea4:	2800      	cmp	r0, #0
 8004ea6:	d1e1      	bne.n	8004e6c <__ssputs_r+0x70>
 8004ea8:	6921      	ldr	r1, [r4, #16]
 8004eaa:	4650      	mov	r0, sl
 8004eac:	f000 fabe 	bl	800542c <_free_r>
 8004eb0:	e7c7      	b.n	8004e42 <__ssputs_r+0x46>
	...

08004eb4 <_svfiprintf_r>:
 8004eb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004eb8:	4698      	mov	r8, r3
 8004eba:	898b      	ldrh	r3, [r1, #12]
 8004ebc:	061b      	lsls	r3, r3, #24
 8004ebe:	b09d      	sub	sp, #116	; 0x74
 8004ec0:	4607      	mov	r7, r0
 8004ec2:	460d      	mov	r5, r1
 8004ec4:	4614      	mov	r4, r2
 8004ec6:	d50e      	bpl.n	8004ee6 <_svfiprintf_r+0x32>
 8004ec8:	690b      	ldr	r3, [r1, #16]
 8004eca:	b963      	cbnz	r3, 8004ee6 <_svfiprintf_r+0x32>
 8004ecc:	2140      	movs	r1, #64	; 0x40
 8004ece:	f000 fafd 	bl	80054cc <_malloc_r>
 8004ed2:	6028      	str	r0, [r5, #0]
 8004ed4:	6128      	str	r0, [r5, #16]
 8004ed6:	b920      	cbnz	r0, 8004ee2 <_svfiprintf_r+0x2e>
 8004ed8:	230c      	movs	r3, #12
 8004eda:	603b      	str	r3, [r7, #0]
 8004edc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004ee0:	e0d1      	b.n	8005086 <_svfiprintf_r+0x1d2>
 8004ee2:	2340      	movs	r3, #64	; 0x40
 8004ee4:	616b      	str	r3, [r5, #20]
 8004ee6:	2300      	movs	r3, #0
 8004ee8:	9309      	str	r3, [sp, #36]	; 0x24
 8004eea:	2320      	movs	r3, #32
 8004eec:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004ef0:	f8cd 800c 	str.w	r8, [sp, #12]
 8004ef4:	2330      	movs	r3, #48	; 0x30
 8004ef6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80050a0 <_svfiprintf_r+0x1ec>
 8004efa:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004efe:	f04f 0901 	mov.w	r9, #1
 8004f02:	4623      	mov	r3, r4
 8004f04:	469a      	mov	sl, r3
 8004f06:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004f0a:	b10a      	cbz	r2, 8004f10 <_svfiprintf_r+0x5c>
 8004f0c:	2a25      	cmp	r2, #37	; 0x25
 8004f0e:	d1f9      	bne.n	8004f04 <_svfiprintf_r+0x50>
 8004f10:	ebba 0b04 	subs.w	fp, sl, r4
 8004f14:	d00b      	beq.n	8004f2e <_svfiprintf_r+0x7a>
 8004f16:	465b      	mov	r3, fp
 8004f18:	4622      	mov	r2, r4
 8004f1a:	4629      	mov	r1, r5
 8004f1c:	4638      	mov	r0, r7
 8004f1e:	f7ff ff6d 	bl	8004dfc <__ssputs_r>
 8004f22:	3001      	adds	r0, #1
 8004f24:	f000 80aa 	beq.w	800507c <_svfiprintf_r+0x1c8>
 8004f28:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004f2a:	445a      	add	r2, fp
 8004f2c:	9209      	str	r2, [sp, #36]	; 0x24
 8004f2e:	f89a 3000 	ldrb.w	r3, [sl]
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	f000 80a2 	beq.w	800507c <_svfiprintf_r+0x1c8>
 8004f38:	2300      	movs	r3, #0
 8004f3a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004f3e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004f42:	f10a 0a01 	add.w	sl, sl, #1
 8004f46:	9304      	str	r3, [sp, #16]
 8004f48:	9307      	str	r3, [sp, #28]
 8004f4a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004f4e:	931a      	str	r3, [sp, #104]	; 0x68
 8004f50:	4654      	mov	r4, sl
 8004f52:	2205      	movs	r2, #5
 8004f54:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004f58:	4851      	ldr	r0, [pc, #324]	; (80050a0 <_svfiprintf_r+0x1ec>)
 8004f5a:	f7fb f939 	bl	80001d0 <memchr>
 8004f5e:	9a04      	ldr	r2, [sp, #16]
 8004f60:	b9d8      	cbnz	r0, 8004f9a <_svfiprintf_r+0xe6>
 8004f62:	06d0      	lsls	r0, r2, #27
 8004f64:	bf44      	itt	mi
 8004f66:	2320      	movmi	r3, #32
 8004f68:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004f6c:	0711      	lsls	r1, r2, #28
 8004f6e:	bf44      	itt	mi
 8004f70:	232b      	movmi	r3, #43	; 0x2b
 8004f72:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004f76:	f89a 3000 	ldrb.w	r3, [sl]
 8004f7a:	2b2a      	cmp	r3, #42	; 0x2a
 8004f7c:	d015      	beq.n	8004faa <_svfiprintf_r+0xf6>
 8004f7e:	9a07      	ldr	r2, [sp, #28]
 8004f80:	4654      	mov	r4, sl
 8004f82:	2000      	movs	r0, #0
 8004f84:	f04f 0c0a 	mov.w	ip, #10
 8004f88:	4621      	mov	r1, r4
 8004f8a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004f8e:	3b30      	subs	r3, #48	; 0x30
 8004f90:	2b09      	cmp	r3, #9
 8004f92:	d94e      	bls.n	8005032 <_svfiprintf_r+0x17e>
 8004f94:	b1b0      	cbz	r0, 8004fc4 <_svfiprintf_r+0x110>
 8004f96:	9207      	str	r2, [sp, #28]
 8004f98:	e014      	b.n	8004fc4 <_svfiprintf_r+0x110>
 8004f9a:	eba0 0308 	sub.w	r3, r0, r8
 8004f9e:	fa09 f303 	lsl.w	r3, r9, r3
 8004fa2:	4313      	orrs	r3, r2
 8004fa4:	9304      	str	r3, [sp, #16]
 8004fa6:	46a2      	mov	sl, r4
 8004fa8:	e7d2      	b.n	8004f50 <_svfiprintf_r+0x9c>
 8004faa:	9b03      	ldr	r3, [sp, #12]
 8004fac:	1d19      	adds	r1, r3, #4
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	9103      	str	r1, [sp, #12]
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	bfbb      	ittet	lt
 8004fb6:	425b      	neglt	r3, r3
 8004fb8:	f042 0202 	orrlt.w	r2, r2, #2
 8004fbc:	9307      	strge	r3, [sp, #28]
 8004fbe:	9307      	strlt	r3, [sp, #28]
 8004fc0:	bfb8      	it	lt
 8004fc2:	9204      	strlt	r2, [sp, #16]
 8004fc4:	7823      	ldrb	r3, [r4, #0]
 8004fc6:	2b2e      	cmp	r3, #46	; 0x2e
 8004fc8:	d10c      	bne.n	8004fe4 <_svfiprintf_r+0x130>
 8004fca:	7863      	ldrb	r3, [r4, #1]
 8004fcc:	2b2a      	cmp	r3, #42	; 0x2a
 8004fce:	d135      	bne.n	800503c <_svfiprintf_r+0x188>
 8004fd0:	9b03      	ldr	r3, [sp, #12]
 8004fd2:	1d1a      	adds	r2, r3, #4
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	9203      	str	r2, [sp, #12]
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	bfb8      	it	lt
 8004fdc:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8004fe0:	3402      	adds	r4, #2
 8004fe2:	9305      	str	r3, [sp, #20]
 8004fe4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80050b0 <_svfiprintf_r+0x1fc>
 8004fe8:	7821      	ldrb	r1, [r4, #0]
 8004fea:	2203      	movs	r2, #3
 8004fec:	4650      	mov	r0, sl
 8004fee:	f7fb f8ef 	bl	80001d0 <memchr>
 8004ff2:	b140      	cbz	r0, 8005006 <_svfiprintf_r+0x152>
 8004ff4:	2340      	movs	r3, #64	; 0x40
 8004ff6:	eba0 000a 	sub.w	r0, r0, sl
 8004ffa:	fa03 f000 	lsl.w	r0, r3, r0
 8004ffe:	9b04      	ldr	r3, [sp, #16]
 8005000:	4303      	orrs	r3, r0
 8005002:	3401      	adds	r4, #1
 8005004:	9304      	str	r3, [sp, #16]
 8005006:	f814 1b01 	ldrb.w	r1, [r4], #1
 800500a:	4826      	ldr	r0, [pc, #152]	; (80050a4 <_svfiprintf_r+0x1f0>)
 800500c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005010:	2206      	movs	r2, #6
 8005012:	f7fb f8dd 	bl	80001d0 <memchr>
 8005016:	2800      	cmp	r0, #0
 8005018:	d038      	beq.n	800508c <_svfiprintf_r+0x1d8>
 800501a:	4b23      	ldr	r3, [pc, #140]	; (80050a8 <_svfiprintf_r+0x1f4>)
 800501c:	bb1b      	cbnz	r3, 8005066 <_svfiprintf_r+0x1b2>
 800501e:	9b03      	ldr	r3, [sp, #12]
 8005020:	3307      	adds	r3, #7
 8005022:	f023 0307 	bic.w	r3, r3, #7
 8005026:	3308      	adds	r3, #8
 8005028:	9303      	str	r3, [sp, #12]
 800502a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800502c:	4433      	add	r3, r6
 800502e:	9309      	str	r3, [sp, #36]	; 0x24
 8005030:	e767      	b.n	8004f02 <_svfiprintf_r+0x4e>
 8005032:	fb0c 3202 	mla	r2, ip, r2, r3
 8005036:	460c      	mov	r4, r1
 8005038:	2001      	movs	r0, #1
 800503a:	e7a5      	b.n	8004f88 <_svfiprintf_r+0xd4>
 800503c:	2300      	movs	r3, #0
 800503e:	3401      	adds	r4, #1
 8005040:	9305      	str	r3, [sp, #20]
 8005042:	4619      	mov	r1, r3
 8005044:	f04f 0c0a 	mov.w	ip, #10
 8005048:	4620      	mov	r0, r4
 800504a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800504e:	3a30      	subs	r2, #48	; 0x30
 8005050:	2a09      	cmp	r2, #9
 8005052:	d903      	bls.n	800505c <_svfiprintf_r+0x1a8>
 8005054:	2b00      	cmp	r3, #0
 8005056:	d0c5      	beq.n	8004fe4 <_svfiprintf_r+0x130>
 8005058:	9105      	str	r1, [sp, #20]
 800505a:	e7c3      	b.n	8004fe4 <_svfiprintf_r+0x130>
 800505c:	fb0c 2101 	mla	r1, ip, r1, r2
 8005060:	4604      	mov	r4, r0
 8005062:	2301      	movs	r3, #1
 8005064:	e7f0      	b.n	8005048 <_svfiprintf_r+0x194>
 8005066:	ab03      	add	r3, sp, #12
 8005068:	9300      	str	r3, [sp, #0]
 800506a:	462a      	mov	r2, r5
 800506c:	4b0f      	ldr	r3, [pc, #60]	; (80050ac <_svfiprintf_r+0x1f8>)
 800506e:	a904      	add	r1, sp, #16
 8005070:	4638      	mov	r0, r7
 8005072:	f3af 8000 	nop.w
 8005076:	1c42      	adds	r2, r0, #1
 8005078:	4606      	mov	r6, r0
 800507a:	d1d6      	bne.n	800502a <_svfiprintf_r+0x176>
 800507c:	89ab      	ldrh	r3, [r5, #12]
 800507e:	065b      	lsls	r3, r3, #25
 8005080:	f53f af2c 	bmi.w	8004edc <_svfiprintf_r+0x28>
 8005084:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005086:	b01d      	add	sp, #116	; 0x74
 8005088:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800508c:	ab03      	add	r3, sp, #12
 800508e:	9300      	str	r3, [sp, #0]
 8005090:	462a      	mov	r2, r5
 8005092:	4b06      	ldr	r3, [pc, #24]	; (80050ac <_svfiprintf_r+0x1f8>)
 8005094:	a904      	add	r1, sp, #16
 8005096:	4638      	mov	r0, r7
 8005098:	f000 f87a 	bl	8005190 <_printf_i>
 800509c:	e7eb      	b.n	8005076 <_svfiprintf_r+0x1c2>
 800509e:	bf00      	nop
 80050a0:	080057ec 	.word	0x080057ec
 80050a4:	080057f6 	.word	0x080057f6
 80050a8:	00000000 	.word	0x00000000
 80050ac:	08004dfd 	.word	0x08004dfd
 80050b0:	080057f2 	.word	0x080057f2

080050b4 <_printf_common>:
 80050b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80050b8:	4616      	mov	r6, r2
 80050ba:	4699      	mov	r9, r3
 80050bc:	688a      	ldr	r2, [r1, #8]
 80050be:	690b      	ldr	r3, [r1, #16]
 80050c0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80050c4:	4293      	cmp	r3, r2
 80050c6:	bfb8      	it	lt
 80050c8:	4613      	movlt	r3, r2
 80050ca:	6033      	str	r3, [r6, #0]
 80050cc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80050d0:	4607      	mov	r7, r0
 80050d2:	460c      	mov	r4, r1
 80050d4:	b10a      	cbz	r2, 80050da <_printf_common+0x26>
 80050d6:	3301      	adds	r3, #1
 80050d8:	6033      	str	r3, [r6, #0]
 80050da:	6823      	ldr	r3, [r4, #0]
 80050dc:	0699      	lsls	r1, r3, #26
 80050de:	bf42      	ittt	mi
 80050e0:	6833      	ldrmi	r3, [r6, #0]
 80050e2:	3302      	addmi	r3, #2
 80050e4:	6033      	strmi	r3, [r6, #0]
 80050e6:	6825      	ldr	r5, [r4, #0]
 80050e8:	f015 0506 	ands.w	r5, r5, #6
 80050ec:	d106      	bne.n	80050fc <_printf_common+0x48>
 80050ee:	f104 0a19 	add.w	sl, r4, #25
 80050f2:	68e3      	ldr	r3, [r4, #12]
 80050f4:	6832      	ldr	r2, [r6, #0]
 80050f6:	1a9b      	subs	r3, r3, r2
 80050f8:	42ab      	cmp	r3, r5
 80050fa:	dc26      	bgt.n	800514a <_printf_common+0x96>
 80050fc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005100:	1e13      	subs	r3, r2, #0
 8005102:	6822      	ldr	r2, [r4, #0]
 8005104:	bf18      	it	ne
 8005106:	2301      	movne	r3, #1
 8005108:	0692      	lsls	r2, r2, #26
 800510a:	d42b      	bmi.n	8005164 <_printf_common+0xb0>
 800510c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005110:	4649      	mov	r1, r9
 8005112:	4638      	mov	r0, r7
 8005114:	47c0      	blx	r8
 8005116:	3001      	adds	r0, #1
 8005118:	d01e      	beq.n	8005158 <_printf_common+0xa4>
 800511a:	6823      	ldr	r3, [r4, #0]
 800511c:	68e5      	ldr	r5, [r4, #12]
 800511e:	6832      	ldr	r2, [r6, #0]
 8005120:	f003 0306 	and.w	r3, r3, #6
 8005124:	2b04      	cmp	r3, #4
 8005126:	bf08      	it	eq
 8005128:	1aad      	subeq	r5, r5, r2
 800512a:	68a3      	ldr	r3, [r4, #8]
 800512c:	6922      	ldr	r2, [r4, #16]
 800512e:	bf0c      	ite	eq
 8005130:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005134:	2500      	movne	r5, #0
 8005136:	4293      	cmp	r3, r2
 8005138:	bfc4      	itt	gt
 800513a:	1a9b      	subgt	r3, r3, r2
 800513c:	18ed      	addgt	r5, r5, r3
 800513e:	2600      	movs	r6, #0
 8005140:	341a      	adds	r4, #26
 8005142:	42b5      	cmp	r5, r6
 8005144:	d11a      	bne.n	800517c <_printf_common+0xc8>
 8005146:	2000      	movs	r0, #0
 8005148:	e008      	b.n	800515c <_printf_common+0xa8>
 800514a:	2301      	movs	r3, #1
 800514c:	4652      	mov	r2, sl
 800514e:	4649      	mov	r1, r9
 8005150:	4638      	mov	r0, r7
 8005152:	47c0      	blx	r8
 8005154:	3001      	adds	r0, #1
 8005156:	d103      	bne.n	8005160 <_printf_common+0xac>
 8005158:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800515c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005160:	3501      	adds	r5, #1
 8005162:	e7c6      	b.n	80050f2 <_printf_common+0x3e>
 8005164:	18e1      	adds	r1, r4, r3
 8005166:	1c5a      	adds	r2, r3, #1
 8005168:	2030      	movs	r0, #48	; 0x30
 800516a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800516e:	4422      	add	r2, r4
 8005170:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005174:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005178:	3302      	adds	r3, #2
 800517a:	e7c7      	b.n	800510c <_printf_common+0x58>
 800517c:	2301      	movs	r3, #1
 800517e:	4622      	mov	r2, r4
 8005180:	4649      	mov	r1, r9
 8005182:	4638      	mov	r0, r7
 8005184:	47c0      	blx	r8
 8005186:	3001      	adds	r0, #1
 8005188:	d0e6      	beq.n	8005158 <_printf_common+0xa4>
 800518a:	3601      	adds	r6, #1
 800518c:	e7d9      	b.n	8005142 <_printf_common+0x8e>
	...

08005190 <_printf_i>:
 8005190:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005194:	460c      	mov	r4, r1
 8005196:	4691      	mov	r9, r2
 8005198:	7e27      	ldrb	r7, [r4, #24]
 800519a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800519c:	2f78      	cmp	r7, #120	; 0x78
 800519e:	4680      	mov	r8, r0
 80051a0:	469a      	mov	sl, r3
 80051a2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80051a6:	d807      	bhi.n	80051b8 <_printf_i+0x28>
 80051a8:	2f62      	cmp	r7, #98	; 0x62
 80051aa:	d80a      	bhi.n	80051c2 <_printf_i+0x32>
 80051ac:	2f00      	cmp	r7, #0
 80051ae:	f000 80d8 	beq.w	8005362 <_printf_i+0x1d2>
 80051b2:	2f58      	cmp	r7, #88	; 0x58
 80051b4:	f000 80a3 	beq.w	80052fe <_printf_i+0x16e>
 80051b8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80051bc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80051c0:	e03a      	b.n	8005238 <_printf_i+0xa8>
 80051c2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80051c6:	2b15      	cmp	r3, #21
 80051c8:	d8f6      	bhi.n	80051b8 <_printf_i+0x28>
 80051ca:	a001      	add	r0, pc, #4	; (adr r0, 80051d0 <_printf_i+0x40>)
 80051cc:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80051d0:	08005229 	.word	0x08005229
 80051d4:	0800523d 	.word	0x0800523d
 80051d8:	080051b9 	.word	0x080051b9
 80051dc:	080051b9 	.word	0x080051b9
 80051e0:	080051b9 	.word	0x080051b9
 80051e4:	080051b9 	.word	0x080051b9
 80051e8:	0800523d 	.word	0x0800523d
 80051ec:	080051b9 	.word	0x080051b9
 80051f0:	080051b9 	.word	0x080051b9
 80051f4:	080051b9 	.word	0x080051b9
 80051f8:	080051b9 	.word	0x080051b9
 80051fc:	08005349 	.word	0x08005349
 8005200:	0800526d 	.word	0x0800526d
 8005204:	0800532b 	.word	0x0800532b
 8005208:	080051b9 	.word	0x080051b9
 800520c:	080051b9 	.word	0x080051b9
 8005210:	0800536b 	.word	0x0800536b
 8005214:	080051b9 	.word	0x080051b9
 8005218:	0800526d 	.word	0x0800526d
 800521c:	080051b9 	.word	0x080051b9
 8005220:	080051b9 	.word	0x080051b9
 8005224:	08005333 	.word	0x08005333
 8005228:	680b      	ldr	r3, [r1, #0]
 800522a:	1d1a      	adds	r2, r3, #4
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	600a      	str	r2, [r1, #0]
 8005230:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005234:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005238:	2301      	movs	r3, #1
 800523a:	e0a3      	b.n	8005384 <_printf_i+0x1f4>
 800523c:	6825      	ldr	r5, [r4, #0]
 800523e:	6808      	ldr	r0, [r1, #0]
 8005240:	062e      	lsls	r6, r5, #24
 8005242:	f100 0304 	add.w	r3, r0, #4
 8005246:	d50a      	bpl.n	800525e <_printf_i+0xce>
 8005248:	6805      	ldr	r5, [r0, #0]
 800524a:	600b      	str	r3, [r1, #0]
 800524c:	2d00      	cmp	r5, #0
 800524e:	da03      	bge.n	8005258 <_printf_i+0xc8>
 8005250:	232d      	movs	r3, #45	; 0x2d
 8005252:	426d      	negs	r5, r5
 8005254:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005258:	485e      	ldr	r0, [pc, #376]	; (80053d4 <_printf_i+0x244>)
 800525a:	230a      	movs	r3, #10
 800525c:	e019      	b.n	8005292 <_printf_i+0x102>
 800525e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8005262:	6805      	ldr	r5, [r0, #0]
 8005264:	600b      	str	r3, [r1, #0]
 8005266:	bf18      	it	ne
 8005268:	b22d      	sxthne	r5, r5
 800526a:	e7ef      	b.n	800524c <_printf_i+0xbc>
 800526c:	680b      	ldr	r3, [r1, #0]
 800526e:	6825      	ldr	r5, [r4, #0]
 8005270:	1d18      	adds	r0, r3, #4
 8005272:	6008      	str	r0, [r1, #0]
 8005274:	0628      	lsls	r0, r5, #24
 8005276:	d501      	bpl.n	800527c <_printf_i+0xec>
 8005278:	681d      	ldr	r5, [r3, #0]
 800527a:	e002      	b.n	8005282 <_printf_i+0xf2>
 800527c:	0669      	lsls	r1, r5, #25
 800527e:	d5fb      	bpl.n	8005278 <_printf_i+0xe8>
 8005280:	881d      	ldrh	r5, [r3, #0]
 8005282:	4854      	ldr	r0, [pc, #336]	; (80053d4 <_printf_i+0x244>)
 8005284:	2f6f      	cmp	r7, #111	; 0x6f
 8005286:	bf0c      	ite	eq
 8005288:	2308      	moveq	r3, #8
 800528a:	230a      	movne	r3, #10
 800528c:	2100      	movs	r1, #0
 800528e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005292:	6866      	ldr	r6, [r4, #4]
 8005294:	60a6      	str	r6, [r4, #8]
 8005296:	2e00      	cmp	r6, #0
 8005298:	bfa2      	ittt	ge
 800529a:	6821      	ldrge	r1, [r4, #0]
 800529c:	f021 0104 	bicge.w	r1, r1, #4
 80052a0:	6021      	strge	r1, [r4, #0]
 80052a2:	b90d      	cbnz	r5, 80052a8 <_printf_i+0x118>
 80052a4:	2e00      	cmp	r6, #0
 80052a6:	d04d      	beq.n	8005344 <_printf_i+0x1b4>
 80052a8:	4616      	mov	r6, r2
 80052aa:	fbb5 f1f3 	udiv	r1, r5, r3
 80052ae:	fb03 5711 	mls	r7, r3, r1, r5
 80052b2:	5dc7      	ldrb	r7, [r0, r7]
 80052b4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80052b8:	462f      	mov	r7, r5
 80052ba:	42bb      	cmp	r3, r7
 80052bc:	460d      	mov	r5, r1
 80052be:	d9f4      	bls.n	80052aa <_printf_i+0x11a>
 80052c0:	2b08      	cmp	r3, #8
 80052c2:	d10b      	bne.n	80052dc <_printf_i+0x14c>
 80052c4:	6823      	ldr	r3, [r4, #0]
 80052c6:	07df      	lsls	r7, r3, #31
 80052c8:	d508      	bpl.n	80052dc <_printf_i+0x14c>
 80052ca:	6923      	ldr	r3, [r4, #16]
 80052cc:	6861      	ldr	r1, [r4, #4]
 80052ce:	4299      	cmp	r1, r3
 80052d0:	bfde      	ittt	le
 80052d2:	2330      	movle	r3, #48	; 0x30
 80052d4:	f806 3c01 	strble.w	r3, [r6, #-1]
 80052d8:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 80052dc:	1b92      	subs	r2, r2, r6
 80052de:	6122      	str	r2, [r4, #16]
 80052e0:	f8cd a000 	str.w	sl, [sp]
 80052e4:	464b      	mov	r3, r9
 80052e6:	aa03      	add	r2, sp, #12
 80052e8:	4621      	mov	r1, r4
 80052ea:	4640      	mov	r0, r8
 80052ec:	f7ff fee2 	bl	80050b4 <_printf_common>
 80052f0:	3001      	adds	r0, #1
 80052f2:	d14c      	bne.n	800538e <_printf_i+0x1fe>
 80052f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80052f8:	b004      	add	sp, #16
 80052fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80052fe:	4835      	ldr	r0, [pc, #212]	; (80053d4 <_printf_i+0x244>)
 8005300:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005304:	6823      	ldr	r3, [r4, #0]
 8005306:	680e      	ldr	r6, [r1, #0]
 8005308:	061f      	lsls	r7, r3, #24
 800530a:	f856 5b04 	ldr.w	r5, [r6], #4
 800530e:	600e      	str	r6, [r1, #0]
 8005310:	d514      	bpl.n	800533c <_printf_i+0x1ac>
 8005312:	07d9      	lsls	r1, r3, #31
 8005314:	bf44      	itt	mi
 8005316:	f043 0320 	orrmi.w	r3, r3, #32
 800531a:	6023      	strmi	r3, [r4, #0]
 800531c:	b91d      	cbnz	r5, 8005326 <_printf_i+0x196>
 800531e:	6823      	ldr	r3, [r4, #0]
 8005320:	f023 0320 	bic.w	r3, r3, #32
 8005324:	6023      	str	r3, [r4, #0]
 8005326:	2310      	movs	r3, #16
 8005328:	e7b0      	b.n	800528c <_printf_i+0xfc>
 800532a:	6823      	ldr	r3, [r4, #0]
 800532c:	f043 0320 	orr.w	r3, r3, #32
 8005330:	6023      	str	r3, [r4, #0]
 8005332:	2378      	movs	r3, #120	; 0x78
 8005334:	4828      	ldr	r0, [pc, #160]	; (80053d8 <_printf_i+0x248>)
 8005336:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800533a:	e7e3      	b.n	8005304 <_printf_i+0x174>
 800533c:	065e      	lsls	r6, r3, #25
 800533e:	bf48      	it	mi
 8005340:	b2ad      	uxthmi	r5, r5
 8005342:	e7e6      	b.n	8005312 <_printf_i+0x182>
 8005344:	4616      	mov	r6, r2
 8005346:	e7bb      	b.n	80052c0 <_printf_i+0x130>
 8005348:	680b      	ldr	r3, [r1, #0]
 800534a:	6826      	ldr	r6, [r4, #0]
 800534c:	6960      	ldr	r0, [r4, #20]
 800534e:	1d1d      	adds	r5, r3, #4
 8005350:	600d      	str	r5, [r1, #0]
 8005352:	0635      	lsls	r5, r6, #24
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	d501      	bpl.n	800535c <_printf_i+0x1cc>
 8005358:	6018      	str	r0, [r3, #0]
 800535a:	e002      	b.n	8005362 <_printf_i+0x1d2>
 800535c:	0671      	lsls	r1, r6, #25
 800535e:	d5fb      	bpl.n	8005358 <_printf_i+0x1c8>
 8005360:	8018      	strh	r0, [r3, #0]
 8005362:	2300      	movs	r3, #0
 8005364:	6123      	str	r3, [r4, #16]
 8005366:	4616      	mov	r6, r2
 8005368:	e7ba      	b.n	80052e0 <_printf_i+0x150>
 800536a:	680b      	ldr	r3, [r1, #0]
 800536c:	1d1a      	adds	r2, r3, #4
 800536e:	600a      	str	r2, [r1, #0]
 8005370:	681e      	ldr	r6, [r3, #0]
 8005372:	6862      	ldr	r2, [r4, #4]
 8005374:	2100      	movs	r1, #0
 8005376:	4630      	mov	r0, r6
 8005378:	f7fa ff2a 	bl	80001d0 <memchr>
 800537c:	b108      	cbz	r0, 8005382 <_printf_i+0x1f2>
 800537e:	1b80      	subs	r0, r0, r6
 8005380:	6060      	str	r0, [r4, #4]
 8005382:	6863      	ldr	r3, [r4, #4]
 8005384:	6123      	str	r3, [r4, #16]
 8005386:	2300      	movs	r3, #0
 8005388:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800538c:	e7a8      	b.n	80052e0 <_printf_i+0x150>
 800538e:	6923      	ldr	r3, [r4, #16]
 8005390:	4632      	mov	r2, r6
 8005392:	4649      	mov	r1, r9
 8005394:	4640      	mov	r0, r8
 8005396:	47d0      	blx	sl
 8005398:	3001      	adds	r0, #1
 800539a:	d0ab      	beq.n	80052f4 <_printf_i+0x164>
 800539c:	6823      	ldr	r3, [r4, #0]
 800539e:	079b      	lsls	r3, r3, #30
 80053a0:	d413      	bmi.n	80053ca <_printf_i+0x23a>
 80053a2:	68e0      	ldr	r0, [r4, #12]
 80053a4:	9b03      	ldr	r3, [sp, #12]
 80053a6:	4298      	cmp	r0, r3
 80053a8:	bfb8      	it	lt
 80053aa:	4618      	movlt	r0, r3
 80053ac:	e7a4      	b.n	80052f8 <_printf_i+0x168>
 80053ae:	2301      	movs	r3, #1
 80053b0:	4632      	mov	r2, r6
 80053b2:	4649      	mov	r1, r9
 80053b4:	4640      	mov	r0, r8
 80053b6:	47d0      	blx	sl
 80053b8:	3001      	adds	r0, #1
 80053ba:	d09b      	beq.n	80052f4 <_printf_i+0x164>
 80053bc:	3501      	adds	r5, #1
 80053be:	68e3      	ldr	r3, [r4, #12]
 80053c0:	9903      	ldr	r1, [sp, #12]
 80053c2:	1a5b      	subs	r3, r3, r1
 80053c4:	42ab      	cmp	r3, r5
 80053c6:	dcf2      	bgt.n	80053ae <_printf_i+0x21e>
 80053c8:	e7eb      	b.n	80053a2 <_printf_i+0x212>
 80053ca:	2500      	movs	r5, #0
 80053cc:	f104 0619 	add.w	r6, r4, #25
 80053d0:	e7f5      	b.n	80053be <_printf_i+0x22e>
 80053d2:	bf00      	nop
 80053d4:	080057fd 	.word	0x080057fd
 80053d8:	0800580e 	.word	0x0800580e

080053dc <memcpy>:
 80053dc:	440a      	add	r2, r1
 80053de:	4291      	cmp	r1, r2
 80053e0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80053e4:	d100      	bne.n	80053e8 <memcpy+0xc>
 80053e6:	4770      	bx	lr
 80053e8:	b510      	push	{r4, lr}
 80053ea:	f811 4b01 	ldrb.w	r4, [r1], #1
 80053ee:	f803 4f01 	strb.w	r4, [r3, #1]!
 80053f2:	4291      	cmp	r1, r2
 80053f4:	d1f9      	bne.n	80053ea <memcpy+0xe>
 80053f6:	bd10      	pop	{r4, pc}

080053f8 <memmove>:
 80053f8:	4288      	cmp	r0, r1
 80053fa:	b510      	push	{r4, lr}
 80053fc:	eb01 0402 	add.w	r4, r1, r2
 8005400:	d902      	bls.n	8005408 <memmove+0x10>
 8005402:	4284      	cmp	r4, r0
 8005404:	4623      	mov	r3, r4
 8005406:	d807      	bhi.n	8005418 <memmove+0x20>
 8005408:	1e43      	subs	r3, r0, #1
 800540a:	42a1      	cmp	r1, r4
 800540c:	d008      	beq.n	8005420 <memmove+0x28>
 800540e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005412:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005416:	e7f8      	b.n	800540a <memmove+0x12>
 8005418:	4402      	add	r2, r0
 800541a:	4601      	mov	r1, r0
 800541c:	428a      	cmp	r2, r1
 800541e:	d100      	bne.n	8005422 <memmove+0x2a>
 8005420:	bd10      	pop	{r4, pc}
 8005422:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005426:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800542a:	e7f7      	b.n	800541c <memmove+0x24>

0800542c <_free_r>:
 800542c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800542e:	2900      	cmp	r1, #0
 8005430:	d048      	beq.n	80054c4 <_free_r+0x98>
 8005432:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005436:	9001      	str	r0, [sp, #4]
 8005438:	2b00      	cmp	r3, #0
 800543a:	f1a1 0404 	sub.w	r4, r1, #4
 800543e:	bfb8      	it	lt
 8005440:	18e4      	addlt	r4, r4, r3
 8005442:	f000 f8d3 	bl	80055ec <__malloc_lock>
 8005446:	4a20      	ldr	r2, [pc, #128]	; (80054c8 <_free_r+0x9c>)
 8005448:	9801      	ldr	r0, [sp, #4]
 800544a:	6813      	ldr	r3, [r2, #0]
 800544c:	4615      	mov	r5, r2
 800544e:	b933      	cbnz	r3, 800545e <_free_r+0x32>
 8005450:	6063      	str	r3, [r4, #4]
 8005452:	6014      	str	r4, [r2, #0]
 8005454:	b003      	add	sp, #12
 8005456:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800545a:	f000 b8cd 	b.w	80055f8 <__malloc_unlock>
 800545e:	42a3      	cmp	r3, r4
 8005460:	d90b      	bls.n	800547a <_free_r+0x4e>
 8005462:	6821      	ldr	r1, [r4, #0]
 8005464:	1862      	adds	r2, r4, r1
 8005466:	4293      	cmp	r3, r2
 8005468:	bf04      	itt	eq
 800546a:	681a      	ldreq	r2, [r3, #0]
 800546c:	685b      	ldreq	r3, [r3, #4]
 800546e:	6063      	str	r3, [r4, #4]
 8005470:	bf04      	itt	eq
 8005472:	1852      	addeq	r2, r2, r1
 8005474:	6022      	streq	r2, [r4, #0]
 8005476:	602c      	str	r4, [r5, #0]
 8005478:	e7ec      	b.n	8005454 <_free_r+0x28>
 800547a:	461a      	mov	r2, r3
 800547c:	685b      	ldr	r3, [r3, #4]
 800547e:	b10b      	cbz	r3, 8005484 <_free_r+0x58>
 8005480:	42a3      	cmp	r3, r4
 8005482:	d9fa      	bls.n	800547a <_free_r+0x4e>
 8005484:	6811      	ldr	r1, [r2, #0]
 8005486:	1855      	adds	r5, r2, r1
 8005488:	42a5      	cmp	r5, r4
 800548a:	d10b      	bne.n	80054a4 <_free_r+0x78>
 800548c:	6824      	ldr	r4, [r4, #0]
 800548e:	4421      	add	r1, r4
 8005490:	1854      	adds	r4, r2, r1
 8005492:	42a3      	cmp	r3, r4
 8005494:	6011      	str	r1, [r2, #0]
 8005496:	d1dd      	bne.n	8005454 <_free_r+0x28>
 8005498:	681c      	ldr	r4, [r3, #0]
 800549a:	685b      	ldr	r3, [r3, #4]
 800549c:	6053      	str	r3, [r2, #4]
 800549e:	4421      	add	r1, r4
 80054a0:	6011      	str	r1, [r2, #0]
 80054a2:	e7d7      	b.n	8005454 <_free_r+0x28>
 80054a4:	d902      	bls.n	80054ac <_free_r+0x80>
 80054a6:	230c      	movs	r3, #12
 80054a8:	6003      	str	r3, [r0, #0]
 80054aa:	e7d3      	b.n	8005454 <_free_r+0x28>
 80054ac:	6825      	ldr	r5, [r4, #0]
 80054ae:	1961      	adds	r1, r4, r5
 80054b0:	428b      	cmp	r3, r1
 80054b2:	bf04      	itt	eq
 80054b4:	6819      	ldreq	r1, [r3, #0]
 80054b6:	685b      	ldreq	r3, [r3, #4]
 80054b8:	6063      	str	r3, [r4, #4]
 80054ba:	bf04      	itt	eq
 80054bc:	1949      	addeq	r1, r1, r5
 80054be:	6021      	streq	r1, [r4, #0]
 80054c0:	6054      	str	r4, [r2, #4]
 80054c2:	e7c7      	b.n	8005454 <_free_r+0x28>
 80054c4:	b003      	add	sp, #12
 80054c6:	bd30      	pop	{r4, r5, pc}
 80054c8:	200000a8 	.word	0x200000a8

080054cc <_malloc_r>:
 80054cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054ce:	1ccd      	adds	r5, r1, #3
 80054d0:	f025 0503 	bic.w	r5, r5, #3
 80054d4:	3508      	adds	r5, #8
 80054d6:	2d0c      	cmp	r5, #12
 80054d8:	bf38      	it	cc
 80054da:	250c      	movcc	r5, #12
 80054dc:	2d00      	cmp	r5, #0
 80054de:	4606      	mov	r6, r0
 80054e0:	db01      	blt.n	80054e6 <_malloc_r+0x1a>
 80054e2:	42a9      	cmp	r1, r5
 80054e4:	d903      	bls.n	80054ee <_malloc_r+0x22>
 80054e6:	230c      	movs	r3, #12
 80054e8:	6033      	str	r3, [r6, #0]
 80054ea:	2000      	movs	r0, #0
 80054ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80054ee:	f000 f87d 	bl	80055ec <__malloc_lock>
 80054f2:	4921      	ldr	r1, [pc, #132]	; (8005578 <_malloc_r+0xac>)
 80054f4:	680a      	ldr	r2, [r1, #0]
 80054f6:	4614      	mov	r4, r2
 80054f8:	b99c      	cbnz	r4, 8005522 <_malloc_r+0x56>
 80054fa:	4f20      	ldr	r7, [pc, #128]	; (800557c <_malloc_r+0xb0>)
 80054fc:	683b      	ldr	r3, [r7, #0]
 80054fe:	b923      	cbnz	r3, 800550a <_malloc_r+0x3e>
 8005500:	4621      	mov	r1, r4
 8005502:	4630      	mov	r0, r6
 8005504:	f000 f862 	bl	80055cc <_sbrk_r>
 8005508:	6038      	str	r0, [r7, #0]
 800550a:	4629      	mov	r1, r5
 800550c:	4630      	mov	r0, r6
 800550e:	f000 f85d 	bl	80055cc <_sbrk_r>
 8005512:	1c43      	adds	r3, r0, #1
 8005514:	d123      	bne.n	800555e <_malloc_r+0x92>
 8005516:	230c      	movs	r3, #12
 8005518:	6033      	str	r3, [r6, #0]
 800551a:	4630      	mov	r0, r6
 800551c:	f000 f86c 	bl	80055f8 <__malloc_unlock>
 8005520:	e7e3      	b.n	80054ea <_malloc_r+0x1e>
 8005522:	6823      	ldr	r3, [r4, #0]
 8005524:	1b5b      	subs	r3, r3, r5
 8005526:	d417      	bmi.n	8005558 <_malloc_r+0x8c>
 8005528:	2b0b      	cmp	r3, #11
 800552a:	d903      	bls.n	8005534 <_malloc_r+0x68>
 800552c:	6023      	str	r3, [r4, #0]
 800552e:	441c      	add	r4, r3
 8005530:	6025      	str	r5, [r4, #0]
 8005532:	e004      	b.n	800553e <_malloc_r+0x72>
 8005534:	6863      	ldr	r3, [r4, #4]
 8005536:	42a2      	cmp	r2, r4
 8005538:	bf0c      	ite	eq
 800553a:	600b      	streq	r3, [r1, #0]
 800553c:	6053      	strne	r3, [r2, #4]
 800553e:	4630      	mov	r0, r6
 8005540:	f000 f85a 	bl	80055f8 <__malloc_unlock>
 8005544:	f104 000b 	add.w	r0, r4, #11
 8005548:	1d23      	adds	r3, r4, #4
 800554a:	f020 0007 	bic.w	r0, r0, #7
 800554e:	1ac2      	subs	r2, r0, r3
 8005550:	d0cc      	beq.n	80054ec <_malloc_r+0x20>
 8005552:	1a1b      	subs	r3, r3, r0
 8005554:	50a3      	str	r3, [r4, r2]
 8005556:	e7c9      	b.n	80054ec <_malloc_r+0x20>
 8005558:	4622      	mov	r2, r4
 800555a:	6864      	ldr	r4, [r4, #4]
 800555c:	e7cc      	b.n	80054f8 <_malloc_r+0x2c>
 800555e:	1cc4      	adds	r4, r0, #3
 8005560:	f024 0403 	bic.w	r4, r4, #3
 8005564:	42a0      	cmp	r0, r4
 8005566:	d0e3      	beq.n	8005530 <_malloc_r+0x64>
 8005568:	1a21      	subs	r1, r4, r0
 800556a:	4630      	mov	r0, r6
 800556c:	f000 f82e 	bl	80055cc <_sbrk_r>
 8005570:	3001      	adds	r0, #1
 8005572:	d1dd      	bne.n	8005530 <_malloc_r+0x64>
 8005574:	e7cf      	b.n	8005516 <_malloc_r+0x4a>
 8005576:	bf00      	nop
 8005578:	200000a8 	.word	0x200000a8
 800557c:	200000ac 	.word	0x200000ac

08005580 <_realloc_r>:
 8005580:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005582:	4607      	mov	r7, r0
 8005584:	4614      	mov	r4, r2
 8005586:	460e      	mov	r6, r1
 8005588:	b921      	cbnz	r1, 8005594 <_realloc_r+0x14>
 800558a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800558e:	4611      	mov	r1, r2
 8005590:	f7ff bf9c 	b.w	80054cc <_malloc_r>
 8005594:	b922      	cbnz	r2, 80055a0 <_realloc_r+0x20>
 8005596:	f7ff ff49 	bl	800542c <_free_r>
 800559a:	4625      	mov	r5, r4
 800559c:	4628      	mov	r0, r5
 800559e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80055a0:	f000 f830 	bl	8005604 <_malloc_usable_size_r>
 80055a4:	42a0      	cmp	r0, r4
 80055a6:	d20f      	bcs.n	80055c8 <_realloc_r+0x48>
 80055a8:	4621      	mov	r1, r4
 80055aa:	4638      	mov	r0, r7
 80055ac:	f7ff ff8e 	bl	80054cc <_malloc_r>
 80055b0:	4605      	mov	r5, r0
 80055b2:	2800      	cmp	r0, #0
 80055b4:	d0f2      	beq.n	800559c <_realloc_r+0x1c>
 80055b6:	4631      	mov	r1, r6
 80055b8:	4622      	mov	r2, r4
 80055ba:	f7ff ff0f 	bl	80053dc <memcpy>
 80055be:	4631      	mov	r1, r6
 80055c0:	4638      	mov	r0, r7
 80055c2:	f7ff ff33 	bl	800542c <_free_r>
 80055c6:	e7e9      	b.n	800559c <_realloc_r+0x1c>
 80055c8:	4635      	mov	r5, r6
 80055ca:	e7e7      	b.n	800559c <_realloc_r+0x1c>

080055cc <_sbrk_r>:
 80055cc:	b538      	push	{r3, r4, r5, lr}
 80055ce:	4d06      	ldr	r5, [pc, #24]	; (80055e8 <_sbrk_r+0x1c>)
 80055d0:	2300      	movs	r3, #0
 80055d2:	4604      	mov	r4, r0
 80055d4:	4608      	mov	r0, r1
 80055d6:	602b      	str	r3, [r5, #0]
 80055d8:	f7fc f9a2 	bl	8001920 <_sbrk>
 80055dc:	1c43      	adds	r3, r0, #1
 80055de:	d102      	bne.n	80055e6 <_sbrk_r+0x1a>
 80055e0:	682b      	ldr	r3, [r5, #0]
 80055e2:	b103      	cbz	r3, 80055e6 <_sbrk_r+0x1a>
 80055e4:	6023      	str	r3, [r4, #0]
 80055e6:	bd38      	pop	{r3, r4, r5, pc}
 80055e8:	200001e0 	.word	0x200001e0

080055ec <__malloc_lock>:
 80055ec:	4801      	ldr	r0, [pc, #4]	; (80055f4 <__malloc_lock+0x8>)
 80055ee:	f000 b811 	b.w	8005614 <__retarget_lock_acquire_recursive>
 80055f2:	bf00      	nop
 80055f4:	200001e8 	.word	0x200001e8

080055f8 <__malloc_unlock>:
 80055f8:	4801      	ldr	r0, [pc, #4]	; (8005600 <__malloc_unlock+0x8>)
 80055fa:	f000 b80c 	b.w	8005616 <__retarget_lock_release_recursive>
 80055fe:	bf00      	nop
 8005600:	200001e8 	.word	0x200001e8

08005604 <_malloc_usable_size_r>:
 8005604:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005608:	1f18      	subs	r0, r3, #4
 800560a:	2b00      	cmp	r3, #0
 800560c:	bfbc      	itt	lt
 800560e:	580b      	ldrlt	r3, [r1, r0]
 8005610:	18c0      	addlt	r0, r0, r3
 8005612:	4770      	bx	lr

08005614 <__retarget_lock_acquire_recursive>:
 8005614:	4770      	bx	lr

08005616 <__retarget_lock_release_recursive>:
 8005616:	4770      	bx	lr

08005618 <_init>:
 8005618:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800561a:	bf00      	nop
 800561c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800561e:	bc08      	pop	{r3}
 8005620:	469e      	mov	lr, r3
 8005622:	4770      	bx	lr

08005624 <_fini>:
 8005624:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005626:	bf00      	nop
 8005628:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800562a:	bc08      	pop	{r3}
 800562c:	469e      	mov	lr, r3
 800562e:	4770      	bx	lr
