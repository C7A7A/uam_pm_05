
MIDI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003d80  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08003f08  08003f08  00013f08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003f50  08003f50  00020060  2**0
                  CONTENTS
  4 .ARM          00000008  08003f50  08003f50  00013f50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003f58  08003f58  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003f58  08003f58  00013f58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003f5c  08003f5c  00013f5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  08003f60  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000158  20000060  08003fc0  00020060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001b8  08003fc0  000201b8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c766  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d89  00000000  00000000  0002c7f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a88  00000000  00000000  0002e580  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009d0  00000000  00000000  0002f008  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000257c7  00000000  00000000  0002f9d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b378  00000000  00000000  0005519f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e7223  00000000  00000000  00060517  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0014773a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002a34  00000000  00000000  00147790  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000060 	.word	0x20000060
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003ef0 	.word	0x08003ef0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000064 	.word	0x20000064
 80001c4:	08003ef0 	.word	0x08003ef0

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001dc:	f000 b96e 	b.w	80004bc <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468c      	mov	ip, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	f040 8083 	bne.w	800030e <__udivmoddi4+0x116>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d947      	bls.n	800029e <__udivmoddi4+0xa6>
 800020e:	fab2 f282 	clz	r2, r2
 8000212:	b142      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000214:	f1c2 0020 	rsb	r0, r2, #32
 8000218:	fa24 f000 	lsr.w	r0, r4, r0
 800021c:	4091      	lsls	r1, r2
 800021e:	4097      	lsls	r7, r2
 8000220:	ea40 0c01 	orr.w	ip, r0, r1
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbbc f6f8 	udiv	r6, ip, r8
 8000230:	fa1f fe87 	uxth.w	lr, r7
 8000234:	fb08 c116 	mls	r1, r8, r6, ip
 8000238:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023c:	fb06 f10e 	mul.w	r1, r6, lr
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18fb      	adds	r3, r7, r3
 8000246:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800024a:	f080 8119 	bcs.w	8000480 <__udivmoddi4+0x288>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8116 	bls.w	8000480 <__udivmoddi4+0x288>
 8000254:	3e02      	subs	r6, #2
 8000256:	443b      	add	r3, r7
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000260:	fb08 3310 	mls	r3, r8, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fe0e 	mul.w	lr, r0, lr
 800026c:	45a6      	cmp	lr, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	193c      	adds	r4, r7, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000276:	f080 8105 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800027a:	45a6      	cmp	lr, r4
 800027c:	f240 8102 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000280:	3802      	subs	r0, #2
 8000282:	443c      	add	r4, r7
 8000284:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000288:	eba4 040e 	sub.w	r4, r4, lr
 800028c:	2600      	movs	r6, #0
 800028e:	b11d      	cbz	r5, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c5 4300 	strd	r4, r3, [r5]
 8000298:	4631      	mov	r1, r6
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	b902      	cbnz	r2, 80002a2 <__udivmoddi4+0xaa>
 80002a0:	deff      	udf	#255	; 0xff
 80002a2:	fab2 f282 	clz	r2, r2
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d150      	bne.n	800034c <__udivmoddi4+0x154>
 80002aa:	1bcb      	subs	r3, r1, r7
 80002ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b0:	fa1f f887 	uxth.w	r8, r7
 80002b4:	2601      	movs	r6, #1
 80002b6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ba:	0c21      	lsrs	r1, r4, #16
 80002bc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002c4:	fb08 f30c 	mul.w	r3, r8, ip
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d907      	bls.n	80002dc <__udivmoddi4+0xe4>
 80002cc:	1879      	adds	r1, r7, r1
 80002ce:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80002d2:	d202      	bcs.n	80002da <__udivmoddi4+0xe2>
 80002d4:	428b      	cmp	r3, r1
 80002d6:	f200 80e9 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 80002da:	4684      	mov	ip, r0
 80002dc:	1ac9      	subs	r1, r1, r3
 80002de:	b2a3      	uxth	r3, r4
 80002e0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002e4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002e8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002ec:	fb08 f800 	mul.w	r8, r8, r0
 80002f0:	45a0      	cmp	r8, r4
 80002f2:	d907      	bls.n	8000304 <__udivmoddi4+0x10c>
 80002f4:	193c      	adds	r4, r7, r4
 80002f6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002fa:	d202      	bcs.n	8000302 <__udivmoddi4+0x10a>
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	f200 80d9 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 8000302:	4618      	mov	r0, r3
 8000304:	eba4 0408 	sub.w	r4, r4, r8
 8000308:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800030c:	e7bf      	b.n	800028e <__udivmoddi4+0x96>
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0x12e>
 8000312:	2d00      	cmp	r5, #0
 8000314:	f000 80b1 	beq.w	800047a <__udivmoddi4+0x282>
 8000318:	2600      	movs	r6, #0
 800031a:	e9c5 0100 	strd	r0, r1, [r5]
 800031e:	4630      	mov	r0, r6
 8000320:	4631      	mov	r1, r6
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f683 	clz	r6, r3
 800032a:	2e00      	cmp	r6, #0
 800032c:	d14a      	bne.n	80003c4 <__udivmoddi4+0x1cc>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0x140>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80b8 	bhi.w	80004a8 <__udivmoddi4+0x2b0>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0103 	sbc.w	r1, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	468c      	mov	ip, r1
 8000342:	2d00      	cmp	r5, #0
 8000344:	d0a8      	beq.n	8000298 <__udivmoddi4+0xa0>
 8000346:	e9c5 4c00 	strd	r4, ip, [r5]
 800034a:	e7a5      	b.n	8000298 <__udivmoddi4+0xa0>
 800034c:	f1c2 0320 	rsb	r3, r2, #32
 8000350:	fa20 f603 	lsr.w	r6, r0, r3
 8000354:	4097      	lsls	r7, r2
 8000356:	fa01 f002 	lsl.w	r0, r1, r2
 800035a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800035e:	40d9      	lsrs	r1, r3
 8000360:	4330      	orrs	r0, r6
 8000362:	0c03      	lsrs	r3, r0, #16
 8000364:	fbb1 f6fe 	udiv	r6, r1, lr
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb06 f108 	mul.w	r1, r6, r8
 8000378:	4299      	cmp	r1, r3
 800037a:	fa04 f402 	lsl.w	r4, r4, r2
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x19c>
 8000380:	18fb      	adds	r3, r7, r3
 8000382:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000386:	f080 808d 	bcs.w	80004a4 <__udivmoddi4+0x2ac>
 800038a:	4299      	cmp	r1, r3
 800038c:	f240 808a 	bls.w	80004a4 <__udivmoddi4+0x2ac>
 8000390:	3e02      	subs	r6, #2
 8000392:	443b      	add	r3, r7
 8000394:	1a5b      	subs	r3, r3, r1
 8000396:	b281      	uxth	r1, r0
 8000398:	fbb3 f0fe 	udiv	r0, r3, lr
 800039c:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003a4:	fb00 f308 	mul.w	r3, r0, r8
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x1c4>
 80003ac:	1879      	adds	r1, r7, r1
 80003ae:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80003b2:	d273      	bcs.n	800049c <__udivmoddi4+0x2a4>
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d971      	bls.n	800049c <__udivmoddi4+0x2a4>
 80003b8:	3802      	subs	r0, #2
 80003ba:	4439      	add	r1, r7
 80003bc:	1acb      	subs	r3, r1, r3
 80003be:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003c2:	e778      	b.n	80002b6 <__udivmoddi4+0xbe>
 80003c4:	f1c6 0c20 	rsb	ip, r6, #32
 80003c8:	fa03 f406 	lsl.w	r4, r3, r6
 80003cc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d0:	431c      	orrs	r4, r3
 80003d2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003d6:	fa01 f306 	lsl.w	r3, r1, r6
 80003da:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003de:	fa21 f10c 	lsr.w	r1, r1, ip
 80003e2:	431f      	orrs	r7, r3
 80003e4:	0c3b      	lsrs	r3, r7, #16
 80003e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003ea:	fa1f f884 	uxth.w	r8, r4
 80003ee:	fb0e 1119 	mls	r1, lr, r9, r1
 80003f2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003f6:	fb09 fa08 	mul.w	sl, r9, r8
 80003fa:	458a      	cmp	sl, r1
 80003fc:	fa02 f206 	lsl.w	r2, r2, r6
 8000400:	fa00 f306 	lsl.w	r3, r0, r6
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x220>
 8000406:	1861      	adds	r1, r4, r1
 8000408:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 800040c:	d248      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 800040e:	458a      	cmp	sl, r1
 8000410:	d946      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4421      	add	r1, r4
 8000418:	eba1 010a 	sub.w	r1, r1, sl
 800041c:	b2bf      	uxth	r7, r7
 800041e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000422:	fb0e 1110 	mls	r1, lr, r0, r1
 8000426:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800042a:	fb00 f808 	mul.w	r8, r0, r8
 800042e:	45b8      	cmp	r8, r7
 8000430:	d907      	bls.n	8000442 <__udivmoddi4+0x24a>
 8000432:	19e7      	adds	r7, r4, r7
 8000434:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000438:	d22e      	bcs.n	8000498 <__udivmoddi4+0x2a0>
 800043a:	45b8      	cmp	r8, r7
 800043c:	d92c      	bls.n	8000498 <__udivmoddi4+0x2a0>
 800043e:	3802      	subs	r0, #2
 8000440:	4427      	add	r7, r4
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	eba7 0708 	sub.w	r7, r7, r8
 800044a:	fba0 8902 	umull	r8, r9, r0, r2
 800044e:	454f      	cmp	r7, r9
 8000450:	46c6      	mov	lr, r8
 8000452:	4649      	mov	r1, r9
 8000454:	d31a      	bcc.n	800048c <__udivmoddi4+0x294>
 8000456:	d017      	beq.n	8000488 <__udivmoddi4+0x290>
 8000458:	b15d      	cbz	r5, 8000472 <__udivmoddi4+0x27a>
 800045a:	ebb3 020e 	subs.w	r2, r3, lr
 800045e:	eb67 0701 	sbc.w	r7, r7, r1
 8000462:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000466:	40f2      	lsrs	r2, r6
 8000468:	ea4c 0202 	orr.w	r2, ip, r2
 800046c:	40f7      	lsrs	r7, r6
 800046e:	e9c5 2700 	strd	r2, r7, [r5]
 8000472:	2600      	movs	r6, #0
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	462e      	mov	r6, r5
 800047c:	4628      	mov	r0, r5
 800047e:	e70b      	b.n	8000298 <__udivmoddi4+0xa0>
 8000480:	4606      	mov	r6, r0
 8000482:	e6e9      	b.n	8000258 <__udivmoddi4+0x60>
 8000484:	4618      	mov	r0, r3
 8000486:	e6fd      	b.n	8000284 <__udivmoddi4+0x8c>
 8000488:	4543      	cmp	r3, r8
 800048a:	d2e5      	bcs.n	8000458 <__udivmoddi4+0x260>
 800048c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000490:	eb69 0104 	sbc.w	r1, r9, r4
 8000494:	3801      	subs	r0, #1
 8000496:	e7df      	b.n	8000458 <__udivmoddi4+0x260>
 8000498:	4608      	mov	r0, r1
 800049a:	e7d2      	b.n	8000442 <__udivmoddi4+0x24a>
 800049c:	4660      	mov	r0, ip
 800049e:	e78d      	b.n	80003bc <__udivmoddi4+0x1c4>
 80004a0:	4681      	mov	r9, r0
 80004a2:	e7b9      	b.n	8000418 <__udivmoddi4+0x220>
 80004a4:	4666      	mov	r6, ip
 80004a6:	e775      	b.n	8000394 <__udivmoddi4+0x19c>
 80004a8:	4630      	mov	r0, r6
 80004aa:	e74a      	b.n	8000342 <__udivmoddi4+0x14a>
 80004ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b0:	4439      	add	r1, r7
 80004b2:	e713      	b.n	80002dc <__udivmoddi4+0xe4>
 80004b4:	3802      	subs	r0, #2
 80004b6:	443c      	add	r4, r7
 80004b8:	e724      	b.n	8000304 <__udivmoddi4+0x10c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <circ_bbuf_push>:
static void MX_USART2_UART_Init(void);
static void MX_USART1_UART_Init(void);
static void MX_DAC1_Init(void);
/* USER CODE BEGIN PFP */
/* Private function prototypes -----------------------------------------------*/
int circ_bbuf_push(circ_bbuf_t *c, uint8_t data) {
 80004c0:	b480      	push	{r7}
 80004c2:	b085      	sub	sp, #20
 80004c4:	af00      	add	r7, sp, #0
 80004c6:	6078      	str	r0, [r7, #4]
 80004c8:	460b      	mov	r3, r1
 80004ca:	70fb      	strb	r3, [r7, #3]
    int next;

    next = c->head + 1;  // next is where head will point to after this write.
 80004cc:	687b      	ldr	r3, [r7, #4]
 80004ce:	685b      	ldr	r3, [r3, #4]
 80004d0:	3301      	adds	r3, #1
 80004d2:	60fb      	str	r3, [r7, #12]
    if (next >= c->maxlen)
 80004d4:	687b      	ldr	r3, [r7, #4]
 80004d6:	68db      	ldr	r3, [r3, #12]
 80004d8:	68fa      	ldr	r2, [r7, #12]
 80004da:	429a      	cmp	r2, r3
 80004dc:	db01      	blt.n	80004e2 <circ_bbuf_push+0x22>
        next = 0;
 80004de:	2300      	movs	r3, #0
 80004e0:	60fb      	str	r3, [r7, #12]

    if (next == c->tail)  // if the head + 1 == tail, circular buffer is full
 80004e2:	687b      	ldr	r3, [r7, #4]
 80004e4:	689b      	ldr	r3, [r3, #8]
 80004e6:	68fa      	ldr	r2, [r7, #12]
 80004e8:	429a      	cmp	r2, r3
 80004ea:	d102      	bne.n	80004f2 <circ_bbuf_push+0x32>
        return -1;
 80004ec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80004f0:	e00a      	b.n	8000508 <circ_bbuf_push+0x48>

    c->buffer[c->head] = data;  // Load data and then move
 80004f2:	687b      	ldr	r3, [r7, #4]
 80004f4:	681b      	ldr	r3, [r3, #0]
 80004f6:	687a      	ldr	r2, [r7, #4]
 80004f8:	6852      	ldr	r2, [r2, #4]
 80004fa:	4413      	add	r3, r2
 80004fc:	78fa      	ldrb	r2, [r7, #3]
 80004fe:	701a      	strb	r2, [r3, #0]
    c->head = next;             // head to next data offset.
 8000500:	687b      	ldr	r3, [r7, #4]
 8000502:	68fa      	ldr	r2, [r7, #12]
 8000504:	605a      	str	r2, [r3, #4]
    return 0;  // return success to indicate successful push.
 8000506:	2300      	movs	r3, #0
}
 8000508:	4618      	mov	r0, r3
 800050a:	3714      	adds	r7, #20
 800050c:	46bd      	mov	sp, r7
 800050e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000512:	4770      	bx	lr

08000514 <circ_bbuf_pop>:

int circ_bbuf_pop(circ_bbuf_t *c, uint8_t *data) {
 8000514:	b480      	push	{r7}
 8000516:	b085      	sub	sp, #20
 8000518:	af00      	add	r7, sp, #0
 800051a:	6078      	str	r0, [r7, #4]
 800051c:	6039      	str	r1, [r7, #0]
    int next;

    if (c->head == c->tail)  // if the head == tail, we don't have any data
 800051e:	687b      	ldr	r3, [r7, #4]
 8000520:	685a      	ldr	r2, [r3, #4]
 8000522:	687b      	ldr	r3, [r7, #4]
 8000524:	689b      	ldr	r3, [r3, #8]
 8000526:	429a      	cmp	r2, r3
 8000528:	d102      	bne.n	8000530 <circ_bbuf_pop+0x1c>
        return -1;
 800052a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800052e:	e016      	b.n	800055e <circ_bbuf_pop+0x4a>

    next = c->tail + 1;  // next is where tail will point to after this read.
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	689b      	ldr	r3, [r3, #8]
 8000534:	3301      	adds	r3, #1
 8000536:	60fb      	str	r3, [r7, #12]
    if(next >= c->maxlen)
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	68db      	ldr	r3, [r3, #12]
 800053c:	68fa      	ldr	r2, [r7, #12]
 800053e:	429a      	cmp	r2, r3
 8000540:	db01      	blt.n	8000546 <circ_bbuf_pop+0x32>
        next = 0;
 8000542:	2300      	movs	r3, #0
 8000544:	60fb      	str	r3, [r7, #12]

    *data = c->buffer[c->tail];  // Read data and then move
 8000546:	687b      	ldr	r3, [r7, #4]
 8000548:	681b      	ldr	r3, [r3, #0]
 800054a:	687a      	ldr	r2, [r7, #4]
 800054c:	6892      	ldr	r2, [r2, #8]
 800054e:	4413      	add	r3, r2
 8000550:	781a      	ldrb	r2, [r3, #0]
 8000552:	683b      	ldr	r3, [r7, #0]
 8000554:	701a      	strb	r2, [r3, #0]
    c->tail = next;              // tail to next offset.
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	68fa      	ldr	r2, [r7, #12]
 800055a:	609a      	str	r2, [r3, #8]
    return 0;  // return success to indicate successful push.
 800055c:	2300      	movs	r3, #0
}
 800055e:	4618      	mov	r0, r3
 8000560:	3714      	adds	r7, #20
 8000562:	46bd      	mov	sp, r7
 8000564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000568:	4770      	bx	lr
	...

0800056c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 800056c:	b580      	push	{r7, lr}
 800056e:	b082      	sub	sp, #8
 8000570:	af00      	add	r7, sp, #0
 8000572:	6078      	str	r0, [r7, #4]

	circ_bbuf_push(&my_circ_buf, Received);
 8000574:	4b09      	ldr	r3, [pc, #36]	; (800059c <HAL_UART_RxCpltCallback+0x30>)
 8000576:	781b      	ldrb	r3, [r3, #0]
 8000578:	4619      	mov	r1, r3
 800057a:	4809      	ldr	r0, [pc, #36]	; (80005a0 <HAL_UART_RxCpltCallback+0x34>)
 800057c:	f7ff ffa0 	bl	80004c0 <circ_bbuf_push>

	HAL_UART_Receive_IT(&huart1, &Received, 1);
 8000580:	2201      	movs	r2, #1
 8000582:	4906      	ldr	r1, [pc, #24]	; (800059c <HAL_UART_RxCpltCallback+0x30>)
 8000584:	4807      	ldr	r0, [pc, #28]	; (80005a4 <HAL_UART_RxCpltCallback+0x38>)
 8000586:	f002 fc67 	bl	8002e58 <HAL_UART_Receive_IT>
	HAL_UART_Receive_IT(&huart2, &Received, 1);
 800058a:	2201      	movs	r2, #1
 800058c:	4903      	ldr	r1, [pc, #12]	; (800059c <HAL_UART_RxCpltCallback+0x30>)
 800058e:	4806      	ldr	r0, [pc, #24]	; (80005a8 <HAL_UART_RxCpltCallback+0x3c>)
 8000590:	f002 fc62 	bl	8002e58 <HAL_UART_Receive_IT>
}
 8000594:	bf00      	nop
 8000596:	3708      	adds	r7, #8
 8000598:	46bd      	mov	sp, r7
 800059a:	bd80      	pop	{r7, pc}
 800059c:	2000007c 	.word	0x2000007c
 80005a0:	20000044 	.word	0x20000044
 80005a4:	20000098 	.word	0x20000098
 80005a8:	20000130 	.word	0x20000130

080005ac <parse_MIDI_data>:

void parse_MIDI_data() {
 80005ac:	b580      	push	{r7, lr}
 80005ae:	af00      	add	r7, sp, #0
	if (circ_bbuf_pop(&my_circ_buf, &MIDI_byte) != -1) {
 80005b0:	4925      	ldr	r1, [pc, #148]	; (8000648 <parse_MIDI_data+0x9c>)
 80005b2:	4826      	ldr	r0, [pc, #152]	; (800064c <parse_MIDI_data+0xa0>)
 80005b4:	f7ff ffae 	bl	8000514 <circ_bbuf_pop>
 80005b8:	4603      	mov	r3, r0
 80005ba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80005be:	d040      	beq.n	8000642 <parse_MIDI_data+0x96>

		if(MIDI_byte >> 4 == 0b1001) {
 80005c0:	4b21      	ldr	r3, [pc, #132]	; (8000648 <parse_MIDI_data+0x9c>)
 80005c2:	781b      	ldrb	r3, [r3, #0]
 80005c4:	091b      	lsrs	r3, r3, #4
 80005c6:	b2db      	uxtb	r3, r3
 80005c8:	2b09      	cmp	r3, #9
 80005ca:	d11d      	bne.n	8000608 <parse_MIDI_data+0x5c>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 80005cc:	2201      	movs	r2, #1
 80005ce:	2120      	movs	r1, #32
 80005d0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005d4:	f001 f8ce 	bl	8001774 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET); // GATE ON
 80005d8:	2201      	movs	r2, #1
 80005da:	2102      	movs	r1, #2
 80005dc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005e0:	f001 f8c8 	bl	8001774 <HAL_GPIO_WritePin>

			if (circ_bbuf_pop(&my_circ_buf, &MIDI_note) != -1) {
 80005e4:	491a      	ldr	r1, [pc, #104]	; (8000650 <parse_MIDI_data+0xa4>)
 80005e6:	4819      	ldr	r0, [pc, #100]	; (800064c <parse_MIDI_data+0xa0>)
 80005e8:	f7ff ff94 	bl	8000514 <circ_bbuf_pop>
 80005ec:	4603      	mov	r3, r0
 80005ee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80005f2:	d004      	beq.n	80005fe <parse_MIDI_data+0x52>
				 // DAC1->DHR12R1 = DAC_OUT[MIDI_note - 48]; // SET PITCH
				DAC1->DHR12R1 = DAC_OUT[32];
 80005f4:	4b17      	ldr	r3, [pc, #92]	; (8000654 <parse_MIDI_data+0xa8>)
 80005f6:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 80005fa:	4b17      	ldr	r3, [pc, #92]	; (8000658 <parse_MIDI_data+0xac>)
 80005fc:	609a      	str	r2, [r3, #8]
			}

			circ_bbuf_pop(&my_circ_buf, &MIDI_byte);
 80005fe:	4912      	ldr	r1, [pc, #72]	; (8000648 <parse_MIDI_data+0x9c>)
 8000600:	4812      	ldr	r0, [pc, #72]	; (800064c <parse_MIDI_data+0xa0>)
 8000602:	f7ff ff87 	bl	8000514 <circ_bbuf_pop>

			circ_bbuf_pop(&my_circ_buf, &MIDI_byte);
			circ_bbuf_pop(&my_circ_buf, &MIDI_byte);
		}
	}
}
 8000606:	e01c      	b.n	8000642 <parse_MIDI_data+0x96>
		} else if(MIDI_byte >> 4 == 0b1000) {
 8000608:	4b0f      	ldr	r3, [pc, #60]	; (8000648 <parse_MIDI_data+0x9c>)
 800060a:	781b      	ldrb	r3, [r3, #0]
 800060c:	091b      	lsrs	r3, r3, #4
 800060e:	b2db      	uxtb	r3, r3
 8000610:	2b08      	cmp	r3, #8
 8000612:	d116      	bne.n	8000642 <parse_MIDI_data+0x96>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000614:	2200      	movs	r2, #0
 8000616:	2120      	movs	r1, #32
 8000618:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800061c:	f001 f8aa 	bl	8001774 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET); // GATE OFF
 8000620:	2200      	movs	r2, #0
 8000622:	2102      	movs	r1, #2
 8000624:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000628:	f001 f8a4 	bl	8001774 <HAL_GPIO_WritePin>
			DAC1->DHR12R1 = 0; // PITCH
 800062c:	4b0a      	ldr	r3, [pc, #40]	; (8000658 <parse_MIDI_data+0xac>)
 800062e:	2200      	movs	r2, #0
 8000630:	609a      	str	r2, [r3, #8]
			circ_bbuf_pop(&my_circ_buf, &MIDI_byte);
 8000632:	4905      	ldr	r1, [pc, #20]	; (8000648 <parse_MIDI_data+0x9c>)
 8000634:	4805      	ldr	r0, [pc, #20]	; (800064c <parse_MIDI_data+0xa0>)
 8000636:	f7ff ff6d 	bl	8000514 <circ_bbuf_pop>
			circ_bbuf_pop(&my_circ_buf, &MIDI_byte);
 800063a:	4903      	ldr	r1, [pc, #12]	; (8000648 <parse_MIDI_data+0x9c>)
 800063c:	4803      	ldr	r0, [pc, #12]	; (800064c <parse_MIDI_data+0xa0>)
 800063e:	f7ff ff69 	bl	8000514 <circ_bbuf_pop>
}
 8000642:	bf00      	nop
 8000644:	bd80      	pop	{r7, pc}
 8000646:	bf00      	nop
 8000648:	20000094 	.word	0x20000094
 800064c:	20000044 	.word	0x20000044
 8000650:	2000012c 	.word	0x2000012c
 8000654:	20000000 	.word	0x20000000
 8000658:	40007400 	.word	0x40007400

0800065c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000660:	f000 fb24 	bl	8000cac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000664:	f000 f822 	bl	80006ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000668:	f000 f904 	bl	8000874 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800066c:	f000 f8d2 	bl	8000814 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 8000670:	f000 f8a0 	bl	80007b4 <MX_USART1_UART_Init>
  MX_DAC1_Init();
 8000674:	f000 f86c 	bl	8000750 <MX_DAC1_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart2, &Received, 1);
 8000678:	2201      	movs	r2, #1
 800067a:	4908      	ldr	r1, [pc, #32]	; (800069c <main+0x40>)
 800067c:	4808      	ldr	r0, [pc, #32]	; (80006a0 <main+0x44>)
 800067e:	f002 fbeb 	bl	8002e58 <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart1, &Received, 1);
 8000682:	2201      	movs	r2, #1
 8000684:	4905      	ldr	r1, [pc, #20]	; (800069c <main+0x40>)
 8000686:	4807      	ldr	r0, [pc, #28]	; (80006a4 <main+0x48>)
 8000688:	f002 fbe6 	bl	8002e58 <HAL_UART_Receive_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_DAC_Start(&hdac1, DAC1_CHANNEL_1);
 800068c:	2100      	movs	r1, #0
 800068e:	4806      	ldr	r0, [pc, #24]	; (80006a8 <main+0x4c>)
 8000690:	f000 fcdf 	bl	8001052 <HAL_DAC_Start>
  while (1)
  {
	  parse_MIDI_data();
 8000694:	f7ff ff8a 	bl	80005ac <parse_MIDI_data>
 8000698:	e7fc      	b.n	8000694 <main+0x38>
 800069a:	bf00      	nop
 800069c:	2000007c 	.word	0x2000007c
 80006a0:	20000130 	.word	0x20000130
 80006a4:	20000098 	.word	0x20000098
 80006a8:	20000080 	.word	0x20000080

080006ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b096      	sub	sp, #88	; 0x58
 80006b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006b2:	f107 0314 	add.w	r3, r7, #20
 80006b6:	2244      	movs	r2, #68	; 0x44
 80006b8:	2100      	movs	r1, #0
 80006ba:	4618      	mov	r0, r3
 80006bc:	f003 fc10 	bl	8003ee0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006c0:	463b      	mov	r3, r7
 80006c2:	2200      	movs	r2, #0
 80006c4:	601a      	str	r2, [r3, #0]
 80006c6:	605a      	str	r2, [r3, #4]
 80006c8:	609a      	str	r2, [r3, #8]
 80006ca:	60da      	str	r2, [r3, #12]
 80006cc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80006ce:	f44f 7000 	mov.w	r0, #512	; 0x200
 80006d2:	f001 f875 	bl	80017c0 <HAL_PWREx_ControlVoltageScaling>
 80006d6:	4603      	mov	r3, r0
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d001      	beq.n	80006e0 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80006dc:	f000 f932 	bl	8000944 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006e0:	2302      	movs	r3, #2
 80006e2:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006e4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80006e8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006ea:	2310      	movs	r3, #16
 80006ec:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006ee:	2302      	movs	r3, #2
 80006f0:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006f2:	2302      	movs	r3, #2
 80006f4:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80006f6:	2301      	movs	r3, #1
 80006f8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 80006fa:	230a      	movs	r3, #10
 80006fc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80006fe:	2307      	movs	r3, #7
 8000700:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000702:	2302      	movs	r3, #2
 8000704:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000706:	2302      	movs	r3, #2
 8000708:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800070a:	f107 0314 	add.w	r3, r7, #20
 800070e:	4618      	mov	r0, r3
 8000710:	f001 f8ac 	bl	800186c <HAL_RCC_OscConfig>
 8000714:	4603      	mov	r3, r0
 8000716:	2b00      	cmp	r3, #0
 8000718:	d001      	beq.n	800071e <SystemClock_Config+0x72>
  {
    Error_Handler();
 800071a:	f000 f913 	bl	8000944 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800071e:	230f      	movs	r3, #15
 8000720:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000722:	2303      	movs	r3, #3
 8000724:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000726:	2300      	movs	r3, #0
 8000728:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800072a:	2300      	movs	r3, #0
 800072c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800072e:	2300      	movs	r3, #0
 8000730:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000732:	463b      	mov	r3, r7
 8000734:	2104      	movs	r1, #4
 8000736:	4618      	mov	r0, r3
 8000738:	f001 fc7e 	bl	8002038 <HAL_RCC_ClockConfig>
 800073c:	4603      	mov	r3, r0
 800073e:	2b00      	cmp	r3, #0
 8000740:	d001      	beq.n	8000746 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000742:	f000 f8ff 	bl	8000944 <Error_Handler>
  }
}
 8000746:	bf00      	nop
 8000748:	3758      	adds	r7, #88	; 0x58
 800074a:	46bd      	mov	sp, r7
 800074c:	bd80      	pop	{r7, pc}
	...

08000750 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b08a      	sub	sp, #40	; 0x28
 8000754:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000756:	1d3b      	adds	r3, r7, #4
 8000758:	2224      	movs	r2, #36	; 0x24
 800075a:	2100      	movs	r1, #0
 800075c:	4618      	mov	r0, r3
 800075e:	f003 fbbf 	bl	8003ee0 <memset>
  /* USER CODE BEGIN DAC1_Init 1 */

  /* USER CODE END DAC1_Init 1 */
  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8000762:	4b12      	ldr	r3, [pc, #72]	; (80007ac <MX_DAC1_Init+0x5c>)
 8000764:	4a12      	ldr	r2, [pc, #72]	; (80007b0 <MX_DAC1_Init+0x60>)
 8000766:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000768:	4810      	ldr	r0, [pc, #64]	; (80007ac <MX_DAC1_Init+0x5c>)
 800076a:	f000 fc50 	bl	800100e <HAL_DAC_Init>
 800076e:	4603      	mov	r3, r0
 8000770:	2b00      	cmp	r3, #0
 8000772:	d001      	beq.n	8000778 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8000774:	f000 f8e6 	bl	8000944 <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000778:	2300      	movs	r3, #0
 800077a:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 800077c:	2300      	movs	r3, #0
 800077e:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000780:	2300      	movs	r3, #0
 8000782:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8000784:	2300      	movs	r3, #0
 8000786:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000788:	2300      	movs	r3, #0
 800078a:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 800078c:	1d3b      	adds	r3, r7, #4
 800078e:	2200      	movs	r2, #0
 8000790:	4619      	mov	r1, r3
 8000792:	4806      	ldr	r0, [pc, #24]	; (80007ac <MX_DAC1_Init+0x5c>)
 8000794:	f000 fcaa 	bl	80010ec <HAL_DAC_ConfigChannel>
 8000798:	4603      	mov	r3, r0
 800079a:	2b00      	cmp	r3, #0
 800079c:	d001      	beq.n	80007a2 <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 800079e:	f000 f8d1 	bl	8000944 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 80007a2:	bf00      	nop
 80007a4:	3728      	adds	r7, #40	; 0x28
 80007a6:	46bd      	mov	sp, r7
 80007a8:	bd80      	pop	{r7, pc}
 80007aa:	bf00      	nop
 80007ac:	20000080 	.word	0x20000080
 80007b0:	40007400 	.word	0x40007400

080007b4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80007b8:	4b14      	ldr	r3, [pc, #80]	; (800080c <MX_USART1_UART_Init+0x58>)
 80007ba:	4a15      	ldr	r2, [pc, #84]	; (8000810 <MX_USART1_UART_Init+0x5c>)
 80007bc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 31250;
 80007be:	4b13      	ldr	r3, [pc, #76]	; (800080c <MX_USART1_UART_Init+0x58>)
 80007c0:	f647 2212 	movw	r2, #31250	; 0x7a12
 80007c4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80007c6:	4b11      	ldr	r3, [pc, #68]	; (800080c <MX_USART1_UART_Init+0x58>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80007cc:	4b0f      	ldr	r3, [pc, #60]	; (800080c <MX_USART1_UART_Init+0x58>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80007d2:	4b0e      	ldr	r3, [pc, #56]	; (800080c <MX_USART1_UART_Init+0x58>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80007d8:	4b0c      	ldr	r3, [pc, #48]	; (800080c <MX_USART1_UART_Init+0x58>)
 80007da:	220c      	movs	r2, #12
 80007dc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007de:	4b0b      	ldr	r3, [pc, #44]	; (800080c <MX_USART1_UART_Init+0x58>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80007e4:	4b09      	ldr	r3, [pc, #36]	; (800080c <MX_USART1_UART_Init+0x58>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007ea:	4b08      	ldr	r3, [pc, #32]	; (800080c <MX_USART1_UART_Init+0x58>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007f0:	4b06      	ldr	r3, [pc, #24]	; (800080c <MX_USART1_UART_Init+0x58>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80007f6:	4805      	ldr	r0, [pc, #20]	; (800080c <MX_USART1_UART_Init+0x58>)
 80007f8:	f002 fae0 	bl	8002dbc <HAL_UART_Init>
 80007fc:	4603      	mov	r3, r0
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d001      	beq.n	8000806 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000802:	f000 f89f 	bl	8000944 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000806:	bf00      	nop
 8000808:	bd80      	pop	{r7, pc}
 800080a:	bf00      	nop
 800080c:	20000098 	.word	0x20000098
 8000810:	40013800 	.word	0x40013800

08000814 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000818:	4b14      	ldr	r3, [pc, #80]	; (800086c <MX_USART2_UART_Init+0x58>)
 800081a:	4a15      	ldr	r2, [pc, #84]	; (8000870 <MX_USART2_UART_Init+0x5c>)
 800081c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800081e:	4b13      	ldr	r3, [pc, #76]	; (800086c <MX_USART2_UART_Init+0x58>)
 8000820:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000824:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000826:	4b11      	ldr	r3, [pc, #68]	; (800086c <MX_USART2_UART_Init+0x58>)
 8000828:	2200      	movs	r2, #0
 800082a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800082c:	4b0f      	ldr	r3, [pc, #60]	; (800086c <MX_USART2_UART_Init+0x58>)
 800082e:	2200      	movs	r2, #0
 8000830:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000832:	4b0e      	ldr	r3, [pc, #56]	; (800086c <MX_USART2_UART_Init+0x58>)
 8000834:	2200      	movs	r2, #0
 8000836:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000838:	4b0c      	ldr	r3, [pc, #48]	; (800086c <MX_USART2_UART_Init+0x58>)
 800083a:	220c      	movs	r2, #12
 800083c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800083e:	4b0b      	ldr	r3, [pc, #44]	; (800086c <MX_USART2_UART_Init+0x58>)
 8000840:	2200      	movs	r2, #0
 8000842:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000844:	4b09      	ldr	r3, [pc, #36]	; (800086c <MX_USART2_UART_Init+0x58>)
 8000846:	2200      	movs	r2, #0
 8000848:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800084a:	4b08      	ldr	r3, [pc, #32]	; (800086c <MX_USART2_UART_Init+0x58>)
 800084c:	2200      	movs	r2, #0
 800084e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000850:	4b06      	ldr	r3, [pc, #24]	; (800086c <MX_USART2_UART_Init+0x58>)
 8000852:	2200      	movs	r2, #0
 8000854:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000856:	4805      	ldr	r0, [pc, #20]	; (800086c <MX_USART2_UART_Init+0x58>)
 8000858:	f002 fab0 	bl	8002dbc <HAL_UART_Init>
 800085c:	4603      	mov	r3, r0
 800085e:	2b00      	cmp	r3, #0
 8000860:	d001      	beq.n	8000866 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000862:	f000 f86f 	bl	8000944 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000866:	bf00      	nop
 8000868:	bd80      	pop	{r7, pc}
 800086a:	bf00      	nop
 800086c:	20000130 	.word	0x20000130
 8000870:	40004400 	.word	0x40004400

08000874 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b08a      	sub	sp, #40	; 0x28
 8000878:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800087a:	f107 0314 	add.w	r3, r7, #20
 800087e:	2200      	movs	r2, #0
 8000880:	601a      	str	r2, [r3, #0]
 8000882:	605a      	str	r2, [r3, #4]
 8000884:	609a      	str	r2, [r3, #8]
 8000886:	60da      	str	r2, [r3, #12]
 8000888:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800088a:	4b2b      	ldr	r3, [pc, #172]	; (8000938 <MX_GPIO_Init+0xc4>)
 800088c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800088e:	4a2a      	ldr	r2, [pc, #168]	; (8000938 <MX_GPIO_Init+0xc4>)
 8000890:	f043 0304 	orr.w	r3, r3, #4
 8000894:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000896:	4b28      	ldr	r3, [pc, #160]	; (8000938 <MX_GPIO_Init+0xc4>)
 8000898:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800089a:	f003 0304 	and.w	r3, r3, #4
 800089e:	613b      	str	r3, [r7, #16]
 80008a0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008a2:	4b25      	ldr	r3, [pc, #148]	; (8000938 <MX_GPIO_Init+0xc4>)
 80008a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008a6:	4a24      	ldr	r2, [pc, #144]	; (8000938 <MX_GPIO_Init+0xc4>)
 80008a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008ac:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008ae:	4b22      	ldr	r3, [pc, #136]	; (8000938 <MX_GPIO_Init+0xc4>)
 80008b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008b6:	60fb      	str	r3, [r7, #12]
 80008b8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008ba:	4b1f      	ldr	r3, [pc, #124]	; (8000938 <MX_GPIO_Init+0xc4>)
 80008bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008be:	4a1e      	ldr	r2, [pc, #120]	; (8000938 <MX_GPIO_Init+0xc4>)
 80008c0:	f043 0301 	orr.w	r3, r3, #1
 80008c4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008c6:	4b1c      	ldr	r3, [pc, #112]	; (8000938 <MX_GPIO_Init+0xc4>)
 80008c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008ca:	f003 0301 	and.w	r3, r3, #1
 80008ce:	60bb      	str	r3, [r7, #8]
 80008d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008d2:	4b19      	ldr	r3, [pc, #100]	; (8000938 <MX_GPIO_Init+0xc4>)
 80008d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008d6:	4a18      	ldr	r2, [pc, #96]	; (8000938 <MX_GPIO_Init+0xc4>)
 80008d8:	f043 0302 	orr.w	r3, r3, #2
 80008dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008de:	4b16      	ldr	r3, [pc, #88]	; (8000938 <MX_GPIO_Init+0xc4>)
 80008e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008e2:	f003 0302 	and.w	r3, r3, #2
 80008e6:	607b      	str	r3, [r7, #4]
 80008e8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, NOTE_ON_OFF_Pin|LD2_Pin, GPIO_PIN_RESET);
 80008ea:	2200      	movs	r2, #0
 80008ec:	2122      	movs	r1, #34	; 0x22
 80008ee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008f2:	f000 ff3f 	bl	8001774 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80008f6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80008fc:	4b0f      	ldr	r3, [pc, #60]	; (800093c <MX_GPIO_Init+0xc8>)
 80008fe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000900:	2300      	movs	r3, #0
 8000902:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000904:	f107 0314 	add.w	r3, r7, #20
 8000908:	4619      	mov	r1, r3
 800090a:	480d      	ldr	r0, [pc, #52]	; (8000940 <MX_GPIO_Init+0xcc>)
 800090c:	f000 fd88 	bl	8001420 <HAL_GPIO_Init>

  /*Configure GPIO pins : NOTE_ON_OFF_Pin LD2_Pin */
  GPIO_InitStruct.Pin = NOTE_ON_OFF_Pin|LD2_Pin;
 8000910:	2322      	movs	r3, #34	; 0x22
 8000912:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000914:	2301      	movs	r3, #1
 8000916:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000918:	2300      	movs	r3, #0
 800091a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800091c:	2300      	movs	r3, #0
 800091e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000920:	f107 0314 	add.w	r3, r7, #20
 8000924:	4619      	mov	r1, r3
 8000926:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800092a:	f000 fd79 	bl	8001420 <HAL_GPIO_Init>

}
 800092e:	bf00      	nop
 8000930:	3728      	adds	r7, #40	; 0x28
 8000932:	46bd      	mov	sp, r7
 8000934:	bd80      	pop	{r7, pc}
 8000936:	bf00      	nop
 8000938:	40021000 	.word	0x40021000
 800093c:	10210000 	.word	0x10210000
 8000940:	48000800 	.word	0x48000800

08000944 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000944:	b480      	push	{r7}
 8000946:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000948:	b672      	cpsid	i
}
 800094a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800094c:	e7fe      	b.n	800094c <Error_Handler+0x8>
	...

08000950 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000950:	b480      	push	{r7}
 8000952:	b083      	sub	sp, #12
 8000954:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000956:	4b0f      	ldr	r3, [pc, #60]	; (8000994 <HAL_MspInit+0x44>)
 8000958:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800095a:	4a0e      	ldr	r2, [pc, #56]	; (8000994 <HAL_MspInit+0x44>)
 800095c:	f043 0301 	orr.w	r3, r3, #1
 8000960:	6613      	str	r3, [r2, #96]	; 0x60
 8000962:	4b0c      	ldr	r3, [pc, #48]	; (8000994 <HAL_MspInit+0x44>)
 8000964:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000966:	f003 0301 	and.w	r3, r3, #1
 800096a:	607b      	str	r3, [r7, #4]
 800096c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800096e:	4b09      	ldr	r3, [pc, #36]	; (8000994 <HAL_MspInit+0x44>)
 8000970:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000972:	4a08      	ldr	r2, [pc, #32]	; (8000994 <HAL_MspInit+0x44>)
 8000974:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000978:	6593      	str	r3, [r2, #88]	; 0x58
 800097a:	4b06      	ldr	r3, [pc, #24]	; (8000994 <HAL_MspInit+0x44>)
 800097c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800097e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000982:	603b      	str	r3, [r7, #0]
 8000984:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000986:	bf00      	nop
 8000988:	370c      	adds	r7, #12
 800098a:	46bd      	mov	sp, r7
 800098c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000990:	4770      	bx	lr
 8000992:	bf00      	nop
 8000994:	40021000 	.word	0x40021000

08000998 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b08a      	sub	sp, #40	; 0x28
 800099c:	af00      	add	r7, sp, #0
 800099e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009a0:	f107 0314 	add.w	r3, r7, #20
 80009a4:	2200      	movs	r2, #0
 80009a6:	601a      	str	r2, [r3, #0]
 80009a8:	605a      	str	r2, [r3, #4]
 80009aa:	609a      	str	r2, [r3, #8]
 80009ac:	60da      	str	r2, [r3, #12]
 80009ae:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	4a15      	ldr	r2, [pc, #84]	; (8000a0c <HAL_DAC_MspInit+0x74>)
 80009b6:	4293      	cmp	r3, r2
 80009b8:	d124      	bne.n	8000a04 <HAL_DAC_MspInit+0x6c>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 80009ba:	4b15      	ldr	r3, [pc, #84]	; (8000a10 <HAL_DAC_MspInit+0x78>)
 80009bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009be:	4a14      	ldr	r2, [pc, #80]	; (8000a10 <HAL_DAC_MspInit+0x78>)
 80009c0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80009c4:	6593      	str	r3, [r2, #88]	; 0x58
 80009c6:	4b12      	ldr	r3, [pc, #72]	; (8000a10 <HAL_DAC_MspInit+0x78>)
 80009c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009ca:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80009ce:	613b      	str	r3, [r7, #16]
 80009d0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009d2:	4b0f      	ldr	r3, [pc, #60]	; (8000a10 <HAL_DAC_MspInit+0x78>)
 80009d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009d6:	4a0e      	ldr	r2, [pc, #56]	; (8000a10 <HAL_DAC_MspInit+0x78>)
 80009d8:	f043 0301 	orr.w	r3, r3, #1
 80009dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009de:	4b0c      	ldr	r3, [pc, #48]	; (8000a10 <HAL_DAC_MspInit+0x78>)
 80009e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009e2:	f003 0301 	and.w	r3, r3, #1
 80009e6:	60fb      	str	r3, [r7, #12]
 80009e8:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80009ea:	2310      	movs	r3, #16
 80009ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80009ee:	2303      	movs	r3, #3
 80009f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f2:	2300      	movs	r3, #0
 80009f4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009f6:	f107 0314 	add.w	r3, r7, #20
 80009fa:	4619      	mov	r1, r3
 80009fc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a00:	f000 fd0e 	bl	8001420 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8000a04:	bf00      	nop
 8000a06:	3728      	adds	r7, #40	; 0x28
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	bd80      	pop	{r7, pc}
 8000a0c:	40007400 	.word	0x40007400
 8000a10:	40021000 	.word	0x40021000

08000a14 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b0ae      	sub	sp, #184	; 0xb8
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a1c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000a20:	2200      	movs	r2, #0
 8000a22:	601a      	str	r2, [r3, #0]
 8000a24:	605a      	str	r2, [r3, #4]
 8000a26:	609a      	str	r2, [r3, #8]
 8000a28:	60da      	str	r2, [r3, #12]
 8000a2a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a2c:	f107 031c 	add.w	r3, r7, #28
 8000a30:	2288      	movs	r2, #136	; 0x88
 8000a32:	2100      	movs	r1, #0
 8000a34:	4618      	mov	r0, r3
 8000a36:	f003 fa53 	bl	8003ee0 <memset>
  if(huart->Instance==USART1)
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	4a4b      	ldr	r2, [pc, #300]	; (8000b6c <HAL_UART_MspInit+0x158>)
 8000a40:	4293      	cmp	r3, r2
 8000a42:	d145      	bne.n	8000ad0 <HAL_UART_MspInit+0xbc>
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000a44:	2301      	movs	r3, #1
 8000a46:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a4c:	f107 031c 	add.w	r3, r7, #28
 8000a50:	4618      	mov	r0, r3
 8000a52:	f001 fcf7 	bl	8002444 <HAL_RCCEx_PeriphCLKConfig>
 8000a56:	4603      	mov	r3, r0
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d001      	beq.n	8000a60 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000a5c:	f7ff ff72 	bl	8000944 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000a60:	4b43      	ldr	r3, [pc, #268]	; (8000b70 <HAL_UART_MspInit+0x15c>)
 8000a62:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a64:	4a42      	ldr	r2, [pc, #264]	; (8000b70 <HAL_UART_MspInit+0x15c>)
 8000a66:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a6a:	6613      	str	r3, [r2, #96]	; 0x60
 8000a6c:	4b40      	ldr	r3, [pc, #256]	; (8000b70 <HAL_UART_MspInit+0x15c>)
 8000a6e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a70:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a74:	61bb      	str	r3, [r7, #24]
 8000a76:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a78:	4b3d      	ldr	r3, [pc, #244]	; (8000b70 <HAL_UART_MspInit+0x15c>)
 8000a7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a7c:	4a3c      	ldr	r2, [pc, #240]	; (8000b70 <HAL_UART_MspInit+0x15c>)
 8000a7e:	f043 0301 	orr.w	r3, r3, #1
 8000a82:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a84:	4b3a      	ldr	r3, [pc, #232]	; (8000b70 <HAL_UART_MspInit+0x15c>)
 8000a86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a88:	f003 0301 	and.w	r3, r3, #1
 8000a8c:	617b      	str	r3, [r7, #20]
 8000a8e:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000a90:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000a94:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a98:	2302      	movs	r3, #2
 8000a9a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000aa4:	2303      	movs	r3, #3
 8000aa6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000aaa:	2307      	movs	r3, #7
 8000aac:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ab0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000ab4:	4619      	mov	r1, r3
 8000ab6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000aba:	f000 fcb1 	bl	8001420 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000abe:	2200      	movs	r2, #0
 8000ac0:	2100      	movs	r1, #0
 8000ac2:	2025      	movs	r0, #37	; 0x25
 8000ac4:	f000 fa6d 	bl	8000fa2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000ac8:	2025      	movs	r0, #37	; 0x25
 8000aca:	f000 fa86 	bl	8000fda <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000ace:	e048      	b.n	8000b62 <HAL_UART_MspInit+0x14e>
  else if(huart->Instance==USART2)
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	4a27      	ldr	r2, [pc, #156]	; (8000b74 <HAL_UART_MspInit+0x160>)
 8000ad6:	4293      	cmp	r3, r2
 8000ad8:	d143      	bne.n	8000b62 <HAL_UART_MspInit+0x14e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000ada:	2302      	movs	r3, #2
 8000adc:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ae2:	f107 031c 	add.w	r3, r7, #28
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	f001 fcac 	bl	8002444 <HAL_RCCEx_PeriphCLKConfig>
 8000aec:	4603      	mov	r3, r0
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d001      	beq.n	8000af6 <HAL_UART_MspInit+0xe2>
      Error_Handler();
 8000af2:	f7ff ff27 	bl	8000944 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000af6:	4b1e      	ldr	r3, [pc, #120]	; (8000b70 <HAL_UART_MspInit+0x15c>)
 8000af8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000afa:	4a1d      	ldr	r2, [pc, #116]	; (8000b70 <HAL_UART_MspInit+0x15c>)
 8000afc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b00:	6593      	str	r3, [r2, #88]	; 0x58
 8000b02:	4b1b      	ldr	r3, [pc, #108]	; (8000b70 <HAL_UART_MspInit+0x15c>)
 8000b04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b0a:	613b      	str	r3, [r7, #16]
 8000b0c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b0e:	4b18      	ldr	r3, [pc, #96]	; (8000b70 <HAL_UART_MspInit+0x15c>)
 8000b10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b12:	4a17      	ldr	r2, [pc, #92]	; (8000b70 <HAL_UART_MspInit+0x15c>)
 8000b14:	f043 0301 	orr.w	r3, r3, #1
 8000b18:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b1a:	4b15      	ldr	r3, [pc, #84]	; (8000b70 <HAL_UART_MspInit+0x15c>)
 8000b1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b1e:	f003 0301 	and.w	r3, r3, #1
 8000b22:	60fb      	str	r3, [r7, #12]
 8000b24:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000b26:	230c      	movs	r3, #12
 8000b28:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b2c:	2302      	movs	r3, #2
 8000b2e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b32:	2300      	movs	r3, #0
 8000b34:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b38:	2303      	movs	r3, #3
 8000b3a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b3e:	2307      	movs	r3, #7
 8000b40:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b44:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000b48:	4619      	mov	r1, r3
 8000b4a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b4e:	f000 fc67 	bl	8001420 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000b52:	2200      	movs	r2, #0
 8000b54:	2100      	movs	r1, #0
 8000b56:	2026      	movs	r0, #38	; 0x26
 8000b58:	f000 fa23 	bl	8000fa2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000b5c:	2026      	movs	r0, #38	; 0x26
 8000b5e:	f000 fa3c 	bl	8000fda <HAL_NVIC_EnableIRQ>
}
 8000b62:	bf00      	nop
 8000b64:	37b8      	adds	r7, #184	; 0xb8
 8000b66:	46bd      	mov	sp, r7
 8000b68:	bd80      	pop	{r7, pc}
 8000b6a:	bf00      	nop
 8000b6c:	40013800 	.word	0x40013800
 8000b70:	40021000 	.word	0x40021000
 8000b74:	40004400 	.word	0x40004400

08000b78 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b7c:	e7fe      	b.n	8000b7c <NMI_Handler+0x4>

08000b7e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b7e:	b480      	push	{r7}
 8000b80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b82:	e7fe      	b.n	8000b82 <HardFault_Handler+0x4>

08000b84 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b84:	b480      	push	{r7}
 8000b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b88:	e7fe      	b.n	8000b88 <MemManage_Handler+0x4>

08000b8a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b8a:	b480      	push	{r7}
 8000b8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b8e:	e7fe      	b.n	8000b8e <BusFault_Handler+0x4>

08000b90 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b90:	b480      	push	{r7}
 8000b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b94:	e7fe      	b.n	8000b94 <UsageFault_Handler+0x4>

08000b96 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b96:	b480      	push	{r7}
 8000b98:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b9a:	bf00      	nop
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba2:	4770      	bx	lr

08000ba4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ba8:	bf00      	nop
 8000baa:	46bd      	mov	sp, r7
 8000bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb0:	4770      	bx	lr

08000bb2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bb2:	b480      	push	{r7}
 8000bb4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bb6:	bf00      	nop
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bbe:	4770      	bx	lr

08000bc0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bc4:	f000 f8ce 	bl	8000d64 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bc8:	bf00      	nop
 8000bca:	bd80      	pop	{r7, pc}

08000bcc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000bd0:	4802      	ldr	r0, [pc, #8]	; (8000bdc <USART1_IRQHandler+0x10>)
 8000bd2:	f002 f985 	bl	8002ee0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000bd6:	bf00      	nop
 8000bd8:	bd80      	pop	{r7, pc}
 8000bda:	bf00      	nop
 8000bdc:	20000098 	.word	0x20000098

08000be0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000be4:	4802      	ldr	r0, [pc, #8]	; (8000bf0 <USART2_IRQHandler+0x10>)
 8000be6:	f002 f97b 	bl	8002ee0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000bea:	bf00      	nop
 8000bec:	bd80      	pop	{r7, pc}
 8000bee:	bf00      	nop
 8000bf0:	20000130 	.word	0x20000130

08000bf4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000bf8:	4b15      	ldr	r3, [pc, #84]	; (8000c50 <SystemInit+0x5c>)
 8000bfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000bfe:	4a14      	ldr	r2, [pc, #80]	; (8000c50 <SystemInit+0x5c>)
 8000c00:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c04:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000c08:	4b12      	ldr	r3, [pc, #72]	; (8000c54 <SystemInit+0x60>)
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	4a11      	ldr	r2, [pc, #68]	; (8000c54 <SystemInit+0x60>)
 8000c0e:	f043 0301 	orr.w	r3, r3, #1
 8000c12:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000c14:	4b0f      	ldr	r3, [pc, #60]	; (8000c54 <SystemInit+0x60>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000c1a:	4b0e      	ldr	r3, [pc, #56]	; (8000c54 <SystemInit+0x60>)
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	4a0d      	ldr	r2, [pc, #52]	; (8000c54 <SystemInit+0x60>)
 8000c20:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000c24:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000c28:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000c2a:	4b0a      	ldr	r3, [pc, #40]	; (8000c54 <SystemInit+0x60>)
 8000c2c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000c30:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000c32:	4b08      	ldr	r3, [pc, #32]	; (8000c54 <SystemInit+0x60>)
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	4a07      	ldr	r2, [pc, #28]	; (8000c54 <SystemInit+0x60>)
 8000c38:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000c3c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000c3e:	4b05      	ldr	r3, [pc, #20]	; (8000c54 <SystemInit+0x60>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	619a      	str	r2, [r3, #24]
}
 8000c44:	bf00      	nop
 8000c46:	46bd      	mov	sp, r7
 8000c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4c:	4770      	bx	lr
 8000c4e:	bf00      	nop
 8000c50:	e000ed00 	.word	0xe000ed00
 8000c54:	40021000 	.word	0x40021000

08000c58 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000c58:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c90 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000c5c:	f7ff ffca 	bl	8000bf4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000c60:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000c62:	e003      	b.n	8000c6c <LoopCopyDataInit>

08000c64 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000c64:	4b0b      	ldr	r3, [pc, #44]	; (8000c94 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000c66:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000c68:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000c6a:	3104      	adds	r1, #4

08000c6c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000c6c:	480a      	ldr	r0, [pc, #40]	; (8000c98 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000c6e:	4b0b      	ldr	r3, [pc, #44]	; (8000c9c <LoopForever+0xe>)
	adds	r2, r0, r1
 8000c70:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000c72:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000c74:	d3f6      	bcc.n	8000c64 <CopyDataInit>
	ldr	r2, =_sbss
 8000c76:	4a0a      	ldr	r2, [pc, #40]	; (8000ca0 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000c78:	e002      	b.n	8000c80 <LoopFillZerobss>

08000c7a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000c7a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000c7c:	f842 3b04 	str.w	r3, [r2], #4

08000c80 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000c80:	4b08      	ldr	r3, [pc, #32]	; (8000ca4 <LoopForever+0x16>)
	cmp	r2, r3
 8000c82:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000c84:	d3f9      	bcc.n	8000c7a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c86:	f003 f907 	bl	8003e98 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000c8a:	f7ff fce7 	bl	800065c <main>

08000c8e <LoopForever>:

LoopForever:
    b LoopForever
 8000c8e:	e7fe      	b.n	8000c8e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000c90:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8000c94:	08003f60 	.word	0x08003f60
	ldr	r0, =_sdata
 8000c98:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000c9c:	20000060 	.word	0x20000060
	ldr	r2, =_sbss
 8000ca0:	20000060 	.word	0x20000060
	ldr	r3, = _ebss
 8000ca4:	200001b8 	.word	0x200001b8

08000ca8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000ca8:	e7fe      	b.n	8000ca8 <ADC1_2_IRQHandler>
	...

08000cac <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b082      	sub	sp, #8
 8000cb0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000cb6:	4b0c      	ldr	r3, [pc, #48]	; (8000ce8 <HAL_Init+0x3c>)
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	4a0b      	ldr	r2, [pc, #44]	; (8000ce8 <HAL_Init+0x3c>)
 8000cbc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000cc0:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cc2:	2003      	movs	r0, #3
 8000cc4:	f000 f962 	bl	8000f8c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000cc8:	2000      	movs	r0, #0
 8000cca:	f000 f80f 	bl	8000cec <HAL_InitTick>
 8000cce:	4603      	mov	r3, r0
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d002      	beq.n	8000cda <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000cd4:	2301      	movs	r3, #1
 8000cd6:	71fb      	strb	r3, [r7, #7]
 8000cd8:	e001      	b.n	8000cde <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000cda:	f7ff fe39 	bl	8000950 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000cde:	79fb      	ldrb	r3, [r7, #7]
}
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	3708      	adds	r7, #8
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	bd80      	pop	{r7, pc}
 8000ce8:	40022000 	.word	0x40022000

08000cec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b084      	sub	sp, #16
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000cf8:	4b17      	ldr	r3, [pc, #92]	; (8000d58 <HAL_InitTick+0x6c>)
 8000cfa:	781b      	ldrb	r3, [r3, #0]
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d023      	beq.n	8000d48 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000d00:	4b16      	ldr	r3, [pc, #88]	; (8000d5c <HAL_InitTick+0x70>)
 8000d02:	681a      	ldr	r2, [r3, #0]
 8000d04:	4b14      	ldr	r3, [pc, #80]	; (8000d58 <HAL_InitTick+0x6c>)
 8000d06:	781b      	ldrb	r3, [r3, #0]
 8000d08:	4619      	mov	r1, r3
 8000d0a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d0e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d12:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d16:	4618      	mov	r0, r3
 8000d18:	f000 f96d 	bl	8000ff6 <HAL_SYSTICK_Config>
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d10f      	bne.n	8000d42 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	2b0f      	cmp	r3, #15
 8000d26:	d809      	bhi.n	8000d3c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d28:	2200      	movs	r2, #0
 8000d2a:	6879      	ldr	r1, [r7, #4]
 8000d2c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000d30:	f000 f937 	bl	8000fa2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000d34:	4a0a      	ldr	r2, [pc, #40]	; (8000d60 <HAL_InitTick+0x74>)
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	6013      	str	r3, [r2, #0]
 8000d3a:	e007      	b.n	8000d4c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000d3c:	2301      	movs	r3, #1
 8000d3e:	73fb      	strb	r3, [r7, #15]
 8000d40:	e004      	b.n	8000d4c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000d42:	2301      	movs	r3, #1
 8000d44:	73fb      	strb	r3, [r7, #15]
 8000d46:	e001      	b.n	8000d4c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000d48:	2301      	movs	r3, #1
 8000d4a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000d4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d4e:	4618      	mov	r0, r3
 8000d50:	3710      	adds	r7, #16
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bd80      	pop	{r7, pc}
 8000d56:	bf00      	nop
 8000d58:	2000005c 	.word	0x2000005c
 8000d5c:	20000054 	.word	0x20000054
 8000d60:	20000058 	.word	0x20000058

08000d64 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d64:	b480      	push	{r7}
 8000d66:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000d68:	4b06      	ldr	r3, [pc, #24]	; (8000d84 <HAL_IncTick+0x20>)
 8000d6a:	781b      	ldrb	r3, [r3, #0]
 8000d6c:	461a      	mov	r2, r3
 8000d6e:	4b06      	ldr	r3, [pc, #24]	; (8000d88 <HAL_IncTick+0x24>)
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	4413      	add	r3, r2
 8000d74:	4a04      	ldr	r2, [pc, #16]	; (8000d88 <HAL_IncTick+0x24>)
 8000d76:	6013      	str	r3, [r2, #0]
}
 8000d78:	bf00      	nop
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d80:	4770      	bx	lr
 8000d82:	bf00      	nop
 8000d84:	2000005c 	.word	0x2000005c
 8000d88:	200001b4 	.word	0x200001b4

08000d8c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	af00      	add	r7, sp, #0
  return uwTick;
 8000d90:	4b03      	ldr	r3, [pc, #12]	; (8000da0 <HAL_GetTick+0x14>)
 8000d92:	681b      	ldr	r3, [r3, #0]
}
 8000d94:	4618      	mov	r0, r3
 8000d96:	46bd      	mov	sp, r7
 8000d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9c:	4770      	bx	lr
 8000d9e:	bf00      	nop
 8000da0:	200001b4 	.word	0x200001b4

08000da4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b084      	sub	sp, #16
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000dac:	f7ff ffee 	bl	8000d8c <HAL_GetTick>
 8000db0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000db6:	68fb      	ldr	r3, [r7, #12]
 8000db8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000dbc:	d005      	beq.n	8000dca <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000dbe:	4b0a      	ldr	r3, [pc, #40]	; (8000de8 <HAL_Delay+0x44>)
 8000dc0:	781b      	ldrb	r3, [r3, #0]
 8000dc2:	461a      	mov	r2, r3
 8000dc4:	68fb      	ldr	r3, [r7, #12]
 8000dc6:	4413      	add	r3, r2
 8000dc8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000dca:	bf00      	nop
 8000dcc:	f7ff ffde 	bl	8000d8c <HAL_GetTick>
 8000dd0:	4602      	mov	r2, r0
 8000dd2:	68bb      	ldr	r3, [r7, #8]
 8000dd4:	1ad3      	subs	r3, r2, r3
 8000dd6:	68fa      	ldr	r2, [r7, #12]
 8000dd8:	429a      	cmp	r2, r3
 8000dda:	d8f7      	bhi.n	8000dcc <HAL_Delay+0x28>
  {
  }
}
 8000ddc:	bf00      	nop
 8000dde:	bf00      	nop
 8000de0:	3710      	adds	r7, #16
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bd80      	pop	{r7, pc}
 8000de6:	bf00      	nop
 8000de8:	2000005c 	.word	0x2000005c

08000dec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dec:	b480      	push	{r7}
 8000dee:	b085      	sub	sp, #20
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	f003 0307 	and.w	r3, r3, #7
 8000dfa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000dfc:	4b0c      	ldr	r3, [pc, #48]	; (8000e30 <__NVIC_SetPriorityGrouping+0x44>)
 8000dfe:	68db      	ldr	r3, [r3, #12]
 8000e00:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e02:	68ba      	ldr	r2, [r7, #8]
 8000e04:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e08:	4013      	ands	r3, r2
 8000e0a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e0c:	68fb      	ldr	r3, [r7, #12]
 8000e0e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e10:	68bb      	ldr	r3, [r7, #8]
 8000e12:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e14:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e1c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e1e:	4a04      	ldr	r2, [pc, #16]	; (8000e30 <__NVIC_SetPriorityGrouping+0x44>)
 8000e20:	68bb      	ldr	r3, [r7, #8]
 8000e22:	60d3      	str	r3, [r2, #12]
}
 8000e24:	bf00      	nop
 8000e26:	3714      	adds	r7, #20
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2e:	4770      	bx	lr
 8000e30:	e000ed00 	.word	0xe000ed00

08000e34 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e34:	b480      	push	{r7}
 8000e36:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e38:	4b04      	ldr	r3, [pc, #16]	; (8000e4c <__NVIC_GetPriorityGrouping+0x18>)
 8000e3a:	68db      	ldr	r3, [r3, #12]
 8000e3c:	0a1b      	lsrs	r3, r3, #8
 8000e3e:	f003 0307 	and.w	r3, r3, #7
}
 8000e42:	4618      	mov	r0, r3
 8000e44:	46bd      	mov	sp, r7
 8000e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4a:	4770      	bx	lr
 8000e4c:	e000ed00 	.word	0xe000ed00

08000e50 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e50:	b480      	push	{r7}
 8000e52:	b083      	sub	sp, #12
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	4603      	mov	r3, r0
 8000e58:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	db0b      	blt.n	8000e7a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e62:	79fb      	ldrb	r3, [r7, #7]
 8000e64:	f003 021f 	and.w	r2, r3, #31
 8000e68:	4907      	ldr	r1, [pc, #28]	; (8000e88 <__NVIC_EnableIRQ+0x38>)
 8000e6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e6e:	095b      	lsrs	r3, r3, #5
 8000e70:	2001      	movs	r0, #1
 8000e72:	fa00 f202 	lsl.w	r2, r0, r2
 8000e76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000e7a:	bf00      	nop
 8000e7c:	370c      	adds	r7, #12
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e84:	4770      	bx	lr
 8000e86:	bf00      	nop
 8000e88:	e000e100 	.word	0xe000e100

08000e8c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	b083      	sub	sp, #12
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	4603      	mov	r3, r0
 8000e94:	6039      	str	r1, [r7, #0]
 8000e96:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	db0a      	blt.n	8000eb6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ea0:	683b      	ldr	r3, [r7, #0]
 8000ea2:	b2da      	uxtb	r2, r3
 8000ea4:	490c      	ldr	r1, [pc, #48]	; (8000ed8 <__NVIC_SetPriority+0x4c>)
 8000ea6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eaa:	0112      	lsls	r2, r2, #4
 8000eac:	b2d2      	uxtb	r2, r2
 8000eae:	440b      	add	r3, r1
 8000eb0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000eb4:	e00a      	b.n	8000ecc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000eb6:	683b      	ldr	r3, [r7, #0]
 8000eb8:	b2da      	uxtb	r2, r3
 8000eba:	4908      	ldr	r1, [pc, #32]	; (8000edc <__NVIC_SetPriority+0x50>)
 8000ebc:	79fb      	ldrb	r3, [r7, #7]
 8000ebe:	f003 030f 	and.w	r3, r3, #15
 8000ec2:	3b04      	subs	r3, #4
 8000ec4:	0112      	lsls	r2, r2, #4
 8000ec6:	b2d2      	uxtb	r2, r2
 8000ec8:	440b      	add	r3, r1
 8000eca:	761a      	strb	r2, [r3, #24]
}
 8000ecc:	bf00      	nop
 8000ece:	370c      	adds	r7, #12
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed6:	4770      	bx	lr
 8000ed8:	e000e100 	.word	0xe000e100
 8000edc:	e000ed00 	.word	0xe000ed00

08000ee0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	b089      	sub	sp, #36	; 0x24
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	60f8      	str	r0, [r7, #12]
 8000ee8:	60b9      	str	r1, [r7, #8]
 8000eea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000eec:	68fb      	ldr	r3, [r7, #12]
 8000eee:	f003 0307 	and.w	r3, r3, #7
 8000ef2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ef4:	69fb      	ldr	r3, [r7, #28]
 8000ef6:	f1c3 0307 	rsb	r3, r3, #7
 8000efa:	2b04      	cmp	r3, #4
 8000efc:	bf28      	it	cs
 8000efe:	2304      	movcs	r3, #4
 8000f00:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f02:	69fb      	ldr	r3, [r7, #28]
 8000f04:	3304      	adds	r3, #4
 8000f06:	2b06      	cmp	r3, #6
 8000f08:	d902      	bls.n	8000f10 <NVIC_EncodePriority+0x30>
 8000f0a:	69fb      	ldr	r3, [r7, #28]
 8000f0c:	3b03      	subs	r3, #3
 8000f0e:	e000      	b.n	8000f12 <NVIC_EncodePriority+0x32>
 8000f10:	2300      	movs	r3, #0
 8000f12:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f14:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000f18:	69bb      	ldr	r3, [r7, #24]
 8000f1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f1e:	43da      	mvns	r2, r3
 8000f20:	68bb      	ldr	r3, [r7, #8]
 8000f22:	401a      	ands	r2, r3
 8000f24:	697b      	ldr	r3, [r7, #20]
 8000f26:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f28:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000f2c:	697b      	ldr	r3, [r7, #20]
 8000f2e:	fa01 f303 	lsl.w	r3, r1, r3
 8000f32:	43d9      	mvns	r1, r3
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f38:	4313      	orrs	r3, r2
         );
}
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	3724      	adds	r7, #36	; 0x24
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f44:	4770      	bx	lr
	...

08000f48 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b082      	sub	sp, #8
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	3b01      	subs	r3, #1
 8000f54:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f58:	d301      	bcc.n	8000f5e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f5a:	2301      	movs	r3, #1
 8000f5c:	e00f      	b.n	8000f7e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f5e:	4a0a      	ldr	r2, [pc, #40]	; (8000f88 <SysTick_Config+0x40>)
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	3b01      	subs	r3, #1
 8000f64:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f66:	210f      	movs	r1, #15
 8000f68:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000f6c:	f7ff ff8e 	bl	8000e8c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f70:	4b05      	ldr	r3, [pc, #20]	; (8000f88 <SysTick_Config+0x40>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f76:	4b04      	ldr	r3, [pc, #16]	; (8000f88 <SysTick_Config+0x40>)
 8000f78:	2207      	movs	r2, #7
 8000f7a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f7c:	2300      	movs	r3, #0
}
 8000f7e:	4618      	mov	r0, r3
 8000f80:	3708      	adds	r7, #8
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bd80      	pop	{r7, pc}
 8000f86:	bf00      	nop
 8000f88:	e000e010 	.word	0xe000e010

08000f8c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b082      	sub	sp, #8
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f94:	6878      	ldr	r0, [r7, #4]
 8000f96:	f7ff ff29 	bl	8000dec <__NVIC_SetPriorityGrouping>
}
 8000f9a:	bf00      	nop
 8000f9c:	3708      	adds	r7, #8
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bd80      	pop	{r7, pc}

08000fa2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fa2:	b580      	push	{r7, lr}
 8000fa4:	b086      	sub	sp, #24
 8000fa6:	af00      	add	r7, sp, #0
 8000fa8:	4603      	mov	r3, r0
 8000faa:	60b9      	str	r1, [r7, #8]
 8000fac:	607a      	str	r2, [r7, #4]
 8000fae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000fb4:	f7ff ff3e 	bl	8000e34 <__NVIC_GetPriorityGrouping>
 8000fb8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000fba:	687a      	ldr	r2, [r7, #4]
 8000fbc:	68b9      	ldr	r1, [r7, #8]
 8000fbe:	6978      	ldr	r0, [r7, #20]
 8000fc0:	f7ff ff8e 	bl	8000ee0 <NVIC_EncodePriority>
 8000fc4:	4602      	mov	r2, r0
 8000fc6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fca:	4611      	mov	r1, r2
 8000fcc:	4618      	mov	r0, r3
 8000fce:	f7ff ff5d 	bl	8000e8c <__NVIC_SetPriority>
}
 8000fd2:	bf00      	nop
 8000fd4:	3718      	adds	r7, #24
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bd80      	pop	{r7, pc}

08000fda <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fda:	b580      	push	{r7, lr}
 8000fdc:	b082      	sub	sp, #8
 8000fde:	af00      	add	r7, sp, #0
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000fe4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fe8:	4618      	mov	r0, r3
 8000fea:	f7ff ff31 	bl	8000e50 <__NVIC_EnableIRQ>
}
 8000fee:	bf00      	nop
 8000ff0:	3708      	adds	r7, #8
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bd80      	pop	{r7, pc}

08000ff6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ff6:	b580      	push	{r7, lr}
 8000ff8:	b082      	sub	sp, #8
 8000ffa:	af00      	add	r7, sp, #0
 8000ffc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ffe:	6878      	ldr	r0, [r7, #4]
 8001000:	f7ff ffa2 	bl	8000f48 <SysTick_Config>
 8001004:	4603      	mov	r3, r0
}
 8001006:	4618      	mov	r0, r3
 8001008:	3708      	adds	r7, #8
 800100a:	46bd      	mov	sp, r7
 800100c:	bd80      	pop	{r7, pc}

0800100e <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 800100e:	b580      	push	{r7, lr}
 8001010:	b082      	sub	sp, #8
 8001012:	af00      	add	r7, sp, #0
 8001014:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	2b00      	cmp	r3, #0
 800101a:	d101      	bne.n	8001020 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 800101c:	2301      	movs	r3, #1
 800101e:	e014      	b.n	800104a <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	791b      	ldrb	r3, [r3, #4]
 8001024:	b2db      	uxtb	r3, r3
 8001026:	2b00      	cmp	r3, #0
 8001028:	d105      	bne.n	8001036 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	2200      	movs	r2, #0
 800102e:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8001030:	6878      	ldr	r0, [r7, #4]
 8001032:	f7ff fcb1 	bl	8000998 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	2202      	movs	r2, #2
 800103a:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	2200      	movs	r2, #0
 8001040:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	2201      	movs	r2, #1
 8001046:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8001048:	2300      	movs	r3, #0
}
 800104a:	4618      	mov	r0, r3
 800104c:	3708      	adds	r7, #8
 800104e:	46bd      	mov	sp, r7
 8001050:	bd80      	pop	{r7, pc}

08001052 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (when supported)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8001052:	b480      	push	{r7}
 8001054:	b083      	sub	sp, #12
 8001056:	af00      	add	r7, sp, #0
 8001058:	6078      	str	r0, [r7, #4]
 800105a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	795b      	ldrb	r3, [r3, #5]
 8001060:	2b01      	cmp	r3, #1
 8001062:	d101      	bne.n	8001068 <HAL_DAC_Start+0x16>
 8001064:	2302      	movs	r3, #2
 8001066:	e03b      	b.n	80010e0 <HAL_DAC_Start+0x8e>
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	2201      	movs	r2, #1
 800106c:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	2202      	movs	r2, #2
 8001072:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	6819      	ldr	r1, [r3, #0]
 800107a:	683b      	ldr	r3, [r7, #0]
 800107c:	f003 0310 	and.w	r3, r3, #16
 8001080:	2201      	movs	r2, #1
 8001082:	409a      	lsls	r2, r3
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	430a      	orrs	r2, r1
 800108a:	601a      	str	r2, [r3, #0]

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx                                     */

#if defined (STM32L431xx) || defined (STM32L432xx) || defined (STM32L433xx) || defined (STM32L442xx) || defined (STM32L443xx) || \
    defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || defined (STM32L496xx) || defined (STM32L4A6xx)
  if(Channel == DAC_CHANNEL_1)
 800108c:	683b      	ldr	r3, [r7, #0]
 800108e:	2b00      	cmp	r3, #0
 8001090:	d10f      	bne.n	80010b2 <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_CR_TEN1)
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 800109c:	2b04      	cmp	r3, #4
 800109e:	d118      	bne.n	80010d2 <HAL_DAC_Start+0x80>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	685a      	ldr	r2, [r3, #4]
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	f042 0201 	orr.w	r2, r2, #1
 80010ae:	605a      	str	r2, [r3, #4]
 80010b0:	e00f      	b.n	80010d2 <HAL_DAC_Start+0x80>
    }
  }
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == DAC_CR_TEN2)
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80010bc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80010c0:	d107      	bne.n	80010d2 <HAL_DAC_Start+0x80>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	685a      	ldr	r2, [r3, #4]
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	f042 0202 	orr.w	r2, r2, #2
 80010d0:	605a      	str	r2, [r3, #4]
    /* Enable the selected DAC software conversion */
    SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
  }
#endif /* STM32L451xx STM32L452xx STM32L462xx */
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	2201      	movs	r2, #1
 80010d6:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	2200      	movs	r2, #0
 80010dc:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80010de:	2300      	movs	r3, #0
}
 80010e0:	4618      	mov	r0, r3
 80010e2:	370c      	adds	r7, #12
 80010e4:	46bd      	mov	sp, r7
 80010e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ea:	4770      	bx	lr

080010ec <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b088      	sub	sp, #32
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	60f8      	str	r0, [r7, #12]
 80010f4:	60b9      	str	r1, [r7, #8]
 80010f6:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 80010f8:	2300      	movs	r3, #0
 80010fa:	61fb      	str	r3, [r7, #28]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	795b      	ldrb	r3, [r3, #5]
 8001100:	2b01      	cmp	r3, #1
 8001102:	d101      	bne.n	8001108 <HAL_DAC_ConfigChannel+0x1c>
 8001104:	2302      	movs	r3, #2
 8001106:	e107      	b.n	8001318 <HAL_DAC_ConfigChannel+0x22c>
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	2201      	movs	r2, #1
 800110c:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800110e:	68fb      	ldr	r3, [r7, #12]
 8001110:	2202      	movs	r2, #2
 8001112:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8001114:	68bb      	ldr	r3, [r7, #8]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	2b04      	cmp	r3, #4
 800111a:	d174      	bne.n	8001206 <HAL_DAC_ConfigChannel+0x11a>
  /* Sample on old configuration */
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 800111c:	f7ff fe36 	bl	8000d8c <HAL_GetTick>
 8001120:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	2b00      	cmp	r3, #0
 8001126:	d134      	bne.n	8001192 <HAL_DAC_ConfigChannel+0xa6>
    {

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8001128:	e011      	b.n	800114e <HAL_DAC_ConfigChannel+0x62>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800112a:	f7ff fe2f 	bl	8000d8c <HAL_GetTick>
 800112e:	4602      	mov	r2, r0
 8001130:	69fb      	ldr	r3, [r7, #28]
 8001132:	1ad3      	subs	r3, r2, r3
 8001134:	2b01      	cmp	r3, #1
 8001136:	d90a      	bls.n	800114e <HAL_DAC_ConfigChannel+0x62>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	691b      	ldr	r3, [r3, #16]
 800113c:	f043 0208 	orr.w	r2, r3, #8
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	2203      	movs	r2, #3
 8001148:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 800114a:	2303      	movs	r3, #3
 800114c:	e0e4      	b.n	8001318 <HAL_DAC_ConfigChannel+0x22c>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800114e:	68fb      	ldr	r3, [r7, #12]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001154:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001158:	2b00      	cmp	r3, #0
 800115a:	d1e6      	bne.n	800112a <HAL_DAC_ConfigChannel+0x3e>
        }
      }
      HAL_Delay(1);
 800115c:	2001      	movs	r0, #1
 800115e:	f7ff fe21 	bl	8000da4 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8001162:	68fb      	ldr	r3, [r7, #12]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	68ba      	ldr	r2, [r7, #8]
 8001168:	6992      	ldr	r2, [r2, #24]
 800116a:	641a      	str	r2, [r3, #64]	; 0x40
 800116c:	e01e      	b.n	80011ac <HAL_DAC_ConfigChannel+0xc0>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800116e:	f7ff fe0d 	bl	8000d8c <HAL_GetTick>
 8001172:	4602      	mov	r2, r0
 8001174:	69fb      	ldr	r3, [r7, #28]
 8001176:	1ad3      	subs	r3, r2, r3
 8001178:	2b01      	cmp	r3, #1
 800117a:	d90a      	bls.n	8001192 <HAL_DAC_ConfigChannel+0xa6>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	691b      	ldr	r3, [r3, #16]
 8001180:	f043 0208 	orr.w	r2, r3, #8
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	2203      	movs	r2, #3
 800118c:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 800118e:	2303      	movs	r3, #3
 8001190:	e0c2      	b.n	8001318 <HAL_DAC_ConfigChannel+0x22c>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8001192:	68fb      	ldr	r3, [r7, #12]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001198:	2b00      	cmp	r3, #0
 800119a:	dbe8      	blt.n	800116e <HAL_DAC_ConfigChannel+0x82>
        }
      }
      HAL_Delay(1U);
 800119c:	2001      	movs	r0, #1
 800119e:	f7ff fe01 	bl	8000da4 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80011a2:	68fb      	ldr	r3, [r7, #12]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	68ba      	ldr	r2, [r7, #8]
 80011a8:	6992      	ldr	r2, [r2, #24]
 80011aa:	645a      	str	r2, [r3, #68]	; 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	f003 0310 	and.w	r3, r3, #16
 80011b8:	f240 31ff 	movw	r1, #1023	; 0x3ff
 80011bc:	fa01 f303 	lsl.w	r3, r1, r3
 80011c0:	43db      	mvns	r3, r3
 80011c2:	ea02 0103 	and.w	r1, r2, r3
 80011c6:	68bb      	ldr	r3, [r7, #8]
 80011c8:	69da      	ldr	r2, [r3, #28]
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	f003 0310 	and.w	r3, r3, #16
 80011d0:	409a      	lsls	r2, r3
 80011d2:	68fb      	ldr	r3, [r7, #12]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	430a      	orrs	r2, r1
 80011d8:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 80011da:	68fb      	ldr	r3, [r7, #12]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	f003 0310 	and.w	r3, r3, #16
 80011e6:	21ff      	movs	r1, #255	; 0xff
 80011e8:	fa01 f303 	lsl.w	r3, r1, r3
 80011ec:	43db      	mvns	r3, r3
 80011ee:	ea02 0103 	and.w	r1, r2, r3
 80011f2:	68bb      	ldr	r3, [r7, #8]
 80011f4:	6a1a      	ldr	r2, [r3, #32]
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	f003 0310 	and.w	r3, r3, #16
 80011fc:	409a      	lsls	r2, r3
 80011fe:	68fb      	ldr	r3, [r7, #12]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	430a      	orrs	r2, r1
 8001204:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8001206:	68bb      	ldr	r3, [r7, #8]
 8001208:	691b      	ldr	r3, [r3, #16]
 800120a:	2b01      	cmp	r3, #1
 800120c:	d11d      	bne.n	800124a <HAL_DAC_ConfigChannel+0x15e>
  /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001214:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	f003 0310 	and.w	r3, r3, #16
 800121c:	221f      	movs	r2, #31
 800121e:	fa02 f303 	lsl.w	r3, r2, r3
 8001222:	43db      	mvns	r3, r3
 8001224:	69ba      	ldr	r2, [r7, #24]
 8001226:	4013      	ands	r3, r2
 8001228:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 800122a:	68bb      	ldr	r3, [r7, #8]
 800122c:	695b      	ldr	r3, [r3, #20]
 800122e:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	f003 0310 	and.w	r3, r3, #16
 8001236:	697a      	ldr	r2, [r7, #20]
 8001238:	fa02 f303 	lsl.w	r3, r2, r3
 800123c:	69ba      	ldr	r2, [r7, #24]
 800123e:	4313      	orrs	r3, r2
 8001240:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	69ba      	ldr	r2, [r7, #24]
 8001248:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001250:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	f003 0310 	and.w	r3, r3, #16
 8001258:	2207      	movs	r2, #7
 800125a:	fa02 f303 	lsl.w	r3, r2, r3
 800125e:	43db      	mvns	r3, r3
 8001260:	69ba      	ldr	r2, [r7, #24]
 8001262:	4013      	ands	r3, r2
 8001264:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 8001266:	68bb      	ldr	r3, [r7, #8]
 8001268:	681a      	ldr	r2, [r3, #0]
 800126a:	68bb      	ldr	r3, [r7, #8]
 800126c:	689b      	ldr	r3, [r3, #8]
 800126e:	431a      	orrs	r2, r3
 8001270:	68bb      	ldr	r3, [r7, #8]
 8001272:	68db      	ldr	r3, [r3, #12]
 8001274:	4313      	orrs	r3, r2
 8001276:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	f003 0310 	and.w	r3, r3, #16
 800127e:	697a      	ldr	r2, [r7, #20]
 8001280:	fa02 f303 	lsl.w	r3, r2, r3
 8001284:	69ba      	ldr	r2, [r7, #24]
 8001286:	4313      	orrs	r3, r2
 8001288:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 800128a:	68fb      	ldr	r3, [r7, #12]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	69ba      	ldr	r2, [r7, #24]
 8001290:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	6819      	ldr	r1, [r3, #0]
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	f003 0310 	and.w	r3, r3, #16
 800129e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80012a2:	fa02 f303 	lsl.w	r3, r2, r3
 80012a6:	43da      	mvns	r2, r3
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	400a      	ands	r2, r1
 80012ae:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	f003 0310 	and.w	r3, r3, #16
 80012be:	f640 72fc 	movw	r2, #4092	; 0xffc
 80012c2:	fa02 f303 	lsl.w	r3, r2, r3
 80012c6:	43db      	mvns	r3, r3
 80012c8:	69ba      	ldr	r2, [r7, #24]
 80012ca:	4013      	ands	r3, r2
 80012cc:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 80012ce:	68bb      	ldr	r3, [r7, #8]
 80012d0:	685b      	ldr	r3, [r3, #4]
 80012d2:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	f003 0310 	and.w	r3, r3, #16
 80012da:	697a      	ldr	r2, [r7, #20]
 80012dc:	fa02 f303 	lsl.w	r3, r2, r3
 80012e0:	69ba      	ldr	r2, [r7, #24]
 80012e2:	4313      	orrs	r3, r2
 80012e4:	61bb      	str	r3, [r7, #24]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	69ba      	ldr	r2, [r7, #24]
 80012ec:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	6819      	ldr	r1, [r3, #0]
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	f003 0310 	and.w	r3, r3, #16
 80012fa:	22c0      	movs	r2, #192	; 0xc0
 80012fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001300:	43da      	mvns	r2, r3
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	400a      	ands	r2, r1
 8001308:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	2201      	movs	r2, #1
 800130e:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	2200      	movs	r2, #0
 8001314:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001316:	2300      	movs	r3, #0
}
 8001318:	4618      	mov	r0, r3
 800131a:	3720      	adds	r7, #32
 800131c:	46bd      	mov	sp, r7
 800131e:	bd80      	pop	{r7, pc}

08001320 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001320:	b480      	push	{r7}
 8001322:	b085      	sub	sp, #20
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001328:	2300      	movs	r3, #0
 800132a:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001332:	b2db      	uxtb	r3, r3
 8001334:	2b02      	cmp	r3, #2
 8001336:	d008      	beq.n	800134a <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	2204      	movs	r2, #4
 800133c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	2200      	movs	r2, #0
 8001342:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001346:	2301      	movs	r3, #1
 8001348:	e022      	b.n	8001390 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	681a      	ldr	r2, [r3, #0]
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	f022 020e 	bic.w	r2, r2, #14
 8001358:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	681a      	ldr	r2, [r3, #0]
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	f022 0201 	bic.w	r2, r2, #1
 8001368:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800136e:	f003 021c 	and.w	r2, r3, #28
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001376:	2101      	movs	r1, #1
 8001378:	fa01 f202 	lsl.w	r2, r1, r2
 800137c:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	2201      	movs	r2, #1
 8001382:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	2200      	movs	r2, #0
 800138a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 800138e:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8001390:	4618      	mov	r0, r3
 8001392:	3714      	adds	r7, #20
 8001394:	46bd      	mov	sp, r7
 8001396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139a:	4770      	bx	lr

0800139c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b084      	sub	sp, #16
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80013a4:	2300      	movs	r3, #0
 80013a6:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80013ae:	b2db      	uxtb	r3, r3
 80013b0:	2b02      	cmp	r3, #2
 80013b2:	d005      	beq.n	80013c0 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	2204      	movs	r2, #4
 80013b8:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80013ba:	2301      	movs	r3, #1
 80013bc:	73fb      	strb	r3, [r7, #15]
 80013be:	e029      	b.n	8001414 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	681a      	ldr	r2, [r3, #0]
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	f022 020e 	bic.w	r2, r2, #14
 80013ce:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	681a      	ldr	r2, [r3, #0]
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	f022 0201 	bic.w	r2, r2, #1
 80013de:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013e4:	f003 021c 	and.w	r2, r3, #28
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ec:	2101      	movs	r1, #1
 80013ee:	fa01 f202 	lsl.w	r2, r1, r2
 80013f2:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	2201      	movs	r2, #1
 80013f8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	2200      	movs	r2, #0
 8001400:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001408:	2b00      	cmp	r3, #0
 800140a:	d003      	beq.n	8001414 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001410:	6878      	ldr	r0, [r7, #4]
 8001412:	4798      	blx	r3
    }
  }
  return status;
 8001414:	7bfb      	ldrb	r3, [r7, #15]
}
 8001416:	4618      	mov	r0, r3
 8001418:	3710      	adds	r7, #16
 800141a:	46bd      	mov	sp, r7
 800141c:	bd80      	pop	{r7, pc}
	...

08001420 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001420:	b480      	push	{r7}
 8001422:	b087      	sub	sp, #28
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
 8001428:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800142a:	2300      	movs	r3, #0
 800142c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800142e:	e17f      	b.n	8001730 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001430:	683b      	ldr	r3, [r7, #0]
 8001432:	681a      	ldr	r2, [r3, #0]
 8001434:	2101      	movs	r1, #1
 8001436:	697b      	ldr	r3, [r7, #20]
 8001438:	fa01 f303 	lsl.w	r3, r1, r3
 800143c:	4013      	ands	r3, r2
 800143e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	2b00      	cmp	r3, #0
 8001444:	f000 8171 	beq.w	800172a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001448:	683b      	ldr	r3, [r7, #0]
 800144a:	685b      	ldr	r3, [r3, #4]
 800144c:	2b01      	cmp	r3, #1
 800144e:	d00b      	beq.n	8001468 <HAL_GPIO_Init+0x48>
 8001450:	683b      	ldr	r3, [r7, #0]
 8001452:	685b      	ldr	r3, [r3, #4]
 8001454:	2b02      	cmp	r3, #2
 8001456:	d007      	beq.n	8001468 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001458:	683b      	ldr	r3, [r7, #0]
 800145a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800145c:	2b11      	cmp	r3, #17
 800145e:	d003      	beq.n	8001468 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001460:	683b      	ldr	r3, [r7, #0]
 8001462:	685b      	ldr	r3, [r3, #4]
 8001464:	2b12      	cmp	r3, #18
 8001466:	d130      	bne.n	80014ca <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	689b      	ldr	r3, [r3, #8]
 800146c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800146e:	697b      	ldr	r3, [r7, #20]
 8001470:	005b      	lsls	r3, r3, #1
 8001472:	2203      	movs	r2, #3
 8001474:	fa02 f303 	lsl.w	r3, r2, r3
 8001478:	43db      	mvns	r3, r3
 800147a:	693a      	ldr	r2, [r7, #16]
 800147c:	4013      	ands	r3, r2
 800147e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001480:	683b      	ldr	r3, [r7, #0]
 8001482:	68da      	ldr	r2, [r3, #12]
 8001484:	697b      	ldr	r3, [r7, #20]
 8001486:	005b      	lsls	r3, r3, #1
 8001488:	fa02 f303 	lsl.w	r3, r2, r3
 800148c:	693a      	ldr	r2, [r7, #16]
 800148e:	4313      	orrs	r3, r2
 8001490:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	693a      	ldr	r2, [r7, #16]
 8001496:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	685b      	ldr	r3, [r3, #4]
 800149c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800149e:	2201      	movs	r2, #1
 80014a0:	697b      	ldr	r3, [r7, #20]
 80014a2:	fa02 f303 	lsl.w	r3, r2, r3
 80014a6:	43db      	mvns	r3, r3
 80014a8:	693a      	ldr	r2, [r7, #16]
 80014aa:	4013      	ands	r3, r2
 80014ac:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80014ae:	683b      	ldr	r3, [r7, #0]
 80014b0:	685b      	ldr	r3, [r3, #4]
 80014b2:	091b      	lsrs	r3, r3, #4
 80014b4:	f003 0201 	and.w	r2, r3, #1
 80014b8:	697b      	ldr	r3, [r7, #20]
 80014ba:	fa02 f303 	lsl.w	r3, r2, r3
 80014be:	693a      	ldr	r2, [r7, #16]
 80014c0:	4313      	orrs	r3, r2
 80014c2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	693a      	ldr	r2, [r7, #16]
 80014c8:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80014ca:	683b      	ldr	r3, [r7, #0]
 80014cc:	685b      	ldr	r3, [r3, #4]
 80014ce:	f003 0303 	and.w	r3, r3, #3
 80014d2:	2b03      	cmp	r3, #3
 80014d4:	d118      	bne.n	8001508 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014da:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80014dc:	2201      	movs	r2, #1
 80014de:	697b      	ldr	r3, [r7, #20]
 80014e0:	fa02 f303 	lsl.w	r3, r2, r3
 80014e4:	43db      	mvns	r3, r3
 80014e6:	693a      	ldr	r2, [r7, #16]
 80014e8:	4013      	ands	r3, r2
 80014ea:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 80014ec:	683b      	ldr	r3, [r7, #0]
 80014ee:	685b      	ldr	r3, [r3, #4]
 80014f0:	08db      	lsrs	r3, r3, #3
 80014f2:	f003 0201 	and.w	r2, r3, #1
 80014f6:	697b      	ldr	r3, [r7, #20]
 80014f8:	fa02 f303 	lsl.w	r3, r2, r3
 80014fc:	693a      	ldr	r2, [r7, #16]
 80014fe:	4313      	orrs	r3, r2
 8001500:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	693a      	ldr	r2, [r7, #16]
 8001506:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	68db      	ldr	r3, [r3, #12]
 800150c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800150e:	697b      	ldr	r3, [r7, #20]
 8001510:	005b      	lsls	r3, r3, #1
 8001512:	2203      	movs	r2, #3
 8001514:	fa02 f303 	lsl.w	r3, r2, r3
 8001518:	43db      	mvns	r3, r3
 800151a:	693a      	ldr	r2, [r7, #16]
 800151c:	4013      	ands	r3, r2
 800151e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001520:	683b      	ldr	r3, [r7, #0]
 8001522:	689a      	ldr	r2, [r3, #8]
 8001524:	697b      	ldr	r3, [r7, #20]
 8001526:	005b      	lsls	r3, r3, #1
 8001528:	fa02 f303 	lsl.w	r3, r2, r3
 800152c:	693a      	ldr	r2, [r7, #16]
 800152e:	4313      	orrs	r3, r2
 8001530:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	693a      	ldr	r2, [r7, #16]
 8001536:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001538:	683b      	ldr	r3, [r7, #0]
 800153a:	685b      	ldr	r3, [r3, #4]
 800153c:	2b02      	cmp	r3, #2
 800153e:	d003      	beq.n	8001548 <HAL_GPIO_Init+0x128>
 8001540:	683b      	ldr	r3, [r7, #0]
 8001542:	685b      	ldr	r3, [r3, #4]
 8001544:	2b12      	cmp	r3, #18
 8001546:	d123      	bne.n	8001590 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001548:	697b      	ldr	r3, [r7, #20]
 800154a:	08da      	lsrs	r2, r3, #3
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	3208      	adds	r2, #8
 8001550:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001554:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001556:	697b      	ldr	r3, [r7, #20]
 8001558:	f003 0307 	and.w	r3, r3, #7
 800155c:	009b      	lsls	r3, r3, #2
 800155e:	220f      	movs	r2, #15
 8001560:	fa02 f303 	lsl.w	r3, r2, r3
 8001564:	43db      	mvns	r3, r3
 8001566:	693a      	ldr	r2, [r7, #16]
 8001568:	4013      	ands	r3, r2
 800156a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800156c:	683b      	ldr	r3, [r7, #0]
 800156e:	691a      	ldr	r2, [r3, #16]
 8001570:	697b      	ldr	r3, [r7, #20]
 8001572:	f003 0307 	and.w	r3, r3, #7
 8001576:	009b      	lsls	r3, r3, #2
 8001578:	fa02 f303 	lsl.w	r3, r2, r3
 800157c:	693a      	ldr	r2, [r7, #16]
 800157e:	4313      	orrs	r3, r2
 8001580:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001582:	697b      	ldr	r3, [r7, #20]
 8001584:	08da      	lsrs	r2, r3, #3
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	3208      	adds	r2, #8
 800158a:	6939      	ldr	r1, [r7, #16]
 800158c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001596:	697b      	ldr	r3, [r7, #20]
 8001598:	005b      	lsls	r3, r3, #1
 800159a:	2203      	movs	r2, #3
 800159c:	fa02 f303 	lsl.w	r3, r2, r3
 80015a0:	43db      	mvns	r3, r3
 80015a2:	693a      	ldr	r2, [r7, #16]
 80015a4:	4013      	ands	r3, r2
 80015a6:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80015a8:	683b      	ldr	r3, [r7, #0]
 80015aa:	685b      	ldr	r3, [r3, #4]
 80015ac:	f003 0203 	and.w	r2, r3, #3
 80015b0:	697b      	ldr	r3, [r7, #20]
 80015b2:	005b      	lsls	r3, r3, #1
 80015b4:	fa02 f303 	lsl.w	r3, r2, r3
 80015b8:	693a      	ldr	r2, [r7, #16]
 80015ba:	4313      	orrs	r3, r2
 80015bc:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	693a      	ldr	r2, [r7, #16]
 80015c2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80015c4:	683b      	ldr	r3, [r7, #0]
 80015c6:	685b      	ldr	r3, [r3, #4]
 80015c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	f000 80ac 	beq.w	800172a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015d2:	4b5f      	ldr	r3, [pc, #380]	; (8001750 <HAL_GPIO_Init+0x330>)
 80015d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015d6:	4a5e      	ldr	r2, [pc, #376]	; (8001750 <HAL_GPIO_Init+0x330>)
 80015d8:	f043 0301 	orr.w	r3, r3, #1
 80015dc:	6613      	str	r3, [r2, #96]	; 0x60
 80015de:	4b5c      	ldr	r3, [pc, #368]	; (8001750 <HAL_GPIO_Init+0x330>)
 80015e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015e2:	f003 0301 	and.w	r3, r3, #1
 80015e6:	60bb      	str	r3, [r7, #8]
 80015e8:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80015ea:	4a5a      	ldr	r2, [pc, #360]	; (8001754 <HAL_GPIO_Init+0x334>)
 80015ec:	697b      	ldr	r3, [r7, #20]
 80015ee:	089b      	lsrs	r3, r3, #2
 80015f0:	3302      	adds	r3, #2
 80015f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015f6:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80015f8:	697b      	ldr	r3, [r7, #20]
 80015fa:	f003 0303 	and.w	r3, r3, #3
 80015fe:	009b      	lsls	r3, r3, #2
 8001600:	220f      	movs	r2, #15
 8001602:	fa02 f303 	lsl.w	r3, r2, r3
 8001606:	43db      	mvns	r3, r3
 8001608:	693a      	ldr	r2, [r7, #16]
 800160a:	4013      	ands	r3, r2
 800160c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001614:	d025      	beq.n	8001662 <HAL_GPIO_Init+0x242>
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	4a4f      	ldr	r2, [pc, #316]	; (8001758 <HAL_GPIO_Init+0x338>)
 800161a:	4293      	cmp	r3, r2
 800161c:	d01f      	beq.n	800165e <HAL_GPIO_Init+0x23e>
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	4a4e      	ldr	r2, [pc, #312]	; (800175c <HAL_GPIO_Init+0x33c>)
 8001622:	4293      	cmp	r3, r2
 8001624:	d019      	beq.n	800165a <HAL_GPIO_Init+0x23a>
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	4a4d      	ldr	r2, [pc, #308]	; (8001760 <HAL_GPIO_Init+0x340>)
 800162a:	4293      	cmp	r3, r2
 800162c:	d013      	beq.n	8001656 <HAL_GPIO_Init+0x236>
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	4a4c      	ldr	r2, [pc, #304]	; (8001764 <HAL_GPIO_Init+0x344>)
 8001632:	4293      	cmp	r3, r2
 8001634:	d00d      	beq.n	8001652 <HAL_GPIO_Init+0x232>
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	4a4b      	ldr	r2, [pc, #300]	; (8001768 <HAL_GPIO_Init+0x348>)
 800163a:	4293      	cmp	r3, r2
 800163c:	d007      	beq.n	800164e <HAL_GPIO_Init+0x22e>
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	4a4a      	ldr	r2, [pc, #296]	; (800176c <HAL_GPIO_Init+0x34c>)
 8001642:	4293      	cmp	r3, r2
 8001644:	d101      	bne.n	800164a <HAL_GPIO_Init+0x22a>
 8001646:	2306      	movs	r3, #6
 8001648:	e00c      	b.n	8001664 <HAL_GPIO_Init+0x244>
 800164a:	2307      	movs	r3, #7
 800164c:	e00a      	b.n	8001664 <HAL_GPIO_Init+0x244>
 800164e:	2305      	movs	r3, #5
 8001650:	e008      	b.n	8001664 <HAL_GPIO_Init+0x244>
 8001652:	2304      	movs	r3, #4
 8001654:	e006      	b.n	8001664 <HAL_GPIO_Init+0x244>
 8001656:	2303      	movs	r3, #3
 8001658:	e004      	b.n	8001664 <HAL_GPIO_Init+0x244>
 800165a:	2302      	movs	r3, #2
 800165c:	e002      	b.n	8001664 <HAL_GPIO_Init+0x244>
 800165e:	2301      	movs	r3, #1
 8001660:	e000      	b.n	8001664 <HAL_GPIO_Init+0x244>
 8001662:	2300      	movs	r3, #0
 8001664:	697a      	ldr	r2, [r7, #20]
 8001666:	f002 0203 	and.w	r2, r2, #3
 800166a:	0092      	lsls	r2, r2, #2
 800166c:	4093      	lsls	r3, r2
 800166e:	693a      	ldr	r2, [r7, #16]
 8001670:	4313      	orrs	r3, r2
 8001672:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001674:	4937      	ldr	r1, [pc, #220]	; (8001754 <HAL_GPIO_Init+0x334>)
 8001676:	697b      	ldr	r3, [r7, #20]
 8001678:	089b      	lsrs	r3, r3, #2
 800167a:	3302      	adds	r3, #2
 800167c:	693a      	ldr	r2, [r7, #16]
 800167e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001682:	4b3b      	ldr	r3, [pc, #236]	; (8001770 <HAL_GPIO_Init+0x350>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	43db      	mvns	r3, r3
 800168c:	693a      	ldr	r2, [r7, #16]
 800168e:	4013      	ands	r3, r2
 8001690:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001692:	683b      	ldr	r3, [r7, #0]
 8001694:	685b      	ldr	r3, [r3, #4]
 8001696:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800169a:	2b00      	cmp	r3, #0
 800169c:	d003      	beq.n	80016a6 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800169e:	693a      	ldr	r2, [r7, #16]
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	4313      	orrs	r3, r2
 80016a4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80016a6:	4a32      	ldr	r2, [pc, #200]	; (8001770 <HAL_GPIO_Init+0x350>)
 80016a8:	693b      	ldr	r3, [r7, #16]
 80016aa:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80016ac:	4b30      	ldr	r3, [pc, #192]	; (8001770 <HAL_GPIO_Init+0x350>)
 80016ae:	685b      	ldr	r3, [r3, #4]
 80016b0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	43db      	mvns	r3, r3
 80016b6:	693a      	ldr	r2, [r7, #16]
 80016b8:	4013      	ands	r3, r2
 80016ba:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80016bc:	683b      	ldr	r3, [r7, #0]
 80016be:	685b      	ldr	r3, [r3, #4]
 80016c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d003      	beq.n	80016d0 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80016c8:	693a      	ldr	r2, [r7, #16]
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	4313      	orrs	r3, r2
 80016ce:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80016d0:	4a27      	ldr	r2, [pc, #156]	; (8001770 <HAL_GPIO_Init+0x350>)
 80016d2:	693b      	ldr	r3, [r7, #16]
 80016d4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80016d6:	4b26      	ldr	r3, [pc, #152]	; (8001770 <HAL_GPIO_Init+0x350>)
 80016d8:	689b      	ldr	r3, [r3, #8]
 80016da:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	43db      	mvns	r3, r3
 80016e0:	693a      	ldr	r2, [r7, #16]
 80016e2:	4013      	ands	r3, r2
 80016e4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80016e6:	683b      	ldr	r3, [r7, #0]
 80016e8:	685b      	ldr	r3, [r3, #4]
 80016ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d003      	beq.n	80016fa <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80016f2:	693a      	ldr	r2, [r7, #16]
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	4313      	orrs	r3, r2
 80016f8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80016fa:	4a1d      	ldr	r2, [pc, #116]	; (8001770 <HAL_GPIO_Init+0x350>)
 80016fc:	693b      	ldr	r3, [r7, #16]
 80016fe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001700:	4b1b      	ldr	r3, [pc, #108]	; (8001770 <HAL_GPIO_Init+0x350>)
 8001702:	68db      	ldr	r3, [r3, #12]
 8001704:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	43db      	mvns	r3, r3
 800170a:	693a      	ldr	r2, [r7, #16]
 800170c:	4013      	ands	r3, r2
 800170e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001710:	683b      	ldr	r3, [r7, #0]
 8001712:	685b      	ldr	r3, [r3, #4]
 8001714:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001718:	2b00      	cmp	r3, #0
 800171a:	d003      	beq.n	8001724 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 800171c:	693a      	ldr	r2, [r7, #16]
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	4313      	orrs	r3, r2
 8001722:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001724:	4a12      	ldr	r2, [pc, #72]	; (8001770 <HAL_GPIO_Init+0x350>)
 8001726:	693b      	ldr	r3, [r7, #16]
 8001728:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800172a:	697b      	ldr	r3, [r7, #20]
 800172c:	3301      	adds	r3, #1
 800172e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001730:	683b      	ldr	r3, [r7, #0]
 8001732:	681a      	ldr	r2, [r3, #0]
 8001734:	697b      	ldr	r3, [r7, #20]
 8001736:	fa22 f303 	lsr.w	r3, r2, r3
 800173a:	2b00      	cmp	r3, #0
 800173c:	f47f ae78 	bne.w	8001430 <HAL_GPIO_Init+0x10>
  }
}
 8001740:	bf00      	nop
 8001742:	bf00      	nop
 8001744:	371c      	adds	r7, #28
 8001746:	46bd      	mov	sp, r7
 8001748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174c:	4770      	bx	lr
 800174e:	bf00      	nop
 8001750:	40021000 	.word	0x40021000
 8001754:	40010000 	.word	0x40010000
 8001758:	48000400 	.word	0x48000400
 800175c:	48000800 	.word	0x48000800
 8001760:	48000c00 	.word	0x48000c00
 8001764:	48001000 	.word	0x48001000
 8001768:	48001400 	.word	0x48001400
 800176c:	48001800 	.word	0x48001800
 8001770:	40010400 	.word	0x40010400

08001774 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001774:	b480      	push	{r7}
 8001776:	b083      	sub	sp, #12
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
 800177c:	460b      	mov	r3, r1
 800177e:	807b      	strh	r3, [r7, #2]
 8001780:	4613      	mov	r3, r2
 8001782:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001784:	787b      	ldrb	r3, [r7, #1]
 8001786:	2b00      	cmp	r3, #0
 8001788:	d003      	beq.n	8001792 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800178a:	887a      	ldrh	r2, [r7, #2]
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001790:	e002      	b.n	8001798 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001792:	887a      	ldrh	r2, [r7, #2]
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001798:	bf00      	nop
 800179a:	370c      	adds	r7, #12
 800179c:	46bd      	mov	sp, r7
 800179e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a2:	4770      	bx	lr

080017a4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80017a4:	b480      	push	{r7}
 80017a6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80017a8:	4b04      	ldr	r3, [pc, #16]	; (80017bc <HAL_PWREx_GetVoltageRange+0x18>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80017b0:	4618      	mov	r0, r3
 80017b2:	46bd      	mov	sp, r7
 80017b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b8:	4770      	bx	lr
 80017ba:	bf00      	nop
 80017bc:	40007000 	.word	0x40007000

080017c0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80017c0:	b480      	push	{r7}
 80017c2:	b085      	sub	sp, #20
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80017ce:	d130      	bne.n	8001832 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80017d0:	4b23      	ldr	r3, [pc, #140]	; (8001860 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80017d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80017dc:	d038      	beq.n	8001850 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80017de:	4b20      	ldr	r3, [pc, #128]	; (8001860 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80017e6:	4a1e      	ldr	r2, [pc, #120]	; (8001860 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80017e8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80017ec:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80017ee:	4b1d      	ldr	r3, [pc, #116]	; (8001864 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	2232      	movs	r2, #50	; 0x32
 80017f4:	fb02 f303 	mul.w	r3, r2, r3
 80017f8:	4a1b      	ldr	r2, [pc, #108]	; (8001868 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80017fa:	fba2 2303 	umull	r2, r3, r2, r3
 80017fe:	0c9b      	lsrs	r3, r3, #18
 8001800:	3301      	adds	r3, #1
 8001802:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001804:	e002      	b.n	800180c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	3b01      	subs	r3, #1
 800180a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800180c:	4b14      	ldr	r3, [pc, #80]	; (8001860 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800180e:	695b      	ldr	r3, [r3, #20]
 8001810:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001814:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001818:	d102      	bne.n	8001820 <HAL_PWREx_ControlVoltageScaling+0x60>
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	2b00      	cmp	r3, #0
 800181e:	d1f2      	bne.n	8001806 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001820:	4b0f      	ldr	r3, [pc, #60]	; (8001860 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001822:	695b      	ldr	r3, [r3, #20]
 8001824:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001828:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800182c:	d110      	bne.n	8001850 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800182e:	2303      	movs	r3, #3
 8001830:	e00f      	b.n	8001852 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001832:	4b0b      	ldr	r3, [pc, #44]	; (8001860 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800183a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800183e:	d007      	beq.n	8001850 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001840:	4b07      	ldr	r3, [pc, #28]	; (8001860 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001848:	4a05      	ldr	r2, [pc, #20]	; (8001860 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800184a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800184e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001850:	2300      	movs	r3, #0
}
 8001852:	4618      	mov	r0, r3
 8001854:	3714      	adds	r7, #20
 8001856:	46bd      	mov	sp, r7
 8001858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185c:	4770      	bx	lr
 800185e:	bf00      	nop
 8001860:	40007000 	.word	0x40007000
 8001864:	20000054 	.word	0x20000054
 8001868:	431bde83 	.word	0x431bde83

0800186c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	b088      	sub	sp, #32
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	2b00      	cmp	r3, #0
 8001878:	d101      	bne.n	800187e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800187a:	2301      	movs	r3, #1
 800187c:	e3d4      	b.n	8002028 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800187e:	4ba1      	ldr	r3, [pc, #644]	; (8001b04 <HAL_RCC_OscConfig+0x298>)
 8001880:	689b      	ldr	r3, [r3, #8]
 8001882:	f003 030c 	and.w	r3, r3, #12
 8001886:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001888:	4b9e      	ldr	r3, [pc, #632]	; (8001b04 <HAL_RCC_OscConfig+0x298>)
 800188a:	68db      	ldr	r3, [r3, #12]
 800188c:	f003 0303 	and.w	r3, r3, #3
 8001890:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f003 0310 	and.w	r3, r3, #16
 800189a:	2b00      	cmp	r3, #0
 800189c:	f000 80e4 	beq.w	8001a68 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80018a0:	69bb      	ldr	r3, [r7, #24]
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d007      	beq.n	80018b6 <HAL_RCC_OscConfig+0x4a>
 80018a6:	69bb      	ldr	r3, [r7, #24]
 80018a8:	2b0c      	cmp	r3, #12
 80018aa:	f040 808b 	bne.w	80019c4 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80018ae:	697b      	ldr	r3, [r7, #20]
 80018b0:	2b01      	cmp	r3, #1
 80018b2:	f040 8087 	bne.w	80019c4 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80018b6:	4b93      	ldr	r3, [pc, #588]	; (8001b04 <HAL_RCC_OscConfig+0x298>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	f003 0302 	and.w	r3, r3, #2
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d005      	beq.n	80018ce <HAL_RCC_OscConfig+0x62>
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	699b      	ldr	r3, [r3, #24]
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d101      	bne.n	80018ce <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80018ca:	2301      	movs	r3, #1
 80018cc:	e3ac      	b.n	8002028 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	6a1a      	ldr	r2, [r3, #32]
 80018d2:	4b8c      	ldr	r3, [pc, #560]	; (8001b04 <HAL_RCC_OscConfig+0x298>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f003 0308 	and.w	r3, r3, #8
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d004      	beq.n	80018e8 <HAL_RCC_OscConfig+0x7c>
 80018de:	4b89      	ldr	r3, [pc, #548]	; (8001b04 <HAL_RCC_OscConfig+0x298>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80018e6:	e005      	b.n	80018f4 <HAL_RCC_OscConfig+0x88>
 80018e8:	4b86      	ldr	r3, [pc, #536]	; (8001b04 <HAL_RCC_OscConfig+0x298>)
 80018ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80018ee:	091b      	lsrs	r3, r3, #4
 80018f0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80018f4:	4293      	cmp	r3, r2
 80018f6:	d223      	bcs.n	8001940 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	6a1b      	ldr	r3, [r3, #32]
 80018fc:	4618      	mov	r0, r3
 80018fe:	f000 fd41 	bl	8002384 <RCC_SetFlashLatencyFromMSIRange>
 8001902:	4603      	mov	r3, r0
 8001904:	2b00      	cmp	r3, #0
 8001906:	d001      	beq.n	800190c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001908:	2301      	movs	r3, #1
 800190a:	e38d      	b.n	8002028 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800190c:	4b7d      	ldr	r3, [pc, #500]	; (8001b04 <HAL_RCC_OscConfig+0x298>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	4a7c      	ldr	r2, [pc, #496]	; (8001b04 <HAL_RCC_OscConfig+0x298>)
 8001912:	f043 0308 	orr.w	r3, r3, #8
 8001916:	6013      	str	r3, [r2, #0]
 8001918:	4b7a      	ldr	r3, [pc, #488]	; (8001b04 <HAL_RCC_OscConfig+0x298>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	6a1b      	ldr	r3, [r3, #32]
 8001924:	4977      	ldr	r1, [pc, #476]	; (8001b04 <HAL_RCC_OscConfig+0x298>)
 8001926:	4313      	orrs	r3, r2
 8001928:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800192a:	4b76      	ldr	r3, [pc, #472]	; (8001b04 <HAL_RCC_OscConfig+0x298>)
 800192c:	685b      	ldr	r3, [r3, #4]
 800192e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	69db      	ldr	r3, [r3, #28]
 8001936:	021b      	lsls	r3, r3, #8
 8001938:	4972      	ldr	r1, [pc, #456]	; (8001b04 <HAL_RCC_OscConfig+0x298>)
 800193a:	4313      	orrs	r3, r2
 800193c:	604b      	str	r3, [r1, #4]
 800193e:	e025      	b.n	800198c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001940:	4b70      	ldr	r3, [pc, #448]	; (8001b04 <HAL_RCC_OscConfig+0x298>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	4a6f      	ldr	r2, [pc, #444]	; (8001b04 <HAL_RCC_OscConfig+0x298>)
 8001946:	f043 0308 	orr.w	r3, r3, #8
 800194a:	6013      	str	r3, [r2, #0]
 800194c:	4b6d      	ldr	r3, [pc, #436]	; (8001b04 <HAL_RCC_OscConfig+0x298>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	6a1b      	ldr	r3, [r3, #32]
 8001958:	496a      	ldr	r1, [pc, #424]	; (8001b04 <HAL_RCC_OscConfig+0x298>)
 800195a:	4313      	orrs	r3, r2
 800195c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800195e:	4b69      	ldr	r3, [pc, #420]	; (8001b04 <HAL_RCC_OscConfig+0x298>)
 8001960:	685b      	ldr	r3, [r3, #4]
 8001962:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	69db      	ldr	r3, [r3, #28]
 800196a:	021b      	lsls	r3, r3, #8
 800196c:	4965      	ldr	r1, [pc, #404]	; (8001b04 <HAL_RCC_OscConfig+0x298>)
 800196e:	4313      	orrs	r3, r2
 8001970:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001972:	69bb      	ldr	r3, [r7, #24]
 8001974:	2b00      	cmp	r3, #0
 8001976:	d109      	bne.n	800198c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	6a1b      	ldr	r3, [r3, #32]
 800197c:	4618      	mov	r0, r3
 800197e:	f000 fd01 	bl	8002384 <RCC_SetFlashLatencyFromMSIRange>
 8001982:	4603      	mov	r3, r0
 8001984:	2b00      	cmp	r3, #0
 8001986:	d001      	beq.n	800198c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001988:	2301      	movs	r3, #1
 800198a:	e34d      	b.n	8002028 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800198c:	f000 fc36 	bl	80021fc <HAL_RCC_GetSysClockFreq>
 8001990:	4602      	mov	r2, r0
 8001992:	4b5c      	ldr	r3, [pc, #368]	; (8001b04 <HAL_RCC_OscConfig+0x298>)
 8001994:	689b      	ldr	r3, [r3, #8]
 8001996:	091b      	lsrs	r3, r3, #4
 8001998:	f003 030f 	and.w	r3, r3, #15
 800199c:	495a      	ldr	r1, [pc, #360]	; (8001b08 <HAL_RCC_OscConfig+0x29c>)
 800199e:	5ccb      	ldrb	r3, [r1, r3]
 80019a0:	f003 031f 	and.w	r3, r3, #31
 80019a4:	fa22 f303 	lsr.w	r3, r2, r3
 80019a8:	4a58      	ldr	r2, [pc, #352]	; (8001b0c <HAL_RCC_OscConfig+0x2a0>)
 80019aa:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80019ac:	4b58      	ldr	r3, [pc, #352]	; (8001b10 <HAL_RCC_OscConfig+0x2a4>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	4618      	mov	r0, r3
 80019b2:	f7ff f99b 	bl	8000cec <HAL_InitTick>
 80019b6:	4603      	mov	r3, r0
 80019b8:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80019ba:	7bfb      	ldrb	r3, [r7, #15]
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d052      	beq.n	8001a66 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80019c0:	7bfb      	ldrb	r3, [r7, #15]
 80019c2:	e331      	b.n	8002028 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	699b      	ldr	r3, [r3, #24]
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d032      	beq.n	8001a32 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80019cc:	4b4d      	ldr	r3, [pc, #308]	; (8001b04 <HAL_RCC_OscConfig+0x298>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	4a4c      	ldr	r2, [pc, #304]	; (8001b04 <HAL_RCC_OscConfig+0x298>)
 80019d2:	f043 0301 	orr.w	r3, r3, #1
 80019d6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80019d8:	f7ff f9d8 	bl	8000d8c <HAL_GetTick>
 80019dc:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80019de:	e008      	b.n	80019f2 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80019e0:	f7ff f9d4 	bl	8000d8c <HAL_GetTick>
 80019e4:	4602      	mov	r2, r0
 80019e6:	693b      	ldr	r3, [r7, #16]
 80019e8:	1ad3      	subs	r3, r2, r3
 80019ea:	2b02      	cmp	r3, #2
 80019ec:	d901      	bls.n	80019f2 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80019ee:	2303      	movs	r3, #3
 80019f0:	e31a      	b.n	8002028 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80019f2:	4b44      	ldr	r3, [pc, #272]	; (8001b04 <HAL_RCC_OscConfig+0x298>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f003 0302 	and.w	r3, r3, #2
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d0f0      	beq.n	80019e0 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80019fe:	4b41      	ldr	r3, [pc, #260]	; (8001b04 <HAL_RCC_OscConfig+0x298>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	4a40      	ldr	r2, [pc, #256]	; (8001b04 <HAL_RCC_OscConfig+0x298>)
 8001a04:	f043 0308 	orr.w	r3, r3, #8
 8001a08:	6013      	str	r3, [r2, #0]
 8001a0a:	4b3e      	ldr	r3, [pc, #248]	; (8001b04 <HAL_RCC_OscConfig+0x298>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	6a1b      	ldr	r3, [r3, #32]
 8001a16:	493b      	ldr	r1, [pc, #236]	; (8001b04 <HAL_RCC_OscConfig+0x298>)
 8001a18:	4313      	orrs	r3, r2
 8001a1a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001a1c:	4b39      	ldr	r3, [pc, #228]	; (8001b04 <HAL_RCC_OscConfig+0x298>)
 8001a1e:	685b      	ldr	r3, [r3, #4]
 8001a20:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	69db      	ldr	r3, [r3, #28]
 8001a28:	021b      	lsls	r3, r3, #8
 8001a2a:	4936      	ldr	r1, [pc, #216]	; (8001b04 <HAL_RCC_OscConfig+0x298>)
 8001a2c:	4313      	orrs	r3, r2
 8001a2e:	604b      	str	r3, [r1, #4]
 8001a30:	e01a      	b.n	8001a68 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001a32:	4b34      	ldr	r3, [pc, #208]	; (8001b04 <HAL_RCC_OscConfig+0x298>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	4a33      	ldr	r2, [pc, #204]	; (8001b04 <HAL_RCC_OscConfig+0x298>)
 8001a38:	f023 0301 	bic.w	r3, r3, #1
 8001a3c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001a3e:	f7ff f9a5 	bl	8000d8c <HAL_GetTick>
 8001a42:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001a44:	e008      	b.n	8001a58 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001a46:	f7ff f9a1 	bl	8000d8c <HAL_GetTick>
 8001a4a:	4602      	mov	r2, r0
 8001a4c:	693b      	ldr	r3, [r7, #16]
 8001a4e:	1ad3      	subs	r3, r2, r3
 8001a50:	2b02      	cmp	r3, #2
 8001a52:	d901      	bls.n	8001a58 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001a54:	2303      	movs	r3, #3
 8001a56:	e2e7      	b.n	8002028 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001a58:	4b2a      	ldr	r3, [pc, #168]	; (8001b04 <HAL_RCC_OscConfig+0x298>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f003 0302 	and.w	r3, r3, #2
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d1f0      	bne.n	8001a46 <HAL_RCC_OscConfig+0x1da>
 8001a64:	e000      	b.n	8001a68 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001a66:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f003 0301 	and.w	r3, r3, #1
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d074      	beq.n	8001b5e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001a74:	69bb      	ldr	r3, [r7, #24]
 8001a76:	2b08      	cmp	r3, #8
 8001a78:	d005      	beq.n	8001a86 <HAL_RCC_OscConfig+0x21a>
 8001a7a:	69bb      	ldr	r3, [r7, #24]
 8001a7c:	2b0c      	cmp	r3, #12
 8001a7e:	d10e      	bne.n	8001a9e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001a80:	697b      	ldr	r3, [r7, #20]
 8001a82:	2b03      	cmp	r3, #3
 8001a84:	d10b      	bne.n	8001a9e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a86:	4b1f      	ldr	r3, [pc, #124]	; (8001b04 <HAL_RCC_OscConfig+0x298>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d064      	beq.n	8001b5c <HAL_RCC_OscConfig+0x2f0>
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	685b      	ldr	r3, [r3, #4]
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d160      	bne.n	8001b5c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001a9a:	2301      	movs	r3, #1
 8001a9c:	e2c4      	b.n	8002028 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	685b      	ldr	r3, [r3, #4]
 8001aa2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001aa6:	d106      	bne.n	8001ab6 <HAL_RCC_OscConfig+0x24a>
 8001aa8:	4b16      	ldr	r3, [pc, #88]	; (8001b04 <HAL_RCC_OscConfig+0x298>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	4a15      	ldr	r2, [pc, #84]	; (8001b04 <HAL_RCC_OscConfig+0x298>)
 8001aae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ab2:	6013      	str	r3, [r2, #0]
 8001ab4:	e01d      	b.n	8001af2 <HAL_RCC_OscConfig+0x286>
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	685b      	ldr	r3, [r3, #4]
 8001aba:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001abe:	d10c      	bne.n	8001ada <HAL_RCC_OscConfig+0x26e>
 8001ac0:	4b10      	ldr	r3, [pc, #64]	; (8001b04 <HAL_RCC_OscConfig+0x298>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	4a0f      	ldr	r2, [pc, #60]	; (8001b04 <HAL_RCC_OscConfig+0x298>)
 8001ac6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001aca:	6013      	str	r3, [r2, #0]
 8001acc:	4b0d      	ldr	r3, [pc, #52]	; (8001b04 <HAL_RCC_OscConfig+0x298>)
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	4a0c      	ldr	r2, [pc, #48]	; (8001b04 <HAL_RCC_OscConfig+0x298>)
 8001ad2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ad6:	6013      	str	r3, [r2, #0]
 8001ad8:	e00b      	b.n	8001af2 <HAL_RCC_OscConfig+0x286>
 8001ada:	4b0a      	ldr	r3, [pc, #40]	; (8001b04 <HAL_RCC_OscConfig+0x298>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	4a09      	ldr	r2, [pc, #36]	; (8001b04 <HAL_RCC_OscConfig+0x298>)
 8001ae0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ae4:	6013      	str	r3, [r2, #0]
 8001ae6:	4b07      	ldr	r3, [pc, #28]	; (8001b04 <HAL_RCC_OscConfig+0x298>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	4a06      	ldr	r2, [pc, #24]	; (8001b04 <HAL_RCC_OscConfig+0x298>)
 8001aec:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001af0:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	685b      	ldr	r3, [r3, #4]
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d01c      	beq.n	8001b34 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001afa:	f7ff f947 	bl	8000d8c <HAL_GetTick>
 8001afe:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001b00:	e011      	b.n	8001b26 <HAL_RCC_OscConfig+0x2ba>
 8001b02:	bf00      	nop
 8001b04:	40021000 	.word	0x40021000
 8001b08:	08003f08 	.word	0x08003f08
 8001b0c:	20000054 	.word	0x20000054
 8001b10:	20000058 	.word	0x20000058
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b14:	f7ff f93a 	bl	8000d8c <HAL_GetTick>
 8001b18:	4602      	mov	r2, r0
 8001b1a:	693b      	ldr	r3, [r7, #16]
 8001b1c:	1ad3      	subs	r3, r2, r3
 8001b1e:	2b64      	cmp	r3, #100	; 0x64
 8001b20:	d901      	bls.n	8001b26 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001b22:	2303      	movs	r3, #3
 8001b24:	e280      	b.n	8002028 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001b26:	4baf      	ldr	r3, [pc, #700]	; (8001de4 <HAL_RCC_OscConfig+0x578>)
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d0f0      	beq.n	8001b14 <HAL_RCC_OscConfig+0x2a8>
 8001b32:	e014      	b.n	8001b5e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b34:	f7ff f92a 	bl	8000d8c <HAL_GetTick>
 8001b38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001b3a:	e008      	b.n	8001b4e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b3c:	f7ff f926 	bl	8000d8c <HAL_GetTick>
 8001b40:	4602      	mov	r2, r0
 8001b42:	693b      	ldr	r3, [r7, #16]
 8001b44:	1ad3      	subs	r3, r2, r3
 8001b46:	2b64      	cmp	r3, #100	; 0x64
 8001b48:	d901      	bls.n	8001b4e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001b4a:	2303      	movs	r3, #3
 8001b4c:	e26c      	b.n	8002028 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001b4e:	4ba5      	ldr	r3, [pc, #660]	; (8001de4 <HAL_RCC_OscConfig+0x578>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d1f0      	bne.n	8001b3c <HAL_RCC_OscConfig+0x2d0>
 8001b5a:	e000      	b.n	8001b5e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b5c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f003 0302 	and.w	r3, r3, #2
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d060      	beq.n	8001c2c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001b6a:	69bb      	ldr	r3, [r7, #24]
 8001b6c:	2b04      	cmp	r3, #4
 8001b6e:	d005      	beq.n	8001b7c <HAL_RCC_OscConfig+0x310>
 8001b70:	69bb      	ldr	r3, [r7, #24]
 8001b72:	2b0c      	cmp	r3, #12
 8001b74:	d119      	bne.n	8001baa <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001b76:	697b      	ldr	r3, [r7, #20]
 8001b78:	2b02      	cmp	r3, #2
 8001b7a:	d116      	bne.n	8001baa <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001b7c:	4b99      	ldr	r3, [pc, #612]	; (8001de4 <HAL_RCC_OscConfig+0x578>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d005      	beq.n	8001b94 <HAL_RCC_OscConfig+0x328>
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	68db      	ldr	r3, [r3, #12]
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d101      	bne.n	8001b94 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001b90:	2301      	movs	r3, #1
 8001b92:	e249      	b.n	8002028 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b94:	4b93      	ldr	r3, [pc, #588]	; (8001de4 <HAL_RCC_OscConfig+0x578>)
 8001b96:	685b      	ldr	r3, [r3, #4]
 8001b98:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	691b      	ldr	r3, [r3, #16]
 8001ba0:	061b      	lsls	r3, r3, #24
 8001ba2:	4990      	ldr	r1, [pc, #576]	; (8001de4 <HAL_RCC_OscConfig+0x578>)
 8001ba4:	4313      	orrs	r3, r2
 8001ba6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001ba8:	e040      	b.n	8001c2c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	68db      	ldr	r3, [r3, #12]
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d023      	beq.n	8001bfa <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001bb2:	4b8c      	ldr	r3, [pc, #560]	; (8001de4 <HAL_RCC_OscConfig+0x578>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	4a8b      	ldr	r2, [pc, #556]	; (8001de4 <HAL_RCC_OscConfig+0x578>)
 8001bb8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bbc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bbe:	f7ff f8e5 	bl	8000d8c <HAL_GetTick>
 8001bc2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001bc4:	e008      	b.n	8001bd8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001bc6:	f7ff f8e1 	bl	8000d8c <HAL_GetTick>
 8001bca:	4602      	mov	r2, r0
 8001bcc:	693b      	ldr	r3, [r7, #16]
 8001bce:	1ad3      	subs	r3, r2, r3
 8001bd0:	2b02      	cmp	r3, #2
 8001bd2:	d901      	bls.n	8001bd8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001bd4:	2303      	movs	r3, #3
 8001bd6:	e227      	b.n	8002028 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001bd8:	4b82      	ldr	r3, [pc, #520]	; (8001de4 <HAL_RCC_OscConfig+0x578>)
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d0f0      	beq.n	8001bc6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001be4:	4b7f      	ldr	r3, [pc, #508]	; (8001de4 <HAL_RCC_OscConfig+0x578>)
 8001be6:	685b      	ldr	r3, [r3, #4]
 8001be8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	691b      	ldr	r3, [r3, #16]
 8001bf0:	061b      	lsls	r3, r3, #24
 8001bf2:	497c      	ldr	r1, [pc, #496]	; (8001de4 <HAL_RCC_OscConfig+0x578>)
 8001bf4:	4313      	orrs	r3, r2
 8001bf6:	604b      	str	r3, [r1, #4]
 8001bf8:	e018      	b.n	8001c2c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001bfa:	4b7a      	ldr	r3, [pc, #488]	; (8001de4 <HAL_RCC_OscConfig+0x578>)
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	4a79      	ldr	r2, [pc, #484]	; (8001de4 <HAL_RCC_OscConfig+0x578>)
 8001c00:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001c04:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c06:	f7ff f8c1 	bl	8000d8c <HAL_GetTick>
 8001c0a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001c0c:	e008      	b.n	8001c20 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c0e:	f7ff f8bd 	bl	8000d8c <HAL_GetTick>
 8001c12:	4602      	mov	r2, r0
 8001c14:	693b      	ldr	r3, [r7, #16]
 8001c16:	1ad3      	subs	r3, r2, r3
 8001c18:	2b02      	cmp	r3, #2
 8001c1a:	d901      	bls.n	8001c20 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001c1c:	2303      	movs	r3, #3
 8001c1e:	e203      	b.n	8002028 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001c20:	4b70      	ldr	r3, [pc, #448]	; (8001de4 <HAL_RCC_OscConfig+0x578>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d1f0      	bne.n	8001c0e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f003 0308 	and.w	r3, r3, #8
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d03c      	beq.n	8001cb2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	695b      	ldr	r3, [r3, #20]
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d01c      	beq.n	8001c7a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c40:	4b68      	ldr	r3, [pc, #416]	; (8001de4 <HAL_RCC_OscConfig+0x578>)
 8001c42:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c46:	4a67      	ldr	r2, [pc, #412]	; (8001de4 <HAL_RCC_OscConfig+0x578>)
 8001c48:	f043 0301 	orr.w	r3, r3, #1
 8001c4c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c50:	f7ff f89c 	bl	8000d8c <HAL_GetTick>
 8001c54:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001c56:	e008      	b.n	8001c6a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c58:	f7ff f898 	bl	8000d8c <HAL_GetTick>
 8001c5c:	4602      	mov	r2, r0
 8001c5e:	693b      	ldr	r3, [r7, #16]
 8001c60:	1ad3      	subs	r3, r2, r3
 8001c62:	2b02      	cmp	r3, #2
 8001c64:	d901      	bls.n	8001c6a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001c66:	2303      	movs	r3, #3
 8001c68:	e1de      	b.n	8002028 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001c6a:	4b5e      	ldr	r3, [pc, #376]	; (8001de4 <HAL_RCC_OscConfig+0x578>)
 8001c6c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c70:	f003 0302 	and.w	r3, r3, #2
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d0ef      	beq.n	8001c58 <HAL_RCC_OscConfig+0x3ec>
 8001c78:	e01b      	b.n	8001cb2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c7a:	4b5a      	ldr	r3, [pc, #360]	; (8001de4 <HAL_RCC_OscConfig+0x578>)
 8001c7c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c80:	4a58      	ldr	r2, [pc, #352]	; (8001de4 <HAL_RCC_OscConfig+0x578>)
 8001c82:	f023 0301 	bic.w	r3, r3, #1
 8001c86:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c8a:	f7ff f87f 	bl	8000d8c <HAL_GetTick>
 8001c8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001c90:	e008      	b.n	8001ca4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c92:	f7ff f87b 	bl	8000d8c <HAL_GetTick>
 8001c96:	4602      	mov	r2, r0
 8001c98:	693b      	ldr	r3, [r7, #16]
 8001c9a:	1ad3      	subs	r3, r2, r3
 8001c9c:	2b02      	cmp	r3, #2
 8001c9e:	d901      	bls.n	8001ca4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001ca0:	2303      	movs	r3, #3
 8001ca2:	e1c1      	b.n	8002028 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001ca4:	4b4f      	ldr	r3, [pc, #316]	; (8001de4 <HAL_RCC_OscConfig+0x578>)
 8001ca6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001caa:	f003 0302 	and.w	r3, r3, #2
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d1ef      	bne.n	8001c92 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f003 0304 	and.w	r3, r3, #4
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	f000 80a6 	beq.w	8001e0c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001cc4:	4b47      	ldr	r3, [pc, #284]	; (8001de4 <HAL_RCC_OscConfig+0x578>)
 8001cc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cc8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d10d      	bne.n	8001cec <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001cd0:	4b44      	ldr	r3, [pc, #272]	; (8001de4 <HAL_RCC_OscConfig+0x578>)
 8001cd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cd4:	4a43      	ldr	r2, [pc, #268]	; (8001de4 <HAL_RCC_OscConfig+0x578>)
 8001cd6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cda:	6593      	str	r3, [r2, #88]	; 0x58
 8001cdc:	4b41      	ldr	r3, [pc, #260]	; (8001de4 <HAL_RCC_OscConfig+0x578>)
 8001cde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ce0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ce4:	60bb      	str	r3, [r7, #8]
 8001ce6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001ce8:	2301      	movs	r3, #1
 8001cea:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001cec:	4b3e      	ldr	r3, [pc, #248]	; (8001de8 <HAL_RCC_OscConfig+0x57c>)
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d118      	bne.n	8001d2a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001cf8:	4b3b      	ldr	r3, [pc, #236]	; (8001de8 <HAL_RCC_OscConfig+0x57c>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	4a3a      	ldr	r2, [pc, #232]	; (8001de8 <HAL_RCC_OscConfig+0x57c>)
 8001cfe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d02:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d04:	f7ff f842 	bl	8000d8c <HAL_GetTick>
 8001d08:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d0a:	e008      	b.n	8001d1e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d0c:	f7ff f83e 	bl	8000d8c <HAL_GetTick>
 8001d10:	4602      	mov	r2, r0
 8001d12:	693b      	ldr	r3, [r7, #16]
 8001d14:	1ad3      	subs	r3, r2, r3
 8001d16:	2b02      	cmp	r3, #2
 8001d18:	d901      	bls.n	8001d1e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001d1a:	2303      	movs	r3, #3
 8001d1c:	e184      	b.n	8002028 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d1e:	4b32      	ldr	r3, [pc, #200]	; (8001de8 <HAL_RCC_OscConfig+0x57c>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d0f0      	beq.n	8001d0c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	689b      	ldr	r3, [r3, #8]
 8001d2e:	2b01      	cmp	r3, #1
 8001d30:	d108      	bne.n	8001d44 <HAL_RCC_OscConfig+0x4d8>
 8001d32:	4b2c      	ldr	r3, [pc, #176]	; (8001de4 <HAL_RCC_OscConfig+0x578>)
 8001d34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d38:	4a2a      	ldr	r2, [pc, #168]	; (8001de4 <HAL_RCC_OscConfig+0x578>)
 8001d3a:	f043 0301 	orr.w	r3, r3, #1
 8001d3e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001d42:	e024      	b.n	8001d8e <HAL_RCC_OscConfig+0x522>
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	689b      	ldr	r3, [r3, #8]
 8001d48:	2b05      	cmp	r3, #5
 8001d4a:	d110      	bne.n	8001d6e <HAL_RCC_OscConfig+0x502>
 8001d4c:	4b25      	ldr	r3, [pc, #148]	; (8001de4 <HAL_RCC_OscConfig+0x578>)
 8001d4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d52:	4a24      	ldr	r2, [pc, #144]	; (8001de4 <HAL_RCC_OscConfig+0x578>)
 8001d54:	f043 0304 	orr.w	r3, r3, #4
 8001d58:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001d5c:	4b21      	ldr	r3, [pc, #132]	; (8001de4 <HAL_RCC_OscConfig+0x578>)
 8001d5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d62:	4a20      	ldr	r2, [pc, #128]	; (8001de4 <HAL_RCC_OscConfig+0x578>)
 8001d64:	f043 0301 	orr.w	r3, r3, #1
 8001d68:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001d6c:	e00f      	b.n	8001d8e <HAL_RCC_OscConfig+0x522>
 8001d6e:	4b1d      	ldr	r3, [pc, #116]	; (8001de4 <HAL_RCC_OscConfig+0x578>)
 8001d70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d74:	4a1b      	ldr	r2, [pc, #108]	; (8001de4 <HAL_RCC_OscConfig+0x578>)
 8001d76:	f023 0301 	bic.w	r3, r3, #1
 8001d7a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001d7e:	4b19      	ldr	r3, [pc, #100]	; (8001de4 <HAL_RCC_OscConfig+0x578>)
 8001d80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d84:	4a17      	ldr	r2, [pc, #92]	; (8001de4 <HAL_RCC_OscConfig+0x578>)
 8001d86:	f023 0304 	bic.w	r3, r3, #4
 8001d8a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	689b      	ldr	r3, [r3, #8]
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d016      	beq.n	8001dc4 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d96:	f7fe fff9 	bl	8000d8c <HAL_GetTick>
 8001d9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001d9c:	e00a      	b.n	8001db4 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d9e:	f7fe fff5 	bl	8000d8c <HAL_GetTick>
 8001da2:	4602      	mov	r2, r0
 8001da4:	693b      	ldr	r3, [r7, #16]
 8001da6:	1ad3      	subs	r3, r2, r3
 8001da8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001dac:	4293      	cmp	r3, r2
 8001dae:	d901      	bls.n	8001db4 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8001db0:	2303      	movs	r3, #3
 8001db2:	e139      	b.n	8002028 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001db4:	4b0b      	ldr	r3, [pc, #44]	; (8001de4 <HAL_RCC_OscConfig+0x578>)
 8001db6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001dba:	f003 0302 	and.w	r3, r3, #2
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d0ed      	beq.n	8001d9e <HAL_RCC_OscConfig+0x532>
 8001dc2:	e01a      	b.n	8001dfa <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001dc4:	f7fe ffe2 	bl	8000d8c <HAL_GetTick>
 8001dc8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001dca:	e00f      	b.n	8001dec <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001dcc:	f7fe ffde 	bl	8000d8c <HAL_GetTick>
 8001dd0:	4602      	mov	r2, r0
 8001dd2:	693b      	ldr	r3, [r7, #16]
 8001dd4:	1ad3      	subs	r3, r2, r3
 8001dd6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001dda:	4293      	cmp	r3, r2
 8001ddc:	d906      	bls.n	8001dec <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001dde:	2303      	movs	r3, #3
 8001de0:	e122      	b.n	8002028 <HAL_RCC_OscConfig+0x7bc>
 8001de2:	bf00      	nop
 8001de4:	40021000 	.word	0x40021000
 8001de8:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001dec:	4b90      	ldr	r3, [pc, #576]	; (8002030 <HAL_RCC_OscConfig+0x7c4>)
 8001dee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001df2:	f003 0302 	and.w	r3, r3, #2
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d1e8      	bne.n	8001dcc <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001dfa:	7ffb      	ldrb	r3, [r7, #31]
 8001dfc:	2b01      	cmp	r3, #1
 8001dfe:	d105      	bne.n	8001e0c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e00:	4b8b      	ldr	r3, [pc, #556]	; (8002030 <HAL_RCC_OscConfig+0x7c4>)
 8001e02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e04:	4a8a      	ldr	r2, [pc, #552]	; (8002030 <HAL_RCC_OscConfig+0x7c4>)
 8001e06:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e0a:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	f000 8108 	beq.w	8002026 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e1a:	2b02      	cmp	r3, #2
 8001e1c:	f040 80d0 	bne.w	8001fc0 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001e20:	4b83      	ldr	r3, [pc, #524]	; (8002030 <HAL_RCC_OscConfig+0x7c4>)
 8001e22:	68db      	ldr	r3, [r3, #12]
 8001e24:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e26:	697b      	ldr	r3, [r7, #20]
 8001e28:	f003 0203 	and.w	r2, r3, #3
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e30:	429a      	cmp	r2, r3
 8001e32:	d130      	bne.n	8001e96 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001e34:	697b      	ldr	r3, [r7, #20]
 8001e36:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e3e:	3b01      	subs	r3, #1
 8001e40:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e42:	429a      	cmp	r2, r3
 8001e44:	d127      	bne.n	8001e96 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001e46:	697b      	ldr	r3, [r7, #20]
 8001e48:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e50:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001e52:	429a      	cmp	r2, r3
 8001e54:	d11f      	bne.n	8001e96 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001e56:	697b      	ldr	r3, [r7, #20]
 8001e58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e5c:	687a      	ldr	r2, [r7, #4]
 8001e5e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001e60:	2a07      	cmp	r2, #7
 8001e62:	bf14      	ite	ne
 8001e64:	2201      	movne	r2, #1
 8001e66:	2200      	moveq	r2, #0
 8001e68:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001e6a:	4293      	cmp	r3, r2
 8001e6c:	d113      	bne.n	8001e96 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001e6e:	697b      	ldr	r3, [r7, #20]
 8001e70:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e78:	085b      	lsrs	r3, r3, #1
 8001e7a:	3b01      	subs	r3, #1
 8001e7c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001e7e:	429a      	cmp	r2, r3
 8001e80:	d109      	bne.n	8001e96 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001e82:	697b      	ldr	r3, [r7, #20]
 8001e84:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e8c:	085b      	lsrs	r3, r3, #1
 8001e8e:	3b01      	subs	r3, #1
 8001e90:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001e92:	429a      	cmp	r2, r3
 8001e94:	d06e      	beq.n	8001f74 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001e96:	69bb      	ldr	r3, [r7, #24]
 8001e98:	2b0c      	cmp	r3, #12
 8001e9a:	d069      	beq.n	8001f70 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001e9c:	4b64      	ldr	r3, [pc, #400]	; (8002030 <HAL_RCC_OscConfig+0x7c4>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d105      	bne.n	8001eb4 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001ea8:	4b61      	ldr	r3, [pc, #388]	; (8002030 <HAL_RCC_OscConfig+0x7c4>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d001      	beq.n	8001eb8 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001eb4:	2301      	movs	r3, #1
 8001eb6:	e0b7      	b.n	8002028 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001eb8:	4b5d      	ldr	r3, [pc, #372]	; (8002030 <HAL_RCC_OscConfig+0x7c4>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	4a5c      	ldr	r2, [pc, #368]	; (8002030 <HAL_RCC_OscConfig+0x7c4>)
 8001ebe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001ec2:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001ec4:	f7fe ff62 	bl	8000d8c <HAL_GetTick>
 8001ec8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001eca:	e008      	b.n	8001ede <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ecc:	f7fe ff5e 	bl	8000d8c <HAL_GetTick>
 8001ed0:	4602      	mov	r2, r0
 8001ed2:	693b      	ldr	r3, [r7, #16]
 8001ed4:	1ad3      	subs	r3, r2, r3
 8001ed6:	2b02      	cmp	r3, #2
 8001ed8:	d901      	bls.n	8001ede <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001eda:	2303      	movs	r3, #3
 8001edc:	e0a4      	b.n	8002028 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ede:	4b54      	ldr	r3, [pc, #336]	; (8002030 <HAL_RCC_OscConfig+0x7c4>)
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d1f0      	bne.n	8001ecc <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001eea:	4b51      	ldr	r3, [pc, #324]	; (8002030 <HAL_RCC_OscConfig+0x7c4>)
 8001eec:	68da      	ldr	r2, [r3, #12]
 8001eee:	4b51      	ldr	r3, [pc, #324]	; (8002034 <HAL_RCC_OscConfig+0x7c8>)
 8001ef0:	4013      	ands	r3, r2
 8001ef2:	687a      	ldr	r2, [r7, #4]
 8001ef4:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001ef6:	687a      	ldr	r2, [r7, #4]
 8001ef8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001efa:	3a01      	subs	r2, #1
 8001efc:	0112      	lsls	r2, r2, #4
 8001efe:	4311      	orrs	r1, r2
 8001f00:	687a      	ldr	r2, [r7, #4]
 8001f02:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001f04:	0212      	lsls	r2, r2, #8
 8001f06:	4311      	orrs	r1, r2
 8001f08:	687a      	ldr	r2, [r7, #4]
 8001f0a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001f0c:	0852      	lsrs	r2, r2, #1
 8001f0e:	3a01      	subs	r2, #1
 8001f10:	0552      	lsls	r2, r2, #21
 8001f12:	4311      	orrs	r1, r2
 8001f14:	687a      	ldr	r2, [r7, #4]
 8001f16:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001f18:	0852      	lsrs	r2, r2, #1
 8001f1a:	3a01      	subs	r2, #1
 8001f1c:	0652      	lsls	r2, r2, #25
 8001f1e:	4311      	orrs	r1, r2
 8001f20:	687a      	ldr	r2, [r7, #4]
 8001f22:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001f24:	0912      	lsrs	r2, r2, #4
 8001f26:	0452      	lsls	r2, r2, #17
 8001f28:	430a      	orrs	r2, r1
 8001f2a:	4941      	ldr	r1, [pc, #260]	; (8002030 <HAL_RCC_OscConfig+0x7c4>)
 8001f2c:	4313      	orrs	r3, r2
 8001f2e:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001f30:	4b3f      	ldr	r3, [pc, #252]	; (8002030 <HAL_RCC_OscConfig+0x7c4>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	4a3e      	ldr	r2, [pc, #248]	; (8002030 <HAL_RCC_OscConfig+0x7c4>)
 8001f36:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001f3a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001f3c:	4b3c      	ldr	r3, [pc, #240]	; (8002030 <HAL_RCC_OscConfig+0x7c4>)
 8001f3e:	68db      	ldr	r3, [r3, #12]
 8001f40:	4a3b      	ldr	r2, [pc, #236]	; (8002030 <HAL_RCC_OscConfig+0x7c4>)
 8001f42:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001f46:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001f48:	f7fe ff20 	bl	8000d8c <HAL_GetTick>
 8001f4c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f4e:	e008      	b.n	8001f62 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f50:	f7fe ff1c 	bl	8000d8c <HAL_GetTick>
 8001f54:	4602      	mov	r2, r0
 8001f56:	693b      	ldr	r3, [r7, #16]
 8001f58:	1ad3      	subs	r3, r2, r3
 8001f5a:	2b02      	cmp	r3, #2
 8001f5c:	d901      	bls.n	8001f62 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001f5e:	2303      	movs	r3, #3
 8001f60:	e062      	b.n	8002028 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f62:	4b33      	ldr	r3, [pc, #204]	; (8002030 <HAL_RCC_OscConfig+0x7c4>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d0f0      	beq.n	8001f50 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001f6e:	e05a      	b.n	8002026 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001f70:	2301      	movs	r3, #1
 8001f72:	e059      	b.n	8002028 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f74:	4b2e      	ldr	r3, [pc, #184]	; (8002030 <HAL_RCC_OscConfig+0x7c4>)
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d152      	bne.n	8002026 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001f80:	4b2b      	ldr	r3, [pc, #172]	; (8002030 <HAL_RCC_OscConfig+0x7c4>)
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	4a2a      	ldr	r2, [pc, #168]	; (8002030 <HAL_RCC_OscConfig+0x7c4>)
 8001f86:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001f8a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001f8c:	4b28      	ldr	r3, [pc, #160]	; (8002030 <HAL_RCC_OscConfig+0x7c4>)
 8001f8e:	68db      	ldr	r3, [r3, #12]
 8001f90:	4a27      	ldr	r2, [pc, #156]	; (8002030 <HAL_RCC_OscConfig+0x7c4>)
 8001f92:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001f96:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001f98:	f7fe fef8 	bl	8000d8c <HAL_GetTick>
 8001f9c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f9e:	e008      	b.n	8001fb2 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fa0:	f7fe fef4 	bl	8000d8c <HAL_GetTick>
 8001fa4:	4602      	mov	r2, r0
 8001fa6:	693b      	ldr	r3, [r7, #16]
 8001fa8:	1ad3      	subs	r3, r2, r3
 8001faa:	2b02      	cmp	r3, #2
 8001fac:	d901      	bls.n	8001fb2 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001fae:	2303      	movs	r3, #3
 8001fb0:	e03a      	b.n	8002028 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001fb2:	4b1f      	ldr	r3, [pc, #124]	; (8002030 <HAL_RCC_OscConfig+0x7c4>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d0f0      	beq.n	8001fa0 <HAL_RCC_OscConfig+0x734>
 8001fbe:	e032      	b.n	8002026 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001fc0:	69bb      	ldr	r3, [r7, #24]
 8001fc2:	2b0c      	cmp	r3, #12
 8001fc4:	d02d      	beq.n	8002022 <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fc6:	4b1a      	ldr	r3, [pc, #104]	; (8002030 <HAL_RCC_OscConfig+0x7c4>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	4a19      	ldr	r2, [pc, #100]	; (8002030 <HAL_RCC_OscConfig+0x7c4>)
 8001fcc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001fd0:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8001fd2:	4b17      	ldr	r3, [pc, #92]	; (8002030 <HAL_RCC_OscConfig+0x7c4>)
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d105      	bne.n	8001fea <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001fde:	4b14      	ldr	r3, [pc, #80]	; (8002030 <HAL_RCC_OscConfig+0x7c4>)
 8001fe0:	68db      	ldr	r3, [r3, #12]
 8001fe2:	4a13      	ldr	r2, [pc, #76]	; (8002030 <HAL_RCC_OscConfig+0x7c4>)
 8001fe4:	f023 0303 	bic.w	r3, r3, #3
 8001fe8:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001fea:	4b11      	ldr	r3, [pc, #68]	; (8002030 <HAL_RCC_OscConfig+0x7c4>)
 8001fec:	68db      	ldr	r3, [r3, #12]
 8001fee:	4a10      	ldr	r2, [pc, #64]	; (8002030 <HAL_RCC_OscConfig+0x7c4>)
 8001ff0:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001ff4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ff8:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ffa:	f7fe fec7 	bl	8000d8c <HAL_GetTick>
 8001ffe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002000:	e008      	b.n	8002014 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002002:	f7fe fec3 	bl	8000d8c <HAL_GetTick>
 8002006:	4602      	mov	r2, r0
 8002008:	693b      	ldr	r3, [r7, #16]
 800200a:	1ad3      	subs	r3, r2, r3
 800200c:	2b02      	cmp	r3, #2
 800200e:	d901      	bls.n	8002014 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8002010:	2303      	movs	r3, #3
 8002012:	e009      	b.n	8002028 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002014:	4b06      	ldr	r3, [pc, #24]	; (8002030 <HAL_RCC_OscConfig+0x7c4>)
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800201c:	2b00      	cmp	r3, #0
 800201e:	d1f0      	bne.n	8002002 <HAL_RCC_OscConfig+0x796>
 8002020:	e001      	b.n	8002026 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002022:	2301      	movs	r3, #1
 8002024:	e000      	b.n	8002028 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8002026:	2300      	movs	r3, #0
}
 8002028:	4618      	mov	r0, r3
 800202a:	3720      	adds	r7, #32
 800202c:	46bd      	mov	sp, r7
 800202e:	bd80      	pop	{r7, pc}
 8002030:	40021000 	.word	0x40021000
 8002034:	f99d808c 	.word	0xf99d808c

08002038 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	b084      	sub	sp, #16
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
 8002040:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	2b00      	cmp	r3, #0
 8002046:	d101      	bne.n	800204c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002048:	2301      	movs	r3, #1
 800204a:	e0c8      	b.n	80021de <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800204c:	4b66      	ldr	r3, [pc, #408]	; (80021e8 <HAL_RCC_ClockConfig+0x1b0>)
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f003 0307 	and.w	r3, r3, #7
 8002054:	683a      	ldr	r2, [r7, #0]
 8002056:	429a      	cmp	r2, r3
 8002058:	d910      	bls.n	800207c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800205a:	4b63      	ldr	r3, [pc, #396]	; (80021e8 <HAL_RCC_ClockConfig+0x1b0>)
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f023 0207 	bic.w	r2, r3, #7
 8002062:	4961      	ldr	r1, [pc, #388]	; (80021e8 <HAL_RCC_ClockConfig+0x1b0>)
 8002064:	683b      	ldr	r3, [r7, #0]
 8002066:	4313      	orrs	r3, r2
 8002068:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800206a:	4b5f      	ldr	r3, [pc, #380]	; (80021e8 <HAL_RCC_ClockConfig+0x1b0>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f003 0307 	and.w	r3, r3, #7
 8002072:	683a      	ldr	r2, [r7, #0]
 8002074:	429a      	cmp	r2, r3
 8002076:	d001      	beq.n	800207c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002078:	2301      	movs	r3, #1
 800207a:	e0b0      	b.n	80021de <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f003 0301 	and.w	r3, r3, #1
 8002084:	2b00      	cmp	r3, #0
 8002086:	d04c      	beq.n	8002122 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	685b      	ldr	r3, [r3, #4]
 800208c:	2b03      	cmp	r3, #3
 800208e:	d107      	bne.n	80020a0 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002090:	4b56      	ldr	r3, [pc, #344]	; (80021ec <HAL_RCC_ClockConfig+0x1b4>)
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002098:	2b00      	cmp	r3, #0
 800209a:	d121      	bne.n	80020e0 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 800209c:	2301      	movs	r3, #1
 800209e:	e09e      	b.n	80021de <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	685b      	ldr	r3, [r3, #4]
 80020a4:	2b02      	cmp	r3, #2
 80020a6:	d107      	bne.n	80020b8 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80020a8:	4b50      	ldr	r3, [pc, #320]	; (80021ec <HAL_RCC_ClockConfig+0x1b4>)
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d115      	bne.n	80020e0 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80020b4:	2301      	movs	r3, #1
 80020b6:	e092      	b.n	80021de <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	685b      	ldr	r3, [r3, #4]
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d107      	bne.n	80020d0 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80020c0:	4b4a      	ldr	r3, [pc, #296]	; (80021ec <HAL_RCC_ClockConfig+0x1b4>)
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f003 0302 	and.w	r3, r3, #2
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d109      	bne.n	80020e0 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80020cc:	2301      	movs	r3, #1
 80020ce:	e086      	b.n	80021de <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80020d0:	4b46      	ldr	r3, [pc, #280]	; (80021ec <HAL_RCC_ClockConfig+0x1b4>)
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d101      	bne.n	80020e0 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80020dc:	2301      	movs	r3, #1
 80020de:	e07e      	b.n	80021de <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80020e0:	4b42      	ldr	r3, [pc, #264]	; (80021ec <HAL_RCC_ClockConfig+0x1b4>)
 80020e2:	689b      	ldr	r3, [r3, #8]
 80020e4:	f023 0203 	bic.w	r2, r3, #3
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	685b      	ldr	r3, [r3, #4]
 80020ec:	493f      	ldr	r1, [pc, #252]	; (80021ec <HAL_RCC_ClockConfig+0x1b4>)
 80020ee:	4313      	orrs	r3, r2
 80020f0:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80020f2:	f7fe fe4b 	bl	8000d8c <HAL_GetTick>
 80020f6:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020f8:	e00a      	b.n	8002110 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020fa:	f7fe fe47 	bl	8000d8c <HAL_GetTick>
 80020fe:	4602      	mov	r2, r0
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	1ad3      	subs	r3, r2, r3
 8002104:	f241 3288 	movw	r2, #5000	; 0x1388
 8002108:	4293      	cmp	r3, r2
 800210a:	d901      	bls.n	8002110 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 800210c:	2303      	movs	r3, #3
 800210e:	e066      	b.n	80021de <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002110:	4b36      	ldr	r3, [pc, #216]	; (80021ec <HAL_RCC_ClockConfig+0x1b4>)
 8002112:	689b      	ldr	r3, [r3, #8]
 8002114:	f003 020c 	and.w	r2, r3, #12
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	685b      	ldr	r3, [r3, #4]
 800211c:	009b      	lsls	r3, r3, #2
 800211e:	429a      	cmp	r2, r3
 8002120:	d1eb      	bne.n	80020fa <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f003 0302 	and.w	r3, r3, #2
 800212a:	2b00      	cmp	r3, #0
 800212c:	d008      	beq.n	8002140 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800212e:	4b2f      	ldr	r3, [pc, #188]	; (80021ec <HAL_RCC_ClockConfig+0x1b4>)
 8002130:	689b      	ldr	r3, [r3, #8]
 8002132:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	689b      	ldr	r3, [r3, #8]
 800213a:	492c      	ldr	r1, [pc, #176]	; (80021ec <HAL_RCC_ClockConfig+0x1b4>)
 800213c:	4313      	orrs	r3, r2
 800213e:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002140:	4b29      	ldr	r3, [pc, #164]	; (80021e8 <HAL_RCC_ClockConfig+0x1b0>)
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f003 0307 	and.w	r3, r3, #7
 8002148:	683a      	ldr	r2, [r7, #0]
 800214a:	429a      	cmp	r2, r3
 800214c:	d210      	bcs.n	8002170 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800214e:	4b26      	ldr	r3, [pc, #152]	; (80021e8 <HAL_RCC_ClockConfig+0x1b0>)
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f023 0207 	bic.w	r2, r3, #7
 8002156:	4924      	ldr	r1, [pc, #144]	; (80021e8 <HAL_RCC_ClockConfig+0x1b0>)
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	4313      	orrs	r3, r2
 800215c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800215e:	4b22      	ldr	r3, [pc, #136]	; (80021e8 <HAL_RCC_ClockConfig+0x1b0>)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f003 0307 	and.w	r3, r3, #7
 8002166:	683a      	ldr	r2, [r7, #0]
 8002168:	429a      	cmp	r2, r3
 800216a:	d001      	beq.n	8002170 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 800216c:	2301      	movs	r3, #1
 800216e:	e036      	b.n	80021de <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f003 0304 	and.w	r3, r3, #4
 8002178:	2b00      	cmp	r3, #0
 800217a:	d008      	beq.n	800218e <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800217c:	4b1b      	ldr	r3, [pc, #108]	; (80021ec <HAL_RCC_ClockConfig+0x1b4>)
 800217e:	689b      	ldr	r3, [r3, #8]
 8002180:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	68db      	ldr	r3, [r3, #12]
 8002188:	4918      	ldr	r1, [pc, #96]	; (80021ec <HAL_RCC_ClockConfig+0x1b4>)
 800218a:	4313      	orrs	r3, r2
 800218c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f003 0308 	and.w	r3, r3, #8
 8002196:	2b00      	cmp	r3, #0
 8002198:	d009      	beq.n	80021ae <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800219a:	4b14      	ldr	r3, [pc, #80]	; (80021ec <HAL_RCC_ClockConfig+0x1b4>)
 800219c:	689b      	ldr	r3, [r3, #8]
 800219e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	691b      	ldr	r3, [r3, #16]
 80021a6:	00db      	lsls	r3, r3, #3
 80021a8:	4910      	ldr	r1, [pc, #64]	; (80021ec <HAL_RCC_ClockConfig+0x1b4>)
 80021aa:	4313      	orrs	r3, r2
 80021ac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80021ae:	f000 f825 	bl	80021fc <HAL_RCC_GetSysClockFreq>
 80021b2:	4602      	mov	r2, r0
 80021b4:	4b0d      	ldr	r3, [pc, #52]	; (80021ec <HAL_RCC_ClockConfig+0x1b4>)
 80021b6:	689b      	ldr	r3, [r3, #8]
 80021b8:	091b      	lsrs	r3, r3, #4
 80021ba:	f003 030f 	and.w	r3, r3, #15
 80021be:	490c      	ldr	r1, [pc, #48]	; (80021f0 <HAL_RCC_ClockConfig+0x1b8>)
 80021c0:	5ccb      	ldrb	r3, [r1, r3]
 80021c2:	f003 031f 	and.w	r3, r3, #31
 80021c6:	fa22 f303 	lsr.w	r3, r2, r3
 80021ca:	4a0a      	ldr	r2, [pc, #40]	; (80021f4 <HAL_RCC_ClockConfig+0x1bc>)
 80021cc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80021ce:	4b0a      	ldr	r3, [pc, #40]	; (80021f8 <HAL_RCC_ClockConfig+0x1c0>)
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	4618      	mov	r0, r3
 80021d4:	f7fe fd8a 	bl	8000cec <HAL_InitTick>
 80021d8:	4603      	mov	r3, r0
 80021da:	72fb      	strb	r3, [r7, #11]

  return status;
 80021dc:	7afb      	ldrb	r3, [r7, #11]
}
 80021de:	4618      	mov	r0, r3
 80021e0:	3710      	adds	r7, #16
 80021e2:	46bd      	mov	sp, r7
 80021e4:	bd80      	pop	{r7, pc}
 80021e6:	bf00      	nop
 80021e8:	40022000 	.word	0x40022000
 80021ec:	40021000 	.word	0x40021000
 80021f0:	08003f08 	.word	0x08003f08
 80021f4:	20000054 	.word	0x20000054
 80021f8:	20000058 	.word	0x20000058

080021fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80021fc:	b480      	push	{r7}
 80021fe:	b089      	sub	sp, #36	; 0x24
 8002200:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002202:	2300      	movs	r3, #0
 8002204:	61fb      	str	r3, [r7, #28]
 8002206:	2300      	movs	r3, #0
 8002208:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800220a:	4b3e      	ldr	r3, [pc, #248]	; (8002304 <HAL_RCC_GetSysClockFreq+0x108>)
 800220c:	689b      	ldr	r3, [r3, #8]
 800220e:	f003 030c 	and.w	r3, r3, #12
 8002212:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002214:	4b3b      	ldr	r3, [pc, #236]	; (8002304 <HAL_RCC_GetSysClockFreq+0x108>)
 8002216:	68db      	ldr	r3, [r3, #12]
 8002218:	f003 0303 	and.w	r3, r3, #3
 800221c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800221e:	693b      	ldr	r3, [r7, #16]
 8002220:	2b00      	cmp	r3, #0
 8002222:	d005      	beq.n	8002230 <HAL_RCC_GetSysClockFreq+0x34>
 8002224:	693b      	ldr	r3, [r7, #16]
 8002226:	2b0c      	cmp	r3, #12
 8002228:	d121      	bne.n	800226e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	2b01      	cmp	r3, #1
 800222e:	d11e      	bne.n	800226e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002230:	4b34      	ldr	r3, [pc, #208]	; (8002304 <HAL_RCC_GetSysClockFreq+0x108>)
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f003 0308 	and.w	r3, r3, #8
 8002238:	2b00      	cmp	r3, #0
 800223a:	d107      	bne.n	800224c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800223c:	4b31      	ldr	r3, [pc, #196]	; (8002304 <HAL_RCC_GetSysClockFreq+0x108>)
 800223e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002242:	0a1b      	lsrs	r3, r3, #8
 8002244:	f003 030f 	and.w	r3, r3, #15
 8002248:	61fb      	str	r3, [r7, #28]
 800224a:	e005      	b.n	8002258 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800224c:	4b2d      	ldr	r3, [pc, #180]	; (8002304 <HAL_RCC_GetSysClockFreq+0x108>)
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	091b      	lsrs	r3, r3, #4
 8002252:	f003 030f 	and.w	r3, r3, #15
 8002256:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002258:	4a2b      	ldr	r2, [pc, #172]	; (8002308 <HAL_RCC_GetSysClockFreq+0x10c>)
 800225a:	69fb      	ldr	r3, [r7, #28]
 800225c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002260:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002262:	693b      	ldr	r3, [r7, #16]
 8002264:	2b00      	cmp	r3, #0
 8002266:	d10d      	bne.n	8002284 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002268:	69fb      	ldr	r3, [r7, #28]
 800226a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800226c:	e00a      	b.n	8002284 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800226e:	693b      	ldr	r3, [r7, #16]
 8002270:	2b04      	cmp	r3, #4
 8002272:	d102      	bne.n	800227a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002274:	4b25      	ldr	r3, [pc, #148]	; (800230c <HAL_RCC_GetSysClockFreq+0x110>)
 8002276:	61bb      	str	r3, [r7, #24]
 8002278:	e004      	b.n	8002284 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800227a:	693b      	ldr	r3, [r7, #16]
 800227c:	2b08      	cmp	r3, #8
 800227e:	d101      	bne.n	8002284 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002280:	4b23      	ldr	r3, [pc, #140]	; (8002310 <HAL_RCC_GetSysClockFreq+0x114>)
 8002282:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002284:	693b      	ldr	r3, [r7, #16]
 8002286:	2b0c      	cmp	r3, #12
 8002288:	d134      	bne.n	80022f4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800228a:	4b1e      	ldr	r3, [pc, #120]	; (8002304 <HAL_RCC_GetSysClockFreq+0x108>)
 800228c:	68db      	ldr	r3, [r3, #12]
 800228e:	f003 0303 	and.w	r3, r3, #3
 8002292:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002294:	68bb      	ldr	r3, [r7, #8]
 8002296:	2b02      	cmp	r3, #2
 8002298:	d003      	beq.n	80022a2 <HAL_RCC_GetSysClockFreq+0xa6>
 800229a:	68bb      	ldr	r3, [r7, #8]
 800229c:	2b03      	cmp	r3, #3
 800229e:	d003      	beq.n	80022a8 <HAL_RCC_GetSysClockFreq+0xac>
 80022a0:	e005      	b.n	80022ae <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80022a2:	4b1a      	ldr	r3, [pc, #104]	; (800230c <HAL_RCC_GetSysClockFreq+0x110>)
 80022a4:	617b      	str	r3, [r7, #20]
      break;
 80022a6:	e005      	b.n	80022b4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80022a8:	4b19      	ldr	r3, [pc, #100]	; (8002310 <HAL_RCC_GetSysClockFreq+0x114>)
 80022aa:	617b      	str	r3, [r7, #20]
      break;
 80022ac:	e002      	b.n	80022b4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80022ae:	69fb      	ldr	r3, [r7, #28]
 80022b0:	617b      	str	r3, [r7, #20]
      break;
 80022b2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80022b4:	4b13      	ldr	r3, [pc, #76]	; (8002304 <HAL_RCC_GetSysClockFreq+0x108>)
 80022b6:	68db      	ldr	r3, [r3, #12]
 80022b8:	091b      	lsrs	r3, r3, #4
 80022ba:	f003 0307 	and.w	r3, r3, #7
 80022be:	3301      	adds	r3, #1
 80022c0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80022c2:	4b10      	ldr	r3, [pc, #64]	; (8002304 <HAL_RCC_GetSysClockFreq+0x108>)
 80022c4:	68db      	ldr	r3, [r3, #12]
 80022c6:	0a1b      	lsrs	r3, r3, #8
 80022c8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80022cc:	697a      	ldr	r2, [r7, #20]
 80022ce:	fb02 f203 	mul.w	r2, r2, r3
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80022d8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80022da:	4b0a      	ldr	r3, [pc, #40]	; (8002304 <HAL_RCC_GetSysClockFreq+0x108>)
 80022dc:	68db      	ldr	r3, [r3, #12]
 80022de:	0e5b      	lsrs	r3, r3, #25
 80022e0:	f003 0303 	and.w	r3, r3, #3
 80022e4:	3301      	adds	r3, #1
 80022e6:	005b      	lsls	r3, r3, #1
 80022e8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80022ea:	697a      	ldr	r2, [r7, #20]
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80022f2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80022f4:	69bb      	ldr	r3, [r7, #24]
}
 80022f6:	4618      	mov	r0, r3
 80022f8:	3724      	adds	r7, #36	; 0x24
 80022fa:	46bd      	mov	sp, r7
 80022fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002300:	4770      	bx	lr
 8002302:	bf00      	nop
 8002304:	40021000 	.word	0x40021000
 8002308:	08003f20 	.word	0x08003f20
 800230c:	00f42400 	.word	0x00f42400
 8002310:	007a1200 	.word	0x007a1200

08002314 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002314:	b480      	push	{r7}
 8002316:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002318:	4b03      	ldr	r3, [pc, #12]	; (8002328 <HAL_RCC_GetHCLKFreq+0x14>)
 800231a:	681b      	ldr	r3, [r3, #0]
}
 800231c:	4618      	mov	r0, r3
 800231e:	46bd      	mov	sp, r7
 8002320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002324:	4770      	bx	lr
 8002326:	bf00      	nop
 8002328:	20000054 	.word	0x20000054

0800232c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002330:	f7ff fff0 	bl	8002314 <HAL_RCC_GetHCLKFreq>
 8002334:	4602      	mov	r2, r0
 8002336:	4b06      	ldr	r3, [pc, #24]	; (8002350 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002338:	689b      	ldr	r3, [r3, #8]
 800233a:	0a1b      	lsrs	r3, r3, #8
 800233c:	f003 0307 	and.w	r3, r3, #7
 8002340:	4904      	ldr	r1, [pc, #16]	; (8002354 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002342:	5ccb      	ldrb	r3, [r1, r3]
 8002344:	f003 031f 	and.w	r3, r3, #31
 8002348:	fa22 f303 	lsr.w	r3, r2, r3
}
 800234c:	4618      	mov	r0, r3
 800234e:	bd80      	pop	{r7, pc}
 8002350:	40021000 	.word	0x40021000
 8002354:	08003f18 	.word	0x08003f18

08002358 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800235c:	f7ff ffda 	bl	8002314 <HAL_RCC_GetHCLKFreq>
 8002360:	4602      	mov	r2, r0
 8002362:	4b06      	ldr	r3, [pc, #24]	; (800237c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002364:	689b      	ldr	r3, [r3, #8]
 8002366:	0adb      	lsrs	r3, r3, #11
 8002368:	f003 0307 	and.w	r3, r3, #7
 800236c:	4904      	ldr	r1, [pc, #16]	; (8002380 <HAL_RCC_GetPCLK2Freq+0x28>)
 800236e:	5ccb      	ldrb	r3, [r1, r3]
 8002370:	f003 031f 	and.w	r3, r3, #31
 8002374:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002378:	4618      	mov	r0, r3
 800237a:	bd80      	pop	{r7, pc}
 800237c:	40021000 	.word	0x40021000
 8002380:	08003f18 	.word	0x08003f18

08002384 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	b086      	sub	sp, #24
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800238c:	2300      	movs	r3, #0
 800238e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002390:	4b2a      	ldr	r3, [pc, #168]	; (800243c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002392:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002394:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002398:	2b00      	cmp	r3, #0
 800239a:	d003      	beq.n	80023a4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800239c:	f7ff fa02 	bl	80017a4 <HAL_PWREx_GetVoltageRange>
 80023a0:	6178      	str	r0, [r7, #20]
 80023a2:	e014      	b.n	80023ce <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80023a4:	4b25      	ldr	r3, [pc, #148]	; (800243c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80023a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023a8:	4a24      	ldr	r2, [pc, #144]	; (800243c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80023aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023ae:	6593      	str	r3, [r2, #88]	; 0x58
 80023b0:	4b22      	ldr	r3, [pc, #136]	; (800243c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80023b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023b8:	60fb      	str	r3, [r7, #12]
 80023ba:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80023bc:	f7ff f9f2 	bl	80017a4 <HAL_PWREx_GetVoltageRange>
 80023c0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80023c2:	4b1e      	ldr	r3, [pc, #120]	; (800243c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80023c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023c6:	4a1d      	ldr	r2, [pc, #116]	; (800243c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80023c8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80023cc:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80023ce:	697b      	ldr	r3, [r7, #20]
 80023d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80023d4:	d10b      	bne.n	80023ee <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	2b80      	cmp	r3, #128	; 0x80
 80023da:	d919      	bls.n	8002410 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	2ba0      	cmp	r3, #160	; 0xa0
 80023e0:	d902      	bls.n	80023e8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80023e2:	2302      	movs	r3, #2
 80023e4:	613b      	str	r3, [r7, #16]
 80023e6:	e013      	b.n	8002410 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80023e8:	2301      	movs	r3, #1
 80023ea:	613b      	str	r3, [r7, #16]
 80023ec:	e010      	b.n	8002410 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	2b80      	cmp	r3, #128	; 0x80
 80023f2:	d902      	bls.n	80023fa <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80023f4:	2303      	movs	r3, #3
 80023f6:	613b      	str	r3, [r7, #16]
 80023f8:	e00a      	b.n	8002410 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	2b80      	cmp	r3, #128	; 0x80
 80023fe:	d102      	bne.n	8002406 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002400:	2302      	movs	r3, #2
 8002402:	613b      	str	r3, [r7, #16]
 8002404:	e004      	b.n	8002410 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	2b70      	cmp	r3, #112	; 0x70
 800240a:	d101      	bne.n	8002410 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800240c:	2301      	movs	r3, #1
 800240e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002410:	4b0b      	ldr	r3, [pc, #44]	; (8002440 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f023 0207 	bic.w	r2, r3, #7
 8002418:	4909      	ldr	r1, [pc, #36]	; (8002440 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800241a:	693b      	ldr	r3, [r7, #16]
 800241c:	4313      	orrs	r3, r2
 800241e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002420:	4b07      	ldr	r3, [pc, #28]	; (8002440 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f003 0307 	and.w	r3, r3, #7
 8002428:	693a      	ldr	r2, [r7, #16]
 800242a:	429a      	cmp	r2, r3
 800242c:	d001      	beq.n	8002432 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800242e:	2301      	movs	r3, #1
 8002430:	e000      	b.n	8002434 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002432:	2300      	movs	r3, #0
}
 8002434:	4618      	mov	r0, r3
 8002436:	3718      	adds	r7, #24
 8002438:	46bd      	mov	sp, r7
 800243a:	bd80      	pop	{r7, pc}
 800243c:	40021000 	.word	0x40021000
 8002440:	40022000 	.word	0x40022000

08002444 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	b086      	sub	sp, #24
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800244c:	2300      	movs	r3, #0
 800244e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002450:	2300      	movs	r3, #0
 8002452:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800245c:	2b00      	cmp	r3, #0
 800245e:	d041      	beq.n	80024e4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002464:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002468:	d02a      	beq.n	80024c0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800246a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800246e:	d824      	bhi.n	80024ba <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002470:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002474:	d008      	beq.n	8002488 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002476:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800247a:	d81e      	bhi.n	80024ba <HAL_RCCEx_PeriphCLKConfig+0x76>
 800247c:	2b00      	cmp	r3, #0
 800247e:	d00a      	beq.n	8002496 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002480:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002484:	d010      	beq.n	80024a8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002486:	e018      	b.n	80024ba <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002488:	4b86      	ldr	r3, [pc, #536]	; (80026a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800248a:	68db      	ldr	r3, [r3, #12]
 800248c:	4a85      	ldr	r2, [pc, #532]	; (80026a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800248e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002492:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002494:	e015      	b.n	80024c2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	3304      	adds	r3, #4
 800249a:	2100      	movs	r1, #0
 800249c:	4618      	mov	r0, r3
 800249e:	f000 fabb 	bl	8002a18 <RCCEx_PLLSAI1_Config>
 80024a2:	4603      	mov	r3, r0
 80024a4:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80024a6:	e00c      	b.n	80024c2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	3320      	adds	r3, #32
 80024ac:	2100      	movs	r1, #0
 80024ae:	4618      	mov	r0, r3
 80024b0:	f000 fba6 	bl	8002c00 <RCCEx_PLLSAI2_Config>
 80024b4:	4603      	mov	r3, r0
 80024b6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80024b8:	e003      	b.n	80024c2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80024ba:	2301      	movs	r3, #1
 80024bc:	74fb      	strb	r3, [r7, #19]
      break;
 80024be:	e000      	b.n	80024c2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80024c0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80024c2:	7cfb      	ldrb	r3, [r7, #19]
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d10b      	bne.n	80024e0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80024c8:	4b76      	ldr	r3, [pc, #472]	; (80026a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024ce:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80024d6:	4973      	ldr	r1, [pc, #460]	; (80026a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024d8:	4313      	orrs	r3, r2
 80024da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80024de:	e001      	b.n	80024e4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80024e0:	7cfb      	ldrb	r3, [r7, #19]
 80024e2:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d041      	beq.n	8002574 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80024f4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80024f8:	d02a      	beq.n	8002550 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80024fa:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80024fe:	d824      	bhi.n	800254a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002500:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002504:	d008      	beq.n	8002518 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002506:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800250a:	d81e      	bhi.n	800254a <HAL_RCCEx_PeriphCLKConfig+0x106>
 800250c:	2b00      	cmp	r3, #0
 800250e:	d00a      	beq.n	8002526 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002510:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002514:	d010      	beq.n	8002538 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002516:	e018      	b.n	800254a <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002518:	4b62      	ldr	r3, [pc, #392]	; (80026a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800251a:	68db      	ldr	r3, [r3, #12]
 800251c:	4a61      	ldr	r2, [pc, #388]	; (80026a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800251e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002522:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002524:	e015      	b.n	8002552 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	3304      	adds	r3, #4
 800252a:	2100      	movs	r1, #0
 800252c:	4618      	mov	r0, r3
 800252e:	f000 fa73 	bl	8002a18 <RCCEx_PLLSAI1_Config>
 8002532:	4603      	mov	r3, r0
 8002534:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002536:	e00c      	b.n	8002552 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	3320      	adds	r3, #32
 800253c:	2100      	movs	r1, #0
 800253e:	4618      	mov	r0, r3
 8002540:	f000 fb5e 	bl	8002c00 <RCCEx_PLLSAI2_Config>
 8002544:	4603      	mov	r3, r0
 8002546:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002548:	e003      	b.n	8002552 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800254a:	2301      	movs	r3, #1
 800254c:	74fb      	strb	r3, [r7, #19]
      break;
 800254e:	e000      	b.n	8002552 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002550:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002552:	7cfb      	ldrb	r3, [r7, #19]
 8002554:	2b00      	cmp	r3, #0
 8002556:	d10b      	bne.n	8002570 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002558:	4b52      	ldr	r3, [pc, #328]	; (80026a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800255a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800255e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002566:	494f      	ldr	r1, [pc, #316]	; (80026a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002568:	4313      	orrs	r3, r2
 800256a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800256e:	e001      	b.n	8002574 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002570:	7cfb      	ldrb	r3, [r7, #19]
 8002572:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800257c:	2b00      	cmp	r3, #0
 800257e:	f000 80a0 	beq.w	80026c2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002582:	2300      	movs	r3, #0
 8002584:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002586:	4b47      	ldr	r3, [pc, #284]	; (80026a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002588:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800258a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800258e:	2b00      	cmp	r3, #0
 8002590:	d101      	bne.n	8002596 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8002592:	2301      	movs	r3, #1
 8002594:	e000      	b.n	8002598 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8002596:	2300      	movs	r3, #0
 8002598:	2b00      	cmp	r3, #0
 800259a:	d00d      	beq.n	80025b8 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800259c:	4b41      	ldr	r3, [pc, #260]	; (80026a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800259e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025a0:	4a40      	ldr	r2, [pc, #256]	; (80026a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025a6:	6593      	str	r3, [r2, #88]	; 0x58
 80025a8:	4b3e      	ldr	r3, [pc, #248]	; (80026a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025b0:	60bb      	str	r3, [r7, #8]
 80025b2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80025b4:	2301      	movs	r3, #1
 80025b6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80025b8:	4b3b      	ldr	r3, [pc, #236]	; (80026a8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	4a3a      	ldr	r2, [pc, #232]	; (80026a8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80025be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025c2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80025c4:	f7fe fbe2 	bl	8000d8c <HAL_GetTick>
 80025c8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80025ca:	e009      	b.n	80025e0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025cc:	f7fe fbde 	bl	8000d8c <HAL_GetTick>
 80025d0:	4602      	mov	r2, r0
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	1ad3      	subs	r3, r2, r3
 80025d6:	2b02      	cmp	r3, #2
 80025d8:	d902      	bls.n	80025e0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80025da:	2303      	movs	r3, #3
 80025dc:	74fb      	strb	r3, [r7, #19]
        break;
 80025de:	e005      	b.n	80025ec <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80025e0:	4b31      	ldr	r3, [pc, #196]	; (80026a8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d0ef      	beq.n	80025cc <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80025ec:	7cfb      	ldrb	r3, [r7, #19]
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d15c      	bne.n	80026ac <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80025f2:	4b2c      	ldr	r3, [pc, #176]	; (80026a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025f8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80025fc:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80025fe:	697b      	ldr	r3, [r7, #20]
 8002600:	2b00      	cmp	r3, #0
 8002602:	d01f      	beq.n	8002644 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800260a:	697a      	ldr	r2, [r7, #20]
 800260c:	429a      	cmp	r2, r3
 800260e:	d019      	beq.n	8002644 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002610:	4b24      	ldr	r3, [pc, #144]	; (80026a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002612:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002616:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800261a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800261c:	4b21      	ldr	r3, [pc, #132]	; (80026a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800261e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002622:	4a20      	ldr	r2, [pc, #128]	; (80026a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002624:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002628:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800262c:	4b1d      	ldr	r3, [pc, #116]	; (80026a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800262e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002632:	4a1c      	ldr	r2, [pc, #112]	; (80026a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002634:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002638:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800263c:	4a19      	ldr	r2, [pc, #100]	; (80026a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800263e:	697b      	ldr	r3, [r7, #20]
 8002640:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002644:	697b      	ldr	r3, [r7, #20]
 8002646:	f003 0301 	and.w	r3, r3, #1
 800264a:	2b00      	cmp	r3, #0
 800264c:	d016      	beq.n	800267c <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800264e:	f7fe fb9d 	bl	8000d8c <HAL_GetTick>
 8002652:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002654:	e00b      	b.n	800266e <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002656:	f7fe fb99 	bl	8000d8c <HAL_GetTick>
 800265a:	4602      	mov	r2, r0
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	1ad3      	subs	r3, r2, r3
 8002660:	f241 3288 	movw	r2, #5000	; 0x1388
 8002664:	4293      	cmp	r3, r2
 8002666:	d902      	bls.n	800266e <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002668:	2303      	movs	r3, #3
 800266a:	74fb      	strb	r3, [r7, #19]
            break;
 800266c:	e006      	b.n	800267c <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800266e:	4b0d      	ldr	r3, [pc, #52]	; (80026a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002670:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002674:	f003 0302 	and.w	r3, r3, #2
 8002678:	2b00      	cmp	r3, #0
 800267a:	d0ec      	beq.n	8002656 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 800267c:	7cfb      	ldrb	r3, [r7, #19]
 800267e:	2b00      	cmp	r3, #0
 8002680:	d10c      	bne.n	800269c <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002682:	4b08      	ldr	r3, [pc, #32]	; (80026a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002684:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002688:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002692:	4904      	ldr	r1, [pc, #16]	; (80026a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002694:	4313      	orrs	r3, r2
 8002696:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800269a:	e009      	b.n	80026b0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800269c:	7cfb      	ldrb	r3, [r7, #19]
 800269e:	74bb      	strb	r3, [r7, #18]
 80026a0:	e006      	b.n	80026b0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80026a2:	bf00      	nop
 80026a4:	40021000 	.word	0x40021000
 80026a8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80026ac:	7cfb      	ldrb	r3, [r7, #19]
 80026ae:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80026b0:	7c7b      	ldrb	r3, [r7, #17]
 80026b2:	2b01      	cmp	r3, #1
 80026b4:	d105      	bne.n	80026c2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80026b6:	4b9e      	ldr	r3, [pc, #632]	; (8002930 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026ba:	4a9d      	ldr	r2, [pc, #628]	; (8002930 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026bc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80026c0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f003 0301 	and.w	r3, r3, #1
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d00a      	beq.n	80026e4 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80026ce:	4b98      	ldr	r3, [pc, #608]	; (8002930 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026d4:	f023 0203 	bic.w	r2, r3, #3
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026dc:	4994      	ldr	r1, [pc, #592]	; (8002930 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026de:	4313      	orrs	r3, r2
 80026e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f003 0302 	and.w	r3, r3, #2
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d00a      	beq.n	8002706 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80026f0:	4b8f      	ldr	r3, [pc, #572]	; (8002930 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026f6:	f023 020c 	bic.w	r2, r3, #12
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026fe:	498c      	ldr	r1, [pc, #560]	; (8002930 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002700:	4313      	orrs	r3, r2
 8002702:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f003 0304 	and.w	r3, r3, #4
 800270e:	2b00      	cmp	r3, #0
 8002710:	d00a      	beq.n	8002728 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002712:	4b87      	ldr	r3, [pc, #540]	; (8002930 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002714:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002718:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002720:	4983      	ldr	r1, [pc, #524]	; (8002930 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002722:	4313      	orrs	r3, r2
 8002724:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f003 0308 	and.w	r3, r3, #8
 8002730:	2b00      	cmp	r3, #0
 8002732:	d00a      	beq.n	800274a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002734:	4b7e      	ldr	r3, [pc, #504]	; (8002930 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002736:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800273a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002742:	497b      	ldr	r1, [pc, #492]	; (8002930 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002744:	4313      	orrs	r3, r2
 8002746:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f003 0310 	and.w	r3, r3, #16
 8002752:	2b00      	cmp	r3, #0
 8002754:	d00a      	beq.n	800276c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002756:	4b76      	ldr	r3, [pc, #472]	; (8002930 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002758:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800275c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002764:	4972      	ldr	r1, [pc, #456]	; (8002930 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002766:	4313      	orrs	r3, r2
 8002768:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f003 0320 	and.w	r3, r3, #32
 8002774:	2b00      	cmp	r3, #0
 8002776:	d00a      	beq.n	800278e <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002778:	4b6d      	ldr	r3, [pc, #436]	; (8002930 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800277a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800277e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002786:	496a      	ldr	r1, [pc, #424]	; (8002930 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002788:	4313      	orrs	r3, r2
 800278a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002796:	2b00      	cmp	r3, #0
 8002798:	d00a      	beq.n	80027b0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800279a:	4b65      	ldr	r3, [pc, #404]	; (8002930 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800279c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027a0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027a8:	4961      	ldr	r1, [pc, #388]	; (8002930 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027aa:	4313      	orrs	r3, r2
 80027ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d00a      	beq.n	80027d2 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80027bc:	4b5c      	ldr	r3, [pc, #368]	; (8002930 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027c2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80027ca:	4959      	ldr	r1, [pc, #356]	; (8002930 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027cc:	4313      	orrs	r3, r2
 80027ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d00a      	beq.n	80027f4 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80027de:	4b54      	ldr	r3, [pc, #336]	; (8002930 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027e4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80027ec:	4950      	ldr	r1, [pc, #320]	; (8002930 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027ee:	4313      	orrs	r3, r2
 80027f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d00a      	beq.n	8002816 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002800:	4b4b      	ldr	r3, [pc, #300]	; (8002930 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002802:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002806:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800280e:	4948      	ldr	r1, [pc, #288]	; (8002930 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002810:	4313      	orrs	r3, r2
 8002812:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800281e:	2b00      	cmp	r3, #0
 8002820:	d00a      	beq.n	8002838 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002822:	4b43      	ldr	r3, [pc, #268]	; (8002930 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002824:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002828:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002830:	493f      	ldr	r1, [pc, #252]	; (8002930 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002832:	4313      	orrs	r3, r2
 8002834:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002840:	2b00      	cmp	r3, #0
 8002842:	d028      	beq.n	8002896 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002844:	4b3a      	ldr	r3, [pc, #232]	; (8002930 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002846:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800284a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002852:	4937      	ldr	r1, [pc, #220]	; (8002930 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002854:	4313      	orrs	r3, r2
 8002856:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800285e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002862:	d106      	bne.n	8002872 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002864:	4b32      	ldr	r3, [pc, #200]	; (8002930 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002866:	68db      	ldr	r3, [r3, #12]
 8002868:	4a31      	ldr	r2, [pc, #196]	; (8002930 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800286a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800286e:	60d3      	str	r3, [r2, #12]
 8002870:	e011      	b.n	8002896 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002876:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800287a:	d10c      	bne.n	8002896 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	3304      	adds	r3, #4
 8002880:	2101      	movs	r1, #1
 8002882:	4618      	mov	r0, r3
 8002884:	f000 f8c8 	bl	8002a18 <RCCEx_PLLSAI1_Config>
 8002888:	4603      	mov	r3, r0
 800288a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800288c:	7cfb      	ldrb	r3, [r7, #19]
 800288e:	2b00      	cmp	r3, #0
 8002890:	d001      	beq.n	8002896 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8002892:	7cfb      	ldrb	r3, [r7, #19]
 8002894:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d028      	beq.n	80028f4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80028a2:	4b23      	ldr	r3, [pc, #140]	; (8002930 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028a8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028b0:	491f      	ldr	r1, [pc, #124]	; (8002930 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028b2:	4313      	orrs	r3, r2
 80028b4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028bc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80028c0:	d106      	bne.n	80028d0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80028c2:	4b1b      	ldr	r3, [pc, #108]	; (8002930 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028c4:	68db      	ldr	r3, [r3, #12]
 80028c6:	4a1a      	ldr	r2, [pc, #104]	; (8002930 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028c8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80028cc:	60d3      	str	r3, [r2, #12]
 80028ce:	e011      	b.n	80028f4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028d4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80028d8:	d10c      	bne.n	80028f4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	3304      	adds	r3, #4
 80028de:	2101      	movs	r1, #1
 80028e0:	4618      	mov	r0, r3
 80028e2:	f000 f899 	bl	8002a18 <RCCEx_PLLSAI1_Config>
 80028e6:	4603      	mov	r3, r0
 80028e8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80028ea:	7cfb      	ldrb	r3, [r7, #19]
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d001      	beq.n	80028f4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80028f0:	7cfb      	ldrb	r3, [r7, #19]
 80028f2:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d02b      	beq.n	8002958 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002900:	4b0b      	ldr	r3, [pc, #44]	; (8002930 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002902:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002906:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800290e:	4908      	ldr	r1, [pc, #32]	; (8002930 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002910:	4313      	orrs	r3, r2
 8002912:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800291a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800291e:	d109      	bne.n	8002934 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002920:	4b03      	ldr	r3, [pc, #12]	; (8002930 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002922:	68db      	ldr	r3, [r3, #12]
 8002924:	4a02      	ldr	r2, [pc, #8]	; (8002930 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002926:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800292a:	60d3      	str	r3, [r2, #12]
 800292c:	e014      	b.n	8002958 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800292e:	bf00      	nop
 8002930:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002938:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800293c:	d10c      	bne.n	8002958 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	3304      	adds	r3, #4
 8002942:	2101      	movs	r1, #1
 8002944:	4618      	mov	r0, r3
 8002946:	f000 f867 	bl	8002a18 <RCCEx_PLLSAI1_Config>
 800294a:	4603      	mov	r3, r0
 800294c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800294e:	7cfb      	ldrb	r3, [r7, #19]
 8002950:	2b00      	cmp	r3, #0
 8002952:	d001      	beq.n	8002958 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002954:	7cfb      	ldrb	r3, [r7, #19]
 8002956:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002960:	2b00      	cmp	r3, #0
 8002962:	d02f      	beq.n	80029c4 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002964:	4b2b      	ldr	r3, [pc, #172]	; (8002a14 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002966:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800296a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002972:	4928      	ldr	r1, [pc, #160]	; (8002a14 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002974:	4313      	orrs	r3, r2
 8002976:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800297e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002982:	d10d      	bne.n	80029a0 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	3304      	adds	r3, #4
 8002988:	2102      	movs	r1, #2
 800298a:	4618      	mov	r0, r3
 800298c:	f000 f844 	bl	8002a18 <RCCEx_PLLSAI1_Config>
 8002990:	4603      	mov	r3, r0
 8002992:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002994:	7cfb      	ldrb	r3, [r7, #19]
 8002996:	2b00      	cmp	r3, #0
 8002998:	d014      	beq.n	80029c4 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800299a:	7cfb      	ldrb	r3, [r7, #19]
 800299c:	74bb      	strb	r3, [r7, #18]
 800299e:	e011      	b.n	80029c4 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80029a4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80029a8:	d10c      	bne.n	80029c4 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	3320      	adds	r3, #32
 80029ae:	2102      	movs	r1, #2
 80029b0:	4618      	mov	r0, r3
 80029b2:	f000 f925 	bl	8002c00 <RCCEx_PLLSAI2_Config>
 80029b6:	4603      	mov	r3, r0
 80029b8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80029ba:	7cfb      	ldrb	r3, [r7, #19]
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d001      	beq.n	80029c4 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80029c0:	7cfb      	ldrb	r3, [r7, #19]
 80029c2:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d00a      	beq.n	80029e6 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80029d0:	4b10      	ldr	r3, [pc, #64]	; (8002a14 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80029d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029d6:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80029de:	490d      	ldr	r1, [pc, #52]	; (8002a14 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80029e0:	4313      	orrs	r3, r2
 80029e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d00b      	beq.n	8002a0a <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80029f2:	4b08      	ldr	r3, [pc, #32]	; (8002a14 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80029f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029f8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002a02:	4904      	ldr	r1, [pc, #16]	; (8002a14 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002a04:	4313      	orrs	r3, r2
 8002a06:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002a0a:	7cbb      	ldrb	r3, [r7, #18]
}
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	3718      	adds	r7, #24
 8002a10:	46bd      	mov	sp, r7
 8002a12:	bd80      	pop	{r7, pc}
 8002a14:	40021000 	.word	0x40021000

08002a18 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b084      	sub	sp, #16
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
 8002a20:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002a22:	2300      	movs	r3, #0
 8002a24:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002a26:	4b75      	ldr	r3, [pc, #468]	; (8002bfc <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a28:	68db      	ldr	r3, [r3, #12]
 8002a2a:	f003 0303 	and.w	r3, r3, #3
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d018      	beq.n	8002a64 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002a32:	4b72      	ldr	r3, [pc, #456]	; (8002bfc <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a34:	68db      	ldr	r3, [r3, #12]
 8002a36:	f003 0203 	and.w	r2, r3, #3
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	429a      	cmp	r2, r3
 8002a40:	d10d      	bne.n	8002a5e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
       ||
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d009      	beq.n	8002a5e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002a4a:	4b6c      	ldr	r3, [pc, #432]	; (8002bfc <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a4c:	68db      	ldr	r3, [r3, #12]
 8002a4e:	091b      	lsrs	r3, r3, #4
 8002a50:	f003 0307 	and.w	r3, r3, #7
 8002a54:	1c5a      	adds	r2, r3, #1
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	685b      	ldr	r3, [r3, #4]
       ||
 8002a5a:	429a      	cmp	r2, r3
 8002a5c:	d047      	beq.n	8002aee <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002a5e:	2301      	movs	r3, #1
 8002a60:	73fb      	strb	r3, [r7, #15]
 8002a62:	e044      	b.n	8002aee <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	2b03      	cmp	r3, #3
 8002a6a:	d018      	beq.n	8002a9e <RCCEx_PLLSAI1_Config+0x86>
 8002a6c:	2b03      	cmp	r3, #3
 8002a6e:	d825      	bhi.n	8002abc <RCCEx_PLLSAI1_Config+0xa4>
 8002a70:	2b01      	cmp	r3, #1
 8002a72:	d002      	beq.n	8002a7a <RCCEx_PLLSAI1_Config+0x62>
 8002a74:	2b02      	cmp	r3, #2
 8002a76:	d009      	beq.n	8002a8c <RCCEx_PLLSAI1_Config+0x74>
 8002a78:	e020      	b.n	8002abc <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002a7a:	4b60      	ldr	r3, [pc, #384]	; (8002bfc <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f003 0302 	and.w	r3, r3, #2
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d11d      	bne.n	8002ac2 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002a86:	2301      	movs	r3, #1
 8002a88:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a8a:	e01a      	b.n	8002ac2 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002a8c:	4b5b      	ldr	r3, [pc, #364]	; (8002bfc <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d116      	bne.n	8002ac6 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002a98:	2301      	movs	r3, #1
 8002a9a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a9c:	e013      	b.n	8002ac6 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002a9e:	4b57      	ldr	r3, [pc, #348]	; (8002bfc <RCCEx_PLLSAI1_Config+0x1e4>)
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d10f      	bne.n	8002aca <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002aaa:	4b54      	ldr	r3, [pc, #336]	; (8002bfc <RCCEx_PLLSAI1_Config+0x1e4>)
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d109      	bne.n	8002aca <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002ab6:	2301      	movs	r3, #1
 8002ab8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002aba:	e006      	b.n	8002aca <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002abc:	2301      	movs	r3, #1
 8002abe:	73fb      	strb	r3, [r7, #15]
      break;
 8002ac0:	e004      	b.n	8002acc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002ac2:	bf00      	nop
 8002ac4:	e002      	b.n	8002acc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002ac6:	bf00      	nop
 8002ac8:	e000      	b.n	8002acc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002aca:	bf00      	nop
    }

    if(status == HAL_OK)
 8002acc:	7bfb      	ldrb	r3, [r7, #15]
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d10d      	bne.n	8002aee <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002ad2:	4b4a      	ldr	r3, [pc, #296]	; (8002bfc <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ad4:	68db      	ldr	r3, [r3, #12]
 8002ad6:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6819      	ldr	r1, [r3, #0]
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	685b      	ldr	r3, [r3, #4]
 8002ae2:	3b01      	subs	r3, #1
 8002ae4:	011b      	lsls	r3, r3, #4
 8002ae6:	430b      	orrs	r3, r1
 8002ae8:	4944      	ldr	r1, [pc, #272]	; (8002bfc <RCCEx_PLLSAI1_Config+0x1e4>)
 8002aea:	4313      	orrs	r3, r2
 8002aec:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002aee:	7bfb      	ldrb	r3, [r7, #15]
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d17d      	bne.n	8002bf0 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002af4:	4b41      	ldr	r3, [pc, #260]	; (8002bfc <RCCEx_PLLSAI1_Config+0x1e4>)
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	4a40      	ldr	r2, [pc, #256]	; (8002bfc <RCCEx_PLLSAI1_Config+0x1e4>)
 8002afa:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002afe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b00:	f7fe f944 	bl	8000d8c <HAL_GetTick>
 8002b04:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002b06:	e009      	b.n	8002b1c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002b08:	f7fe f940 	bl	8000d8c <HAL_GetTick>
 8002b0c:	4602      	mov	r2, r0
 8002b0e:	68bb      	ldr	r3, [r7, #8]
 8002b10:	1ad3      	subs	r3, r2, r3
 8002b12:	2b02      	cmp	r3, #2
 8002b14:	d902      	bls.n	8002b1c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002b16:	2303      	movs	r3, #3
 8002b18:	73fb      	strb	r3, [r7, #15]
        break;
 8002b1a:	e005      	b.n	8002b28 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002b1c:	4b37      	ldr	r3, [pc, #220]	; (8002bfc <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d1ef      	bne.n	8002b08 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002b28:	7bfb      	ldrb	r3, [r7, #15]
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d160      	bne.n	8002bf0 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002b2e:	683b      	ldr	r3, [r7, #0]
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d111      	bne.n	8002b58 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002b34:	4b31      	ldr	r3, [pc, #196]	; (8002bfc <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b36:	691b      	ldr	r3, [r3, #16]
 8002b38:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002b3c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b40:	687a      	ldr	r2, [r7, #4]
 8002b42:	6892      	ldr	r2, [r2, #8]
 8002b44:	0211      	lsls	r1, r2, #8
 8002b46:	687a      	ldr	r2, [r7, #4]
 8002b48:	68d2      	ldr	r2, [r2, #12]
 8002b4a:	0912      	lsrs	r2, r2, #4
 8002b4c:	0452      	lsls	r2, r2, #17
 8002b4e:	430a      	orrs	r2, r1
 8002b50:	492a      	ldr	r1, [pc, #168]	; (8002bfc <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b52:	4313      	orrs	r3, r2
 8002b54:	610b      	str	r3, [r1, #16]
 8002b56:	e027      	b.n	8002ba8 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002b58:	683b      	ldr	r3, [r7, #0]
 8002b5a:	2b01      	cmp	r3, #1
 8002b5c:	d112      	bne.n	8002b84 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002b5e:	4b27      	ldr	r3, [pc, #156]	; (8002bfc <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b60:	691b      	ldr	r3, [r3, #16]
 8002b62:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002b66:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002b6a:	687a      	ldr	r2, [r7, #4]
 8002b6c:	6892      	ldr	r2, [r2, #8]
 8002b6e:	0211      	lsls	r1, r2, #8
 8002b70:	687a      	ldr	r2, [r7, #4]
 8002b72:	6912      	ldr	r2, [r2, #16]
 8002b74:	0852      	lsrs	r2, r2, #1
 8002b76:	3a01      	subs	r2, #1
 8002b78:	0552      	lsls	r2, r2, #21
 8002b7a:	430a      	orrs	r2, r1
 8002b7c:	491f      	ldr	r1, [pc, #124]	; (8002bfc <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b7e:	4313      	orrs	r3, r2
 8002b80:	610b      	str	r3, [r1, #16]
 8002b82:	e011      	b.n	8002ba8 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002b84:	4b1d      	ldr	r3, [pc, #116]	; (8002bfc <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b86:	691b      	ldr	r3, [r3, #16]
 8002b88:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002b8c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002b90:	687a      	ldr	r2, [r7, #4]
 8002b92:	6892      	ldr	r2, [r2, #8]
 8002b94:	0211      	lsls	r1, r2, #8
 8002b96:	687a      	ldr	r2, [r7, #4]
 8002b98:	6952      	ldr	r2, [r2, #20]
 8002b9a:	0852      	lsrs	r2, r2, #1
 8002b9c:	3a01      	subs	r2, #1
 8002b9e:	0652      	lsls	r2, r2, #25
 8002ba0:	430a      	orrs	r2, r1
 8002ba2:	4916      	ldr	r1, [pc, #88]	; (8002bfc <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ba4:	4313      	orrs	r3, r2
 8002ba6:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002ba8:	4b14      	ldr	r3, [pc, #80]	; (8002bfc <RCCEx_PLLSAI1_Config+0x1e4>)
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	4a13      	ldr	r2, [pc, #76]	; (8002bfc <RCCEx_PLLSAI1_Config+0x1e4>)
 8002bae:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002bb2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bb4:	f7fe f8ea 	bl	8000d8c <HAL_GetTick>
 8002bb8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002bba:	e009      	b.n	8002bd0 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002bbc:	f7fe f8e6 	bl	8000d8c <HAL_GetTick>
 8002bc0:	4602      	mov	r2, r0
 8002bc2:	68bb      	ldr	r3, [r7, #8]
 8002bc4:	1ad3      	subs	r3, r2, r3
 8002bc6:	2b02      	cmp	r3, #2
 8002bc8:	d902      	bls.n	8002bd0 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8002bca:	2303      	movs	r3, #3
 8002bcc:	73fb      	strb	r3, [r7, #15]
          break;
 8002bce:	e005      	b.n	8002bdc <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002bd0:	4b0a      	ldr	r3, [pc, #40]	; (8002bfc <RCCEx_PLLSAI1_Config+0x1e4>)
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d0ef      	beq.n	8002bbc <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002bdc:	7bfb      	ldrb	r3, [r7, #15]
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d106      	bne.n	8002bf0 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002be2:	4b06      	ldr	r3, [pc, #24]	; (8002bfc <RCCEx_PLLSAI1_Config+0x1e4>)
 8002be4:	691a      	ldr	r2, [r3, #16]
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	699b      	ldr	r3, [r3, #24]
 8002bea:	4904      	ldr	r1, [pc, #16]	; (8002bfc <RCCEx_PLLSAI1_Config+0x1e4>)
 8002bec:	4313      	orrs	r3, r2
 8002bee:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002bf0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	3710      	adds	r7, #16
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	bd80      	pop	{r7, pc}
 8002bfa:	bf00      	nop
 8002bfc:	40021000 	.word	0x40021000

08002c00 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	b084      	sub	sp, #16
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
 8002c08:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002c0e:	4b6a      	ldr	r3, [pc, #424]	; (8002db8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c10:	68db      	ldr	r3, [r3, #12]
 8002c12:	f003 0303 	and.w	r3, r3, #3
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d018      	beq.n	8002c4c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002c1a:	4b67      	ldr	r3, [pc, #412]	; (8002db8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c1c:	68db      	ldr	r3, [r3, #12]
 8002c1e:	f003 0203 	and.w	r2, r3, #3
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	429a      	cmp	r2, r3
 8002c28:	d10d      	bne.n	8002c46 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
       ||
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d009      	beq.n	8002c46 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002c32:	4b61      	ldr	r3, [pc, #388]	; (8002db8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c34:	68db      	ldr	r3, [r3, #12]
 8002c36:	091b      	lsrs	r3, r3, #4
 8002c38:	f003 0307 	and.w	r3, r3, #7
 8002c3c:	1c5a      	adds	r2, r3, #1
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	685b      	ldr	r3, [r3, #4]
       ||
 8002c42:	429a      	cmp	r2, r3
 8002c44:	d047      	beq.n	8002cd6 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002c46:	2301      	movs	r3, #1
 8002c48:	73fb      	strb	r3, [r7, #15]
 8002c4a:	e044      	b.n	8002cd6 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	2b03      	cmp	r3, #3
 8002c52:	d018      	beq.n	8002c86 <RCCEx_PLLSAI2_Config+0x86>
 8002c54:	2b03      	cmp	r3, #3
 8002c56:	d825      	bhi.n	8002ca4 <RCCEx_PLLSAI2_Config+0xa4>
 8002c58:	2b01      	cmp	r3, #1
 8002c5a:	d002      	beq.n	8002c62 <RCCEx_PLLSAI2_Config+0x62>
 8002c5c:	2b02      	cmp	r3, #2
 8002c5e:	d009      	beq.n	8002c74 <RCCEx_PLLSAI2_Config+0x74>
 8002c60:	e020      	b.n	8002ca4 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002c62:	4b55      	ldr	r3, [pc, #340]	; (8002db8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f003 0302 	and.w	r3, r3, #2
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d11d      	bne.n	8002caa <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002c6e:	2301      	movs	r3, #1
 8002c70:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c72:	e01a      	b.n	8002caa <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002c74:	4b50      	ldr	r3, [pc, #320]	; (8002db8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d116      	bne.n	8002cae <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002c80:	2301      	movs	r3, #1
 8002c82:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c84:	e013      	b.n	8002cae <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002c86:	4b4c      	ldr	r3, [pc, #304]	; (8002db8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d10f      	bne.n	8002cb2 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002c92:	4b49      	ldr	r3, [pc, #292]	; (8002db8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d109      	bne.n	8002cb2 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002c9e:	2301      	movs	r3, #1
 8002ca0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002ca2:	e006      	b.n	8002cb2 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002ca4:	2301      	movs	r3, #1
 8002ca6:	73fb      	strb	r3, [r7, #15]
      break;
 8002ca8:	e004      	b.n	8002cb4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002caa:	bf00      	nop
 8002cac:	e002      	b.n	8002cb4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002cae:	bf00      	nop
 8002cb0:	e000      	b.n	8002cb4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002cb2:	bf00      	nop
    }

    if(status == HAL_OK)
 8002cb4:	7bfb      	ldrb	r3, [r7, #15]
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d10d      	bne.n	8002cd6 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002cba:	4b3f      	ldr	r3, [pc, #252]	; (8002db8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002cbc:	68db      	ldr	r3, [r3, #12]
 8002cbe:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6819      	ldr	r1, [r3, #0]
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	685b      	ldr	r3, [r3, #4]
 8002cca:	3b01      	subs	r3, #1
 8002ccc:	011b      	lsls	r3, r3, #4
 8002cce:	430b      	orrs	r3, r1
 8002cd0:	4939      	ldr	r1, [pc, #228]	; (8002db8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002cd2:	4313      	orrs	r3, r2
 8002cd4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002cd6:	7bfb      	ldrb	r3, [r7, #15]
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d167      	bne.n	8002dac <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002cdc:	4b36      	ldr	r3, [pc, #216]	; (8002db8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	4a35      	ldr	r2, [pc, #212]	; (8002db8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ce2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ce6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002ce8:	f7fe f850 	bl	8000d8c <HAL_GetTick>
 8002cec:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002cee:	e009      	b.n	8002d04 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002cf0:	f7fe f84c 	bl	8000d8c <HAL_GetTick>
 8002cf4:	4602      	mov	r2, r0
 8002cf6:	68bb      	ldr	r3, [r7, #8]
 8002cf8:	1ad3      	subs	r3, r2, r3
 8002cfa:	2b02      	cmp	r3, #2
 8002cfc:	d902      	bls.n	8002d04 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002cfe:	2303      	movs	r3, #3
 8002d00:	73fb      	strb	r3, [r7, #15]
        break;
 8002d02:	e005      	b.n	8002d10 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002d04:	4b2c      	ldr	r3, [pc, #176]	; (8002db8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d1ef      	bne.n	8002cf0 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002d10:	7bfb      	ldrb	r3, [r7, #15]
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d14a      	bne.n	8002dac <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002d16:	683b      	ldr	r3, [r7, #0]
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d111      	bne.n	8002d40 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002d1c:	4b26      	ldr	r3, [pc, #152]	; (8002db8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d1e:	695b      	ldr	r3, [r3, #20]
 8002d20:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002d24:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d28:	687a      	ldr	r2, [r7, #4]
 8002d2a:	6892      	ldr	r2, [r2, #8]
 8002d2c:	0211      	lsls	r1, r2, #8
 8002d2e:	687a      	ldr	r2, [r7, #4]
 8002d30:	68d2      	ldr	r2, [r2, #12]
 8002d32:	0912      	lsrs	r2, r2, #4
 8002d34:	0452      	lsls	r2, r2, #17
 8002d36:	430a      	orrs	r2, r1
 8002d38:	491f      	ldr	r1, [pc, #124]	; (8002db8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d3a:	4313      	orrs	r3, r2
 8002d3c:	614b      	str	r3, [r1, #20]
 8002d3e:	e011      	b.n	8002d64 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002d40:	4b1d      	ldr	r3, [pc, #116]	; (8002db8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d42:	695b      	ldr	r3, [r3, #20]
 8002d44:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002d48:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002d4c:	687a      	ldr	r2, [r7, #4]
 8002d4e:	6892      	ldr	r2, [r2, #8]
 8002d50:	0211      	lsls	r1, r2, #8
 8002d52:	687a      	ldr	r2, [r7, #4]
 8002d54:	6912      	ldr	r2, [r2, #16]
 8002d56:	0852      	lsrs	r2, r2, #1
 8002d58:	3a01      	subs	r2, #1
 8002d5a:	0652      	lsls	r2, r2, #25
 8002d5c:	430a      	orrs	r2, r1
 8002d5e:	4916      	ldr	r1, [pc, #88]	; (8002db8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d60:	4313      	orrs	r3, r2
 8002d62:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002d64:	4b14      	ldr	r3, [pc, #80]	; (8002db8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	4a13      	ldr	r2, [pc, #76]	; (8002db8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d6a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d6e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d70:	f7fe f80c 	bl	8000d8c <HAL_GetTick>
 8002d74:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002d76:	e009      	b.n	8002d8c <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002d78:	f7fe f808 	bl	8000d8c <HAL_GetTick>
 8002d7c:	4602      	mov	r2, r0
 8002d7e:	68bb      	ldr	r3, [r7, #8]
 8002d80:	1ad3      	subs	r3, r2, r3
 8002d82:	2b02      	cmp	r3, #2
 8002d84:	d902      	bls.n	8002d8c <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8002d86:	2303      	movs	r3, #3
 8002d88:	73fb      	strb	r3, [r7, #15]
          break;
 8002d8a:	e005      	b.n	8002d98 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002d8c:	4b0a      	ldr	r3, [pc, #40]	; (8002db8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d0ef      	beq.n	8002d78 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8002d98:	7bfb      	ldrb	r3, [r7, #15]
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d106      	bne.n	8002dac <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002d9e:	4b06      	ldr	r3, [pc, #24]	; (8002db8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002da0:	695a      	ldr	r2, [r3, #20]
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	695b      	ldr	r3, [r3, #20]
 8002da6:	4904      	ldr	r1, [pc, #16]	; (8002db8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002da8:	4313      	orrs	r3, r2
 8002daa:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002dac:	7bfb      	ldrb	r3, [r7, #15]
}
 8002dae:	4618      	mov	r0, r3
 8002db0:	3710      	adds	r7, #16
 8002db2:	46bd      	mov	sp, r7
 8002db4:	bd80      	pop	{r7, pc}
 8002db6:	bf00      	nop
 8002db8:	40021000 	.word	0x40021000

08002dbc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	b082      	sub	sp, #8
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d101      	bne.n	8002dce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002dca:	2301      	movs	r3, #1
 8002dcc:	e040      	b.n	8002e50 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d106      	bne.n	8002de4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	2200      	movs	r2, #0
 8002dda:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002dde:	6878      	ldr	r0, [r7, #4]
 8002de0:	f7fd fe18 	bl	8000a14 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	2224      	movs	r2, #36	; 0x24
 8002de8:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	681a      	ldr	r2, [r3, #0]
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f022 0201 	bic.w	r2, r2, #1
 8002df8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002dfa:	6878      	ldr	r0, [r7, #4]
 8002dfc:	f000 fa92 	bl	8003324 <UART_SetConfig>
 8002e00:	4603      	mov	r3, r0
 8002e02:	2b01      	cmp	r3, #1
 8002e04:	d101      	bne.n	8002e0a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002e06:	2301      	movs	r3, #1
 8002e08:	e022      	b.n	8002e50 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d002      	beq.n	8002e18 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002e12:	6878      	ldr	r0, [r7, #4]
 8002e14:	f000 fd10 	bl	8003838 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	685a      	ldr	r2, [r3, #4]
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002e26:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	689a      	ldr	r2, [r3, #8]
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002e36:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	681a      	ldr	r2, [r3, #0]
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f042 0201 	orr.w	r2, r2, #1
 8002e46:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002e48:	6878      	ldr	r0, [r7, #4]
 8002e4a:	f000 fd97 	bl	800397c <UART_CheckIdleState>
 8002e4e:	4603      	mov	r3, r0
}
 8002e50:	4618      	mov	r0, r3
 8002e52:	3708      	adds	r7, #8
 8002e54:	46bd      	mov	sp, r7
 8002e56:	bd80      	pop	{r7, pc}

08002e58 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	b084      	sub	sp, #16
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	60f8      	str	r0, [r7, #12]
 8002e60:	60b9      	str	r1, [r7, #8]
 8002e62:	4613      	mov	r3, r2
 8002e64:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002e6a:	2b20      	cmp	r3, #32
 8002e6c:	d131      	bne.n	8002ed2 <HAL_UART_Receive_IT+0x7a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002e6e:	68bb      	ldr	r3, [r7, #8]
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d002      	beq.n	8002e7a <HAL_UART_Receive_IT+0x22>
 8002e74:	88fb      	ldrh	r3, [r7, #6]
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d101      	bne.n	8002e7e <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 8002e7a:	2301      	movs	r3, #1
 8002e7c:	e02a      	b.n	8002ed4 <HAL_UART_Receive_IT+0x7c>
    }

    __HAL_LOCK(huart);
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8002e84:	2b01      	cmp	r3, #1
 8002e86:	d101      	bne.n	8002e8c <HAL_UART_Receive_IT+0x34>
 8002e88:	2302      	movs	r3, #2
 8002e8a:	e023      	b.n	8002ed4 <HAL_UART_Receive_IT+0x7c>
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	2201      	movs	r2, #1
 8002e90:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	2200      	movs	r2, #0
 8002e98:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	4a0f      	ldr	r2, [pc, #60]	; (8002edc <HAL_UART_Receive_IT+0x84>)
 8002ea0:	4293      	cmp	r3, r2
 8002ea2:	d00e      	beq.n	8002ec2 <HAL_UART_Receive_IT+0x6a>
    {
      /* Check that USART RTOEN bit is set */
      if(READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	685b      	ldr	r3, [r3, #4]
 8002eaa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d007      	beq.n	8002ec2 <HAL_UART_Receive_IT+0x6a>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	681a      	ldr	r2, [r3, #0]
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8002ec0:	601a      	str	r2, [r3, #0]
      }
    }

    return(UART_Start_Receive_IT(huart, pData, Size));
 8002ec2:	88fb      	ldrh	r3, [r7, #6]
 8002ec4:	461a      	mov	r2, r3
 8002ec6:	68b9      	ldr	r1, [r7, #8]
 8002ec8:	68f8      	ldr	r0, [r7, #12]
 8002eca:	f000 fe1d 	bl	8003b08 <UART_Start_Receive_IT>
 8002ece:	4603      	mov	r3, r0
 8002ed0:	e000      	b.n	8002ed4 <HAL_UART_Receive_IT+0x7c>
  }
  else
  {
    return HAL_BUSY;
 8002ed2:	2302      	movs	r3, #2
  }
}
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	3710      	adds	r7, #16
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	bd80      	pop	{r7, pc}
 8002edc:	40008000 	.word	0x40008000

08002ee0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	b088      	sub	sp, #32
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	69db      	ldr	r3, [r3, #28]
 8002eee:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	689b      	ldr	r3, [r3, #8]
 8002efe:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002f00:	69fa      	ldr	r2, [r7, #28]
 8002f02:	f640 030f 	movw	r3, #2063	; 0x80f
 8002f06:	4013      	ands	r3, r2
 8002f08:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8002f0a:	693b      	ldr	r3, [r7, #16]
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d113      	bne.n	8002f38 <HAL_UART_IRQHandler+0x58>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8002f10:	69fb      	ldr	r3, [r7, #28]
 8002f12:	f003 0320 	and.w	r3, r3, #32
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d00e      	beq.n	8002f38 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002f1a:	69bb      	ldr	r3, [r7, #24]
 8002f1c:	f003 0320 	and.w	r3, r3, #32
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d009      	beq.n	8002f38 <HAL_UART_IRQHandler+0x58>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	f000 81ce 	beq.w	80032ca <HAL_UART_IRQHandler+0x3ea>
      {
        huart->RxISR(huart);
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002f32:	6878      	ldr	r0, [r7, #4]
 8002f34:	4798      	blx	r3
      }
      return;
 8002f36:	e1c8      	b.n	80032ca <HAL_UART_IRQHandler+0x3ea>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8002f38:	693b      	ldr	r3, [r7, #16]
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	f000 80e3 	beq.w	8003106 <HAL_UART_IRQHandler+0x226>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8002f40:	697b      	ldr	r3, [r7, #20]
 8002f42:	f003 0301 	and.w	r3, r3, #1
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d105      	bne.n	8002f56 <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8002f4a:	69ba      	ldr	r2, [r7, #24]
 8002f4c:	4ba6      	ldr	r3, [pc, #664]	; (80031e8 <HAL_UART_IRQHandler+0x308>)
 8002f4e:	4013      	ands	r3, r2
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	f000 80d8 	beq.w	8003106 <HAL_UART_IRQHandler+0x226>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002f56:	69fb      	ldr	r3, [r7, #28]
 8002f58:	f003 0301 	and.w	r3, r3, #1
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d010      	beq.n	8002f82 <HAL_UART_IRQHandler+0xa2>
 8002f60:	69bb      	ldr	r3, [r7, #24]
 8002f62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d00b      	beq.n	8002f82 <HAL_UART_IRQHandler+0xa2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	2201      	movs	r2, #1
 8002f70:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002f78:	f043 0201 	orr.w	r2, r3, #1
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002f82:	69fb      	ldr	r3, [r7, #28]
 8002f84:	f003 0302 	and.w	r3, r3, #2
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d010      	beq.n	8002fae <HAL_UART_IRQHandler+0xce>
 8002f8c:	697b      	ldr	r3, [r7, #20]
 8002f8e:	f003 0301 	and.w	r3, r3, #1
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d00b      	beq.n	8002fae <HAL_UART_IRQHandler+0xce>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	2202      	movs	r2, #2
 8002f9c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002fa4:	f043 0204 	orr.w	r2, r3, #4
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002fae:	69fb      	ldr	r3, [r7, #28]
 8002fb0:	f003 0304 	and.w	r3, r3, #4
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d010      	beq.n	8002fda <HAL_UART_IRQHandler+0xfa>
 8002fb8:	697b      	ldr	r3, [r7, #20]
 8002fba:	f003 0301 	and.w	r3, r3, #1
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d00b      	beq.n	8002fda <HAL_UART_IRQHandler+0xfa>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	2204      	movs	r2, #4
 8002fc8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002fd0:	f043 0202 	orr.w	r2, r3, #2
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002fda:	69fb      	ldr	r3, [r7, #28]
 8002fdc:	f003 0308 	and.w	r3, r3, #8
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d015      	beq.n	8003010 <HAL_UART_IRQHandler+0x130>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002fe4:	69bb      	ldr	r3, [r7, #24]
 8002fe6:	f003 0320 	and.w	r3, r3, #32
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d104      	bne.n	8002ff8 <HAL_UART_IRQHandler+0x118>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8002fee:	697b      	ldr	r3, [r7, #20]
 8002ff0:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d00b      	beq.n	8003010 <HAL_UART_IRQHandler+0x130>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	2208      	movs	r2, #8
 8002ffe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003006:	f043 0208 	orr.w	r2, r3, #8
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003010:	69fb      	ldr	r3, [r7, #28]
 8003012:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003016:	2b00      	cmp	r3, #0
 8003018:	d011      	beq.n	800303e <HAL_UART_IRQHandler+0x15e>
 800301a:	69bb      	ldr	r3, [r7, #24]
 800301c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003020:	2b00      	cmp	r3, #0
 8003022:	d00c      	beq.n	800303e <HAL_UART_IRQHandler+0x15e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800302c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003034:	f043 0220 	orr.w	r2, r3, #32
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003044:	2b00      	cmp	r3, #0
 8003046:	f000 8142 	beq.w	80032ce <HAL_UART_IRQHandler+0x3ee>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800304a:	69fb      	ldr	r3, [r7, #28]
 800304c:	f003 0320 	and.w	r3, r3, #32
 8003050:	2b00      	cmp	r3, #0
 8003052:	d00c      	beq.n	800306e <HAL_UART_IRQHandler+0x18e>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003054:	69bb      	ldr	r3, [r7, #24]
 8003056:	f003 0320 	and.w	r3, r3, #32
 800305a:	2b00      	cmp	r3, #0
 800305c:	d007      	beq.n	800306e <HAL_UART_IRQHandler+0x18e>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003062:	2b00      	cmp	r3, #0
 8003064:	d003      	beq.n	800306e <HAL_UART_IRQHandler+0x18e>
        {
          huart->RxISR(huart);
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800306a:	6878      	ldr	r0, [r7, #4]
 800306c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003074:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	689b      	ldr	r3, [r3, #8]
 800307c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003080:	2b40      	cmp	r3, #64	; 0x40
 8003082:	d004      	beq.n	800308e <HAL_UART_IRQHandler+0x1ae>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800308a:	2b00      	cmp	r3, #0
 800308c:	d031      	beq.n	80030f2 <HAL_UART_IRQHandler+0x212>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800308e:	6878      	ldr	r0, [r7, #4]
 8003090:	f000 fdc2 	bl	8003c18 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	689b      	ldr	r3, [r3, #8]
 800309a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800309e:	2b40      	cmp	r3, #64	; 0x40
 80030a0:	d123      	bne.n	80030ea <HAL_UART_IRQHandler+0x20a>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	689a      	ldr	r2, [r3, #8]
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80030b0:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d013      	beq.n	80030e2 <HAL_UART_IRQHandler+0x202>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030be:	4a4b      	ldr	r2, [pc, #300]	; (80031ec <HAL_UART_IRQHandler+0x30c>)
 80030c0:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030c6:	4618      	mov	r0, r3
 80030c8:	f7fe f968 	bl	800139c <HAL_DMA_Abort_IT>
 80030cc:	4603      	mov	r3, r0
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d017      	beq.n	8003102 <HAL_UART_IRQHandler+0x222>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030d8:	687a      	ldr	r2, [r7, #4]
 80030da:	6f12      	ldr	r2, [r2, #112]	; 0x70
 80030dc:	4610      	mov	r0, r2
 80030de:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80030e0:	e00f      	b.n	8003102 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80030e2:	6878      	ldr	r0, [r7, #4]
 80030e4:	f000 f908 	bl	80032f8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80030e8:	e00b      	b.n	8003102 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80030ea:	6878      	ldr	r0, [r7, #4]
 80030ec:	f000 f904 	bl	80032f8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80030f0:	e007      	b.n	8003102 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80030f2:	6878      	ldr	r0, [r7, #4]
 80030f4:	f000 f900 	bl	80032f8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	2200      	movs	r2, #0
 80030fc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8003100:	e0e5      	b.n	80032ce <HAL_UART_IRQHandler+0x3ee>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003102:	bf00      	nop
    return;
 8003104:	e0e3      	b.n	80032ce <HAL_UART_IRQHandler+0x3ee>

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800310a:	2b01      	cmp	r3, #1
 800310c:	f040 80a9 	bne.w	8003262 <HAL_UART_IRQHandler+0x382>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 8003110:	69fb      	ldr	r3, [r7, #28]
 8003112:	f003 0310 	and.w	r3, r3, #16
 8003116:	2b00      	cmp	r3, #0
 8003118:	f000 80a3 	beq.w	8003262 <HAL_UART_IRQHandler+0x382>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 800311c:	69bb      	ldr	r3, [r7, #24]
 800311e:	f003 0310 	and.w	r3, r3, #16
 8003122:	2b00      	cmp	r3, #0
 8003124:	f000 809d 	beq.w	8003262 <HAL_UART_IRQHandler+0x382>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	2210      	movs	r2, #16
 800312e:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	689b      	ldr	r3, [r3, #8]
 8003136:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800313a:	2b40      	cmp	r3, #64	; 0x40
 800313c:	d158      	bne.n	80031f0 <HAL_UART_IRQHandler+0x310>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	685b      	ldr	r3, [r3, #4]
 8003146:	813b      	strh	r3, [r7, #8]
      if (  (nb_remaining_rx_data > 0U)
 8003148:	893b      	ldrh	r3, [r7, #8]
 800314a:	2b00      	cmp	r3, #0
 800314c:	f000 80c1 	beq.w	80032d2 <HAL_UART_IRQHandler+0x3f2>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003156:	893a      	ldrh	r2, [r7, #8]
 8003158:	429a      	cmp	r2, r3
 800315a:	f080 80ba 	bcs.w	80032d2 <HAL_UART_IRQHandler+0x3f2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	893a      	ldrh	r2, [r7, #8]
 8003162:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f003 0320 	and.w	r3, r3, #32
 8003172:	2b00      	cmp	r3, #0
 8003174:	d12a      	bne.n	80031cc <HAL_UART_IRQHandler+0x2ec>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	681a      	ldr	r2, [r3, #0]
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003184:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	689a      	ldr	r2, [r3, #8]
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f022 0201 	bic.w	r2, r2, #1
 8003194:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	689a      	ldr	r2, [r3, #8]
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80031a4:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	2220      	movs	r2, #32
 80031aa:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	2200      	movs	r2, #0
 80031b0:	661a      	str	r2, [r3, #96]	; 0x60

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	681a      	ldr	r2, [r3, #0]
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f022 0210 	bic.w	r2, r2, #16
 80031c0:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031c6:	4618      	mov	r0, r3
 80031c8:	f7fe f8aa 	bl	8001320 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80031d8:	b29b      	uxth	r3, r3
 80031da:	1ad3      	subs	r3, r2, r3
 80031dc:	b29b      	uxth	r3, r3
 80031de:	4619      	mov	r1, r3
 80031e0:	6878      	ldr	r0, [r7, #4]
 80031e2:	f000 f893 	bl	800330c <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80031e6:	e074      	b.n	80032d2 <HAL_UART_IRQHandler+0x3f2>
 80031e8:	04000120 	.word	0x04000120
 80031ec:	08003c77 	.word	0x08003c77
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80031fc:	b29b      	uxth	r3, r3
 80031fe:	1ad3      	subs	r3, r2, r3
 8003200:	817b      	strh	r3, [r7, #10]
      if (  (huart->RxXferCount > 0U)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003208:	b29b      	uxth	r3, r3
 800320a:	2b00      	cmp	r3, #0
 800320c:	d063      	beq.n	80032d6 <HAL_UART_IRQHandler+0x3f6>
          &&(nb_rx_data > 0U) )
 800320e:	897b      	ldrh	r3, [r7, #10]
 8003210:	2b00      	cmp	r3, #0
 8003212:	d060      	beq.n	80032d6 <HAL_UART_IRQHandler+0x3f6>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	681a      	ldr	r2, [r3, #0]
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003222:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	689a      	ldr	r2, [r3, #8]
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f022 0201 	bic.w	r2, r2, #1
 8003232:	609a      	str	r2, [r3, #8]
#endif

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2220      	movs	r2, #32
 8003238:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	2200      	movs	r2, #0
 800323e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2200      	movs	r2, #0
 8003244:	665a      	str	r2, [r3, #100]	; 0x64

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	681a      	ldr	r2, [r3, #0]
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f022 0210 	bic.w	r2, r2, #16
 8003254:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003256:	897b      	ldrh	r3, [r7, #10]
 8003258:	4619      	mov	r1, r3
 800325a:	6878      	ldr	r0, [r7, #4]
 800325c:	f000 f856 	bl	800330c <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8003260:	e039      	b.n	80032d6 <HAL_UART_IRQHandler+0x3f6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003262:	69fb      	ldr	r3, [r7, #28]
 8003264:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003268:	2b00      	cmp	r3, #0
 800326a:	d00d      	beq.n	8003288 <HAL_UART_IRQHandler+0x3a8>
 800326c:	697b      	ldr	r3, [r7, #20]
 800326e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003272:	2b00      	cmp	r3, #0
 8003274:	d008      	beq.n	8003288 <HAL_UART_IRQHandler+0x3a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800327e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003280:	6878      	ldr	r0, [r7, #4]
 8003282:	f000 fdff 	bl	8003e84 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003286:	e029      	b.n	80032dc <HAL_UART_IRQHandler+0x3fc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003288:	69fb      	ldr	r3, [r7, #28]
 800328a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800328e:	2b00      	cmp	r3, #0
 8003290:	d00d      	beq.n	80032ae <HAL_UART_IRQHandler+0x3ce>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003292:	69bb      	ldr	r3, [r7, #24]
 8003294:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003298:	2b00      	cmp	r3, #0
 800329a:	d008      	beq.n	80032ae <HAL_UART_IRQHandler+0x3ce>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d01a      	beq.n	80032da <HAL_UART_IRQHandler+0x3fa>
    {
      huart->TxISR(huart);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80032a8:	6878      	ldr	r0, [r7, #4]
 80032aa:	4798      	blx	r3
    }
    return;
 80032ac:	e015      	b.n	80032da <HAL_UART_IRQHandler+0x3fa>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80032ae:	69fb      	ldr	r3, [r7, #28]
 80032b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d011      	beq.n	80032dc <HAL_UART_IRQHandler+0x3fc>
 80032b8:	69bb      	ldr	r3, [r7, #24]
 80032ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d00c      	beq.n	80032dc <HAL_UART_IRQHandler+0x3fc>
  {
    UART_EndTransmit_IT(huart);
 80032c2:	6878      	ldr	r0, [r7, #4]
 80032c4:	f000 fced 	bl	8003ca2 <UART_EndTransmit_IT>
    return;
 80032c8:	e008      	b.n	80032dc <HAL_UART_IRQHandler+0x3fc>
      return;
 80032ca:	bf00      	nop
 80032cc:	e006      	b.n	80032dc <HAL_UART_IRQHandler+0x3fc>
    return;
 80032ce:	bf00      	nop
 80032d0:	e004      	b.n	80032dc <HAL_UART_IRQHandler+0x3fc>
      return;
 80032d2:	bf00      	nop
 80032d4:	e002      	b.n	80032dc <HAL_UART_IRQHandler+0x3fc>
      return;
 80032d6:	bf00      	nop
 80032d8:	e000      	b.n	80032dc <HAL_UART_IRQHandler+0x3fc>
    return;
 80032da:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 80032dc:	3720      	adds	r7, #32
 80032de:	46bd      	mov	sp, r7
 80032e0:	bd80      	pop	{r7, pc}
 80032e2:	bf00      	nop

080032e4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80032e4:	b480      	push	{r7}
 80032e6:	b083      	sub	sp, #12
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80032ec:	bf00      	nop
 80032ee:	370c      	adds	r7, #12
 80032f0:	46bd      	mov	sp, r7
 80032f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f6:	4770      	bx	lr

080032f8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80032f8:	b480      	push	{r7}
 80032fa:	b083      	sub	sp, #12
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003300:	bf00      	nop
 8003302:	370c      	adds	r7, #12
 8003304:	46bd      	mov	sp, r7
 8003306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330a:	4770      	bx	lr

0800330c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800330c:	b480      	push	{r7}
 800330e:	b083      	sub	sp, #12
 8003310:	af00      	add	r7, sp, #0
 8003312:	6078      	str	r0, [r7, #4]
 8003314:	460b      	mov	r3, r1
 8003316:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003318:	bf00      	nop
 800331a:	370c      	adds	r7, #12
 800331c:	46bd      	mov	sp, r7
 800331e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003322:	4770      	bx	lr

08003324 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003324:	b5b0      	push	{r4, r5, r7, lr}
 8003326:	b088      	sub	sp, #32
 8003328:	af00      	add	r7, sp, #0
 800332a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800332c:	2300      	movs	r3, #0
 800332e:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	689a      	ldr	r2, [r3, #8]
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	691b      	ldr	r3, [r3, #16]
 8003338:	431a      	orrs	r2, r3
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	695b      	ldr	r3, [r3, #20]
 800333e:	431a      	orrs	r2, r3
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	69db      	ldr	r3, [r3, #28]
 8003344:	4313      	orrs	r3, r2
 8003346:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	681a      	ldr	r2, [r3, #0]
 800334e:	4bad      	ldr	r3, [pc, #692]	; (8003604 <UART_SetConfig+0x2e0>)
 8003350:	4013      	ands	r3, r2
 8003352:	687a      	ldr	r2, [r7, #4]
 8003354:	6812      	ldr	r2, [r2, #0]
 8003356:	69f9      	ldr	r1, [r7, #28]
 8003358:	430b      	orrs	r3, r1
 800335a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	685b      	ldr	r3, [r3, #4]
 8003362:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	68da      	ldr	r2, [r3, #12]
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	430a      	orrs	r2, r1
 8003370:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	699b      	ldr	r3, [r3, #24]
 8003376:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	4aa2      	ldr	r2, [pc, #648]	; (8003608 <UART_SetConfig+0x2e4>)
 800337e:	4293      	cmp	r3, r2
 8003380:	d004      	beq.n	800338c <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	6a1b      	ldr	r3, [r3, #32]
 8003386:	69fa      	ldr	r2, [r7, #28]
 8003388:	4313      	orrs	r3, r2
 800338a:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	689b      	ldr	r3, [r3, #8]
 8003392:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	69fa      	ldr	r2, [r7, #28]
 800339c:	430a      	orrs	r2, r1
 800339e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	4a99      	ldr	r2, [pc, #612]	; (800360c <UART_SetConfig+0x2e8>)
 80033a6:	4293      	cmp	r3, r2
 80033a8:	d121      	bne.n	80033ee <UART_SetConfig+0xca>
 80033aa:	4b99      	ldr	r3, [pc, #612]	; (8003610 <UART_SetConfig+0x2ec>)
 80033ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033b0:	f003 0303 	and.w	r3, r3, #3
 80033b4:	2b03      	cmp	r3, #3
 80033b6:	d817      	bhi.n	80033e8 <UART_SetConfig+0xc4>
 80033b8:	a201      	add	r2, pc, #4	; (adr r2, 80033c0 <UART_SetConfig+0x9c>)
 80033ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033be:	bf00      	nop
 80033c0:	080033d1 	.word	0x080033d1
 80033c4:	080033dd 	.word	0x080033dd
 80033c8:	080033d7 	.word	0x080033d7
 80033cc:	080033e3 	.word	0x080033e3
 80033d0:	2301      	movs	r3, #1
 80033d2:	76fb      	strb	r3, [r7, #27]
 80033d4:	e0e7      	b.n	80035a6 <UART_SetConfig+0x282>
 80033d6:	2302      	movs	r3, #2
 80033d8:	76fb      	strb	r3, [r7, #27]
 80033da:	e0e4      	b.n	80035a6 <UART_SetConfig+0x282>
 80033dc:	2304      	movs	r3, #4
 80033de:	76fb      	strb	r3, [r7, #27]
 80033e0:	e0e1      	b.n	80035a6 <UART_SetConfig+0x282>
 80033e2:	2308      	movs	r3, #8
 80033e4:	76fb      	strb	r3, [r7, #27]
 80033e6:	e0de      	b.n	80035a6 <UART_SetConfig+0x282>
 80033e8:	2310      	movs	r3, #16
 80033ea:	76fb      	strb	r3, [r7, #27]
 80033ec:	e0db      	b.n	80035a6 <UART_SetConfig+0x282>
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	4a88      	ldr	r2, [pc, #544]	; (8003614 <UART_SetConfig+0x2f0>)
 80033f4:	4293      	cmp	r3, r2
 80033f6:	d132      	bne.n	800345e <UART_SetConfig+0x13a>
 80033f8:	4b85      	ldr	r3, [pc, #532]	; (8003610 <UART_SetConfig+0x2ec>)
 80033fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033fe:	f003 030c 	and.w	r3, r3, #12
 8003402:	2b0c      	cmp	r3, #12
 8003404:	d828      	bhi.n	8003458 <UART_SetConfig+0x134>
 8003406:	a201      	add	r2, pc, #4	; (adr r2, 800340c <UART_SetConfig+0xe8>)
 8003408:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800340c:	08003441 	.word	0x08003441
 8003410:	08003459 	.word	0x08003459
 8003414:	08003459 	.word	0x08003459
 8003418:	08003459 	.word	0x08003459
 800341c:	0800344d 	.word	0x0800344d
 8003420:	08003459 	.word	0x08003459
 8003424:	08003459 	.word	0x08003459
 8003428:	08003459 	.word	0x08003459
 800342c:	08003447 	.word	0x08003447
 8003430:	08003459 	.word	0x08003459
 8003434:	08003459 	.word	0x08003459
 8003438:	08003459 	.word	0x08003459
 800343c:	08003453 	.word	0x08003453
 8003440:	2300      	movs	r3, #0
 8003442:	76fb      	strb	r3, [r7, #27]
 8003444:	e0af      	b.n	80035a6 <UART_SetConfig+0x282>
 8003446:	2302      	movs	r3, #2
 8003448:	76fb      	strb	r3, [r7, #27]
 800344a:	e0ac      	b.n	80035a6 <UART_SetConfig+0x282>
 800344c:	2304      	movs	r3, #4
 800344e:	76fb      	strb	r3, [r7, #27]
 8003450:	e0a9      	b.n	80035a6 <UART_SetConfig+0x282>
 8003452:	2308      	movs	r3, #8
 8003454:	76fb      	strb	r3, [r7, #27]
 8003456:	e0a6      	b.n	80035a6 <UART_SetConfig+0x282>
 8003458:	2310      	movs	r3, #16
 800345a:	76fb      	strb	r3, [r7, #27]
 800345c:	e0a3      	b.n	80035a6 <UART_SetConfig+0x282>
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	4a6d      	ldr	r2, [pc, #436]	; (8003618 <UART_SetConfig+0x2f4>)
 8003464:	4293      	cmp	r3, r2
 8003466:	d120      	bne.n	80034aa <UART_SetConfig+0x186>
 8003468:	4b69      	ldr	r3, [pc, #420]	; (8003610 <UART_SetConfig+0x2ec>)
 800346a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800346e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003472:	2b30      	cmp	r3, #48	; 0x30
 8003474:	d013      	beq.n	800349e <UART_SetConfig+0x17a>
 8003476:	2b30      	cmp	r3, #48	; 0x30
 8003478:	d814      	bhi.n	80034a4 <UART_SetConfig+0x180>
 800347a:	2b20      	cmp	r3, #32
 800347c:	d009      	beq.n	8003492 <UART_SetConfig+0x16e>
 800347e:	2b20      	cmp	r3, #32
 8003480:	d810      	bhi.n	80034a4 <UART_SetConfig+0x180>
 8003482:	2b00      	cmp	r3, #0
 8003484:	d002      	beq.n	800348c <UART_SetConfig+0x168>
 8003486:	2b10      	cmp	r3, #16
 8003488:	d006      	beq.n	8003498 <UART_SetConfig+0x174>
 800348a:	e00b      	b.n	80034a4 <UART_SetConfig+0x180>
 800348c:	2300      	movs	r3, #0
 800348e:	76fb      	strb	r3, [r7, #27]
 8003490:	e089      	b.n	80035a6 <UART_SetConfig+0x282>
 8003492:	2302      	movs	r3, #2
 8003494:	76fb      	strb	r3, [r7, #27]
 8003496:	e086      	b.n	80035a6 <UART_SetConfig+0x282>
 8003498:	2304      	movs	r3, #4
 800349a:	76fb      	strb	r3, [r7, #27]
 800349c:	e083      	b.n	80035a6 <UART_SetConfig+0x282>
 800349e:	2308      	movs	r3, #8
 80034a0:	76fb      	strb	r3, [r7, #27]
 80034a2:	e080      	b.n	80035a6 <UART_SetConfig+0x282>
 80034a4:	2310      	movs	r3, #16
 80034a6:	76fb      	strb	r3, [r7, #27]
 80034a8:	e07d      	b.n	80035a6 <UART_SetConfig+0x282>
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	4a5b      	ldr	r2, [pc, #364]	; (800361c <UART_SetConfig+0x2f8>)
 80034b0:	4293      	cmp	r3, r2
 80034b2:	d120      	bne.n	80034f6 <UART_SetConfig+0x1d2>
 80034b4:	4b56      	ldr	r3, [pc, #344]	; (8003610 <UART_SetConfig+0x2ec>)
 80034b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034ba:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80034be:	2bc0      	cmp	r3, #192	; 0xc0
 80034c0:	d013      	beq.n	80034ea <UART_SetConfig+0x1c6>
 80034c2:	2bc0      	cmp	r3, #192	; 0xc0
 80034c4:	d814      	bhi.n	80034f0 <UART_SetConfig+0x1cc>
 80034c6:	2b80      	cmp	r3, #128	; 0x80
 80034c8:	d009      	beq.n	80034de <UART_SetConfig+0x1ba>
 80034ca:	2b80      	cmp	r3, #128	; 0x80
 80034cc:	d810      	bhi.n	80034f0 <UART_SetConfig+0x1cc>
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d002      	beq.n	80034d8 <UART_SetConfig+0x1b4>
 80034d2:	2b40      	cmp	r3, #64	; 0x40
 80034d4:	d006      	beq.n	80034e4 <UART_SetConfig+0x1c0>
 80034d6:	e00b      	b.n	80034f0 <UART_SetConfig+0x1cc>
 80034d8:	2300      	movs	r3, #0
 80034da:	76fb      	strb	r3, [r7, #27]
 80034dc:	e063      	b.n	80035a6 <UART_SetConfig+0x282>
 80034de:	2302      	movs	r3, #2
 80034e0:	76fb      	strb	r3, [r7, #27]
 80034e2:	e060      	b.n	80035a6 <UART_SetConfig+0x282>
 80034e4:	2304      	movs	r3, #4
 80034e6:	76fb      	strb	r3, [r7, #27]
 80034e8:	e05d      	b.n	80035a6 <UART_SetConfig+0x282>
 80034ea:	2308      	movs	r3, #8
 80034ec:	76fb      	strb	r3, [r7, #27]
 80034ee:	e05a      	b.n	80035a6 <UART_SetConfig+0x282>
 80034f0:	2310      	movs	r3, #16
 80034f2:	76fb      	strb	r3, [r7, #27]
 80034f4:	e057      	b.n	80035a6 <UART_SetConfig+0x282>
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	4a49      	ldr	r2, [pc, #292]	; (8003620 <UART_SetConfig+0x2fc>)
 80034fc:	4293      	cmp	r3, r2
 80034fe:	d125      	bne.n	800354c <UART_SetConfig+0x228>
 8003500:	4b43      	ldr	r3, [pc, #268]	; (8003610 <UART_SetConfig+0x2ec>)
 8003502:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003506:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800350a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800350e:	d017      	beq.n	8003540 <UART_SetConfig+0x21c>
 8003510:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003514:	d817      	bhi.n	8003546 <UART_SetConfig+0x222>
 8003516:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800351a:	d00b      	beq.n	8003534 <UART_SetConfig+0x210>
 800351c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003520:	d811      	bhi.n	8003546 <UART_SetConfig+0x222>
 8003522:	2b00      	cmp	r3, #0
 8003524:	d003      	beq.n	800352e <UART_SetConfig+0x20a>
 8003526:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800352a:	d006      	beq.n	800353a <UART_SetConfig+0x216>
 800352c:	e00b      	b.n	8003546 <UART_SetConfig+0x222>
 800352e:	2300      	movs	r3, #0
 8003530:	76fb      	strb	r3, [r7, #27]
 8003532:	e038      	b.n	80035a6 <UART_SetConfig+0x282>
 8003534:	2302      	movs	r3, #2
 8003536:	76fb      	strb	r3, [r7, #27]
 8003538:	e035      	b.n	80035a6 <UART_SetConfig+0x282>
 800353a:	2304      	movs	r3, #4
 800353c:	76fb      	strb	r3, [r7, #27]
 800353e:	e032      	b.n	80035a6 <UART_SetConfig+0x282>
 8003540:	2308      	movs	r3, #8
 8003542:	76fb      	strb	r3, [r7, #27]
 8003544:	e02f      	b.n	80035a6 <UART_SetConfig+0x282>
 8003546:	2310      	movs	r3, #16
 8003548:	76fb      	strb	r3, [r7, #27]
 800354a:	e02c      	b.n	80035a6 <UART_SetConfig+0x282>
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	4a2d      	ldr	r2, [pc, #180]	; (8003608 <UART_SetConfig+0x2e4>)
 8003552:	4293      	cmp	r3, r2
 8003554:	d125      	bne.n	80035a2 <UART_SetConfig+0x27e>
 8003556:	4b2e      	ldr	r3, [pc, #184]	; (8003610 <UART_SetConfig+0x2ec>)
 8003558:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800355c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003560:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003564:	d017      	beq.n	8003596 <UART_SetConfig+0x272>
 8003566:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800356a:	d817      	bhi.n	800359c <UART_SetConfig+0x278>
 800356c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003570:	d00b      	beq.n	800358a <UART_SetConfig+0x266>
 8003572:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003576:	d811      	bhi.n	800359c <UART_SetConfig+0x278>
 8003578:	2b00      	cmp	r3, #0
 800357a:	d003      	beq.n	8003584 <UART_SetConfig+0x260>
 800357c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003580:	d006      	beq.n	8003590 <UART_SetConfig+0x26c>
 8003582:	e00b      	b.n	800359c <UART_SetConfig+0x278>
 8003584:	2300      	movs	r3, #0
 8003586:	76fb      	strb	r3, [r7, #27]
 8003588:	e00d      	b.n	80035a6 <UART_SetConfig+0x282>
 800358a:	2302      	movs	r3, #2
 800358c:	76fb      	strb	r3, [r7, #27]
 800358e:	e00a      	b.n	80035a6 <UART_SetConfig+0x282>
 8003590:	2304      	movs	r3, #4
 8003592:	76fb      	strb	r3, [r7, #27]
 8003594:	e007      	b.n	80035a6 <UART_SetConfig+0x282>
 8003596:	2308      	movs	r3, #8
 8003598:	76fb      	strb	r3, [r7, #27]
 800359a:	e004      	b.n	80035a6 <UART_SetConfig+0x282>
 800359c:	2310      	movs	r3, #16
 800359e:	76fb      	strb	r3, [r7, #27]
 80035a0:	e001      	b.n	80035a6 <UART_SetConfig+0x282>
 80035a2:	2310      	movs	r3, #16
 80035a4:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	4a17      	ldr	r2, [pc, #92]	; (8003608 <UART_SetConfig+0x2e4>)
 80035ac:	4293      	cmp	r3, r2
 80035ae:	f040 8087 	bne.w	80036c0 <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80035b2:	7efb      	ldrb	r3, [r7, #27]
 80035b4:	2b08      	cmp	r3, #8
 80035b6:	d837      	bhi.n	8003628 <UART_SetConfig+0x304>
 80035b8:	a201      	add	r2, pc, #4	; (adr r2, 80035c0 <UART_SetConfig+0x29c>)
 80035ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035be:	bf00      	nop
 80035c0:	080035e5 	.word	0x080035e5
 80035c4:	08003629 	.word	0x08003629
 80035c8:	080035ed 	.word	0x080035ed
 80035cc:	08003629 	.word	0x08003629
 80035d0:	080035f3 	.word	0x080035f3
 80035d4:	08003629 	.word	0x08003629
 80035d8:	08003629 	.word	0x08003629
 80035dc:	08003629 	.word	0x08003629
 80035e0:	080035fb 	.word	0x080035fb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80035e4:	f7fe fea2 	bl	800232c <HAL_RCC_GetPCLK1Freq>
 80035e8:	6178      	str	r0, [r7, #20]
        break;
 80035ea:	e022      	b.n	8003632 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80035ec:	4b0d      	ldr	r3, [pc, #52]	; (8003624 <UART_SetConfig+0x300>)
 80035ee:	617b      	str	r3, [r7, #20]
        break;
 80035f0:	e01f      	b.n	8003632 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80035f2:	f7fe fe03 	bl	80021fc <HAL_RCC_GetSysClockFreq>
 80035f6:	6178      	str	r0, [r7, #20]
        break;
 80035f8:	e01b      	b.n	8003632 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80035fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80035fe:	617b      	str	r3, [r7, #20]
        break;
 8003600:	e017      	b.n	8003632 <UART_SetConfig+0x30e>
 8003602:	bf00      	nop
 8003604:	efff69f3 	.word	0xefff69f3
 8003608:	40008000 	.word	0x40008000
 800360c:	40013800 	.word	0x40013800
 8003610:	40021000 	.word	0x40021000
 8003614:	40004400 	.word	0x40004400
 8003618:	40004800 	.word	0x40004800
 800361c:	40004c00 	.word	0x40004c00
 8003620:	40005000 	.word	0x40005000
 8003624:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8003628:	2300      	movs	r3, #0
 800362a:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800362c:	2301      	movs	r3, #1
 800362e:	76bb      	strb	r3, [r7, #26]
        break;
 8003630:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003632:	697b      	ldr	r3, [r7, #20]
 8003634:	2b00      	cmp	r3, #0
 8003636:	f000 80f1 	beq.w	800381c <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	685a      	ldr	r2, [r3, #4]
 800363e:	4613      	mov	r3, r2
 8003640:	005b      	lsls	r3, r3, #1
 8003642:	4413      	add	r3, r2
 8003644:	697a      	ldr	r2, [r7, #20]
 8003646:	429a      	cmp	r2, r3
 8003648:	d305      	bcc.n	8003656 <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	685b      	ldr	r3, [r3, #4]
 800364e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003650:	697a      	ldr	r2, [r7, #20]
 8003652:	429a      	cmp	r2, r3
 8003654:	d902      	bls.n	800365c <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 8003656:	2301      	movs	r3, #1
 8003658:	76bb      	strb	r3, [r7, #26]
 800365a:	e0df      	b.n	800381c <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800365c:	697b      	ldr	r3, [r7, #20]
 800365e:	4618      	mov	r0, r3
 8003660:	f04f 0100 	mov.w	r1, #0
 8003664:	f04f 0200 	mov.w	r2, #0
 8003668:	f04f 0300 	mov.w	r3, #0
 800366c:	020b      	lsls	r3, r1, #8
 800366e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8003672:	0202      	lsls	r2, r0, #8
 8003674:	6879      	ldr	r1, [r7, #4]
 8003676:	6849      	ldr	r1, [r1, #4]
 8003678:	0849      	lsrs	r1, r1, #1
 800367a:	4608      	mov	r0, r1
 800367c:	f04f 0100 	mov.w	r1, #0
 8003680:	1814      	adds	r4, r2, r0
 8003682:	eb43 0501 	adc.w	r5, r3, r1
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	685b      	ldr	r3, [r3, #4]
 800368a:	461a      	mov	r2, r3
 800368c:	f04f 0300 	mov.w	r3, #0
 8003690:	4620      	mov	r0, r4
 8003692:	4629      	mov	r1, r5
 8003694:	f7fc fd98 	bl	80001c8 <__aeabi_uldivmod>
 8003698:	4602      	mov	r2, r0
 800369a:	460b      	mov	r3, r1
 800369c:	4613      	mov	r3, r2
 800369e:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80036a0:	693b      	ldr	r3, [r7, #16]
 80036a2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80036a6:	d308      	bcc.n	80036ba <UART_SetConfig+0x396>
 80036a8:	693b      	ldr	r3, [r7, #16]
 80036aa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80036ae:	d204      	bcs.n	80036ba <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	693a      	ldr	r2, [r7, #16]
 80036b6:	60da      	str	r2, [r3, #12]
 80036b8:	e0b0      	b.n	800381c <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 80036ba:	2301      	movs	r3, #1
 80036bc:	76bb      	strb	r3, [r7, #26]
 80036be:	e0ad      	b.n	800381c <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	69db      	ldr	r3, [r3, #28]
 80036c4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80036c8:	d15c      	bne.n	8003784 <UART_SetConfig+0x460>
  {
    switch (clocksource)
 80036ca:	7efb      	ldrb	r3, [r7, #27]
 80036cc:	2b08      	cmp	r3, #8
 80036ce:	d828      	bhi.n	8003722 <UART_SetConfig+0x3fe>
 80036d0:	a201      	add	r2, pc, #4	; (adr r2, 80036d8 <UART_SetConfig+0x3b4>)
 80036d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036d6:	bf00      	nop
 80036d8:	080036fd 	.word	0x080036fd
 80036dc:	08003705 	.word	0x08003705
 80036e0:	0800370d 	.word	0x0800370d
 80036e4:	08003723 	.word	0x08003723
 80036e8:	08003713 	.word	0x08003713
 80036ec:	08003723 	.word	0x08003723
 80036f0:	08003723 	.word	0x08003723
 80036f4:	08003723 	.word	0x08003723
 80036f8:	0800371b 	.word	0x0800371b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80036fc:	f7fe fe16 	bl	800232c <HAL_RCC_GetPCLK1Freq>
 8003700:	6178      	str	r0, [r7, #20]
        break;
 8003702:	e013      	b.n	800372c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003704:	f7fe fe28 	bl	8002358 <HAL_RCC_GetPCLK2Freq>
 8003708:	6178      	str	r0, [r7, #20]
        break;
 800370a:	e00f      	b.n	800372c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800370c:	4b49      	ldr	r3, [pc, #292]	; (8003834 <UART_SetConfig+0x510>)
 800370e:	617b      	str	r3, [r7, #20]
        break;
 8003710:	e00c      	b.n	800372c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003712:	f7fe fd73 	bl	80021fc <HAL_RCC_GetSysClockFreq>
 8003716:	6178      	str	r0, [r7, #20]
        break;
 8003718:	e008      	b.n	800372c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800371a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800371e:	617b      	str	r3, [r7, #20]
        break;
 8003720:	e004      	b.n	800372c <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8003722:	2300      	movs	r3, #0
 8003724:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003726:	2301      	movs	r3, #1
 8003728:	76bb      	strb	r3, [r7, #26]
        break;
 800372a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800372c:	697b      	ldr	r3, [r7, #20]
 800372e:	2b00      	cmp	r3, #0
 8003730:	d074      	beq.n	800381c <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003732:	697b      	ldr	r3, [r7, #20]
 8003734:	005a      	lsls	r2, r3, #1
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	685b      	ldr	r3, [r3, #4]
 800373a:	085b      	lsrs	r3, r3, #1
 800373c:	441a      	add	r2, r3
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	685b      	ldr	r3, [r3, #4]
 8003742:	fbb2 f3f3 	udiv	r3, r2, r3
 8003746:	b29b      	uxth	r3, r3
 8003748:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800374a:	693b      	ldr	r3, [r7, #16]
 800374c:	2b0f      	cmp	r3, #15
 800374e:	d916      	bls.n	800377e <UART_SetConfig+0x45a>
 8003750:	693b      	ldr	r3, [r7, #16]
 8003752:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003756:	d212      	bcs.n	800377e <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003758:	693b      	ldr	r3, [r7, #16]
 800375a:	b29b      	uxth	r3, r3
 800375c:	f023 030f 	bic.w	r3, r3, #15
 8003760:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003762:	693b      	ldr	r3, [r7, #16]
 8003764:	085b      	lsrs	r3, r3, #1
 8003766:	b29b      	uxth	r3, r3
 8003768:	f003 0307 	and.w	r3, r3, #7
 800376c:	b29a      	uxth	r2, r3
 800376e:	89fb      	ldrh	r3, [r7, #14]
 8003770:	4313      	orrs	r3, r2
 8003772:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	89fa      	ldrh	r2, [r7, #14]
 800377a:	60da      	str	r2, [r3, #12]
 800377c:	e04e      	b.n	800381c <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 800377e:	2301      	movs	r3, #1
 8003780:	76bb      	strb	r3, [r7, #26]
 8003782:	e04b      	b.n	800381c <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003784:	7efb      	ldrb	r3, [r7, #27]
 8003786:	2b08      	cmp	r3, #8
 8003788:	d827      	bhi.n	80037da <UART_SetConfig+0x4b6>
 800378a:	a201      	add	r2, pc, #4	; (adr r2, 8003790 <UART_SetConfig+0x46c>)
 800378c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003790:	080037b5 	.word	0x080037b5
 8003794:	080037bd 	.word	0x080037bd
 8003798:	080037c5 	.word	0x080037c5
 800379c:	080037db 	.word	0x080037db
 80037a0:	080037cb 	.word	0x080037cb
 80037a4:	080037db 	.word	0x080037db
 80037a8:	080037db 	.word	0x080037db
 80037ac:	080037db 	.word	0x080037db
 80037b0:	080037d3 	.word	0x080037d3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80037b4:	f7fe fdba 	bl	800232c <HAL_RCC_GetPCLK1Freq>
 80037b8:	6178      	str	r0, [r7, #20]
        break;
 80037ba:	e013      	b.n	80037e4 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80037bc:	f7fe fdcc 	bl	8002358 <HAL_RCC_GetPCLK2Freq>
 80037c0:	6178      	str	r0, [r7, #20]
        break;
 80037c2:	e00f      	b.n	80037e4 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80037c4:	4b1b      	ldr	r3, [pc, #108]	; (8003834 <UART_SetConfig+0x510>)
 80037c6:	617b      	str	r3, [r7, #20]
        break;
 80037c8:	e00c      	b.n	80037e4 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80037ca:	f7fe fd17 	bl	80021fc <HAL_RCC_GetSysClockFreq>
 80037ce:	6178      	str	r0, [r7, #20]
        break;
 80037d0:	e008      	b.n	80037e4 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80037d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80037d6:	617b      	str	r3, [r7, #20]
        break;
 80037d8:	e004      	b.n	80037e4 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 80037da:	2300      	movs	r3, #0
 80037dc:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80037de:	2301      	movs	r3, #1
 80037e0:	76bb      	strb	r3, [r7, #26]
        break;
 80037e2:	bf00      	nop
    }

    if (pclk != 0U)
 80037e4:	697b      	ldr	r3, [r7, #20]
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d018      	beq.n	800381c <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	685b      	ldr	r3, [r3, #4]
 80037ee:	085a      	lsrs	r2, r3, #1
 80037f0:	697b      	ldr	r3, [r7, #20]
 80037f2:	441a      	add	r2, r3
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	685b      	ldr	r3, [r3, #4]
 80037f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80037fc:	b29b      	uxth	r3, r3
 80037fe:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003800:	693b      	ldr	r3, [r7, #16]
 8003802:	2b0f      	cmp	r3, #15
 8003804:	d908      	bls.n	8003818 <UART_SetConfig+0x4f4>
 8003806:	693b      	ldr	r3, [r7, #16]
 8003808:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800380c:	d204      	bcs.n	8003818 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	693a      	ldr	r2, [r7, #16]
 8003814:	60da      	str	r2, [r3, #12]
 8003816:	e001      	b.n	800381c <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8003818:	2301      	movs	r3, #1
 800381a:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	2200      	movs	r2, #0
 8003820:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	2200      	movs	r2, #0
 8003826:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003828:	7ebb      	ldrb	r3, [r7, #26]
}
 800382a:	4618      	mov	r0, r3
 800382c:	3720      	adds	r7, #32
 800382e:	46bd      	mov	sp, r7
 8003830:	bdb0      	pop	{r4, r5, r7, pc}
 8003832:	bf00      	nop
 8003834:	00f42400 	.word	0x00f42400

08003838 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003838:	b480      	push	{r7}
 800383a:	b083      	sub	sp, #12
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003844:	f003 0301 	and.w	r3, r3, #1
 8003848:	2b00      	cmp	r3, #0
 800384a:	d00a      	beq.n	8003862 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	685b      	ldr	r3, [r3, #4]
 8003852:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	430a      	orrs	r2, r1
 8003860:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003866:	f003 0302 	and.w	r3, r3, #2
 800386a:	2b00      	cmp	r3, #0
 800386c:	d00a      	beq.n	8003884 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	685b      	ldr	r3, [r3, #4]
 8003874:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	430a      	orrs	r2, r1
 8003882:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003888:	f003 0304 	and.w	r3, r3, #4
 800388c:	2b00      	cmp	r3, #0
 800388e:	d00a      	beq.n	80038a6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	685b      	ldr	r3, [r3, #4]
 8003896:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	430a      	orrs	r2, r1
 80038a4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038aa:	f003 0308 	and.w	r3, r3, #8
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d00a      	beq.n	80038c8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	685b      	ldr	r3, [r3, #4]
 80038b8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	430a      	orrs	r2, r1
 80038c6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038cc:	f003 0310 	and.w	r3, r3, #16
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d00a      	beq.n	80038ea <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	689b      	ldr	r3, [r3, #8]
 80038da:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	430a      	orrs	r2, r1
 80038e8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038ee:	f003 0320 	and.w	r3, r3, #32
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d00a      	beq.n	800390c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	689b      	ldr	r3, [r3, #8]
 80038fc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	430a      	orrs	r2, r1
 800390a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003910:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003914:	2b00      	cmp	r3, #0
 8003916:	d01a      	beq.n	800394e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	685b      	ldr	r3, [r3, #4]
 800391e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	430a      	orrs	r2, r1
 800392c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003932:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003936:	d10a      	bne.n	800394e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	685b      	ldr	r3, [r3, #4]
 800393e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	430a      	orrs	r2, r1
 800394c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003952:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003956:	2b00      	cmp	r3, #0
 8003958:	d00a      	beq.n	8003970 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	685b      	ldr	r3, [r3, #4]
 8003960:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	430a      	orrs	r2, r1
 800396e:	605a      	str	r2, [r3, #4]
  }
}
 8003970:	bf00      	nop
 8003972:	370c      	adds	r7, #12
 8003974:	46bd      	mov	sp, r7
 8003976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397a:	4770      	bx	lr

0800397c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800397c:	b580      	push	{r7, lr}
 800397e:	b086      	sub	sp, #24
 8003980:	af02      	add	r7, sp, #8
 8003982:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	2200      	movs	r2, #0
 8003988:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800398c:	f7fd f9fe 	bl	8000d8c <HAL_GetTick>
 8003990:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f003 0308 	and.w	r3, r3, #8
 800399c:	2b08      	cmp	r3, #8
 800399e:	d10e      	bne.n	80039be <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80039a0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80039a4:	9300      	str	r3, [sp, #0]
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	2200      	movs	r2, #0
 80039aa:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80039ae:	6878      	ldr	r0, [r7, #4]
 80039b0:	f000 f82d 	bl	8003a0e <UART_WaitOnFlagUntilTimeout>
 80039b4:	4603      	mov	r3, r0
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d001      	beq.n	80039be <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80039ba:	2303      	movs	r3, #3
 80039bc:	e023      	b.n	8003a06 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f003 0304 	and.w	r3, r3, #4
 80039c8:	2b04      	cmp	r3, #4
 80039ca:	d10e      	bne.n	80039ea <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80039cc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80039d0:	9300      	str	r3, [sp, #0]
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	2200      	movs	r2, #0
 80039d6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80039da:	6878      	ldr	r0, [r7, #4]
 80039dc:	f000 f817 	bl	8003a0e <UART_WaitOnFlagUntilTimeout>
 80039e0:	4603      	mov	r3, r0
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d001      	beq.n	80039ea <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80039e6:	2303      	movs	r3, #3
 80039e8:	e00d      	b.n	8003a06 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	2220      	movs	r2, #32
 80039ee:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2220      	movs	r2, #32
 80039f4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	2200      	movs	r2, #0
 80039fa:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	2200      	movs	r2, #0
 8003a00:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003a04:	2300      	movs	r3, #0
}
 8003a06:	4618      	mov	r0, r3
 8003a08:	3710      	adds	r7, #16
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	bd80      	pop	{r7, pc}

08003a0e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003a0e:	b580      	push	{r7, lr}
 8003a10:	b084      	sub	sp, #16
 8003a12:	af00      	add	r7, sp, #0
 8003a14:	60f8      	str	r0, [r7, #12]
 8003a16:	60b9      	str	r1, [r7, #8]
 8003a18:	603b      	str	r3, [r7, #0]
 8003a1a:	4613      	mov	r3, r2
 8003a1c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003a1e:	e05e      	b.n	8003ade <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a20:	69bb      	ldr	r3, [r7, #24]
 8003a22:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003a26:	d05a      	beq.n	8003ade <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a28:	f7fd f9b0 	bl	8000d8c <HAL_GetTick>
 8003a2c:	4602      	mov	r2, r0
 8003a2e:	683b      	ldr	r3, [r7, #0]
 8003a30:	1ad3      	subs	r3, r2, r3
 8003a32:	69ba      	ldr	r2, [r7, #24]
 8003a34:	429a      	cmp	r2, r3
 8003a36:	d302      	bcc.n	8003a3e <UART_WaitOnFlagUntilTimeout+0x30>
 8003a38:	69bb      	ldr	r3, [r7, #24]
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d11b      	bne.n	8003a76 <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	681a      	ldr	r2, [r3, #0]
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003a4c:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	689a      	ldr	r2, [r3, #8]
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f022 0201 	bic.w	r2, r2, #1
 8003a5c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	2220      	movs	r2, #32
 8003a62:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	2220      	movs	r2, #32
 8003a68:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8003a72:	2303      	movs	r3, #3
 8003a74:	e043      	b.n	8003afe <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f003 0304 	and.w	r3, r3, #4
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d02c      	beq.n	8003ade <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	69db      	ldr	r3, [r3, #28]
 8003a8a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003a8e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003a92:	d124      	bne.n	8003ade <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003a9c:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	681a      	ldr	r2, [r3, #0]
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003aac:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	689a      	ldr	r2, [r3, #8]
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f022 0201 	bic.w	r2, r2, #1
 8003abc:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	2220      	movs	r2, #32
 8003ac2:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	2220      	movs	r2, #32
 8003ac8:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	2220      	movs	r2, #32
 8003ace:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	2200      	movs	r2, #0
 8003ad6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8003ada:	2303      	movs	r3, #3
 8003adc:	e00f      	b.n	8003afe <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	69da      	ldr	r2, [r3, #28]
 8003ae4:	68bb      	ldr	r3, [r7, #8]
 8003ae6:	4013      	ands	r3, r2
 8003ae8:	68ba      	ldr	r2, [r7, #8]
 8003aea:	429a      	cmp	r2, r3
 8003aec:	bf0c      	ite	eq
 8003aee:	2301      	moveq	r3, #1
 8003af0:	2300      	movne	r3, #0
 8003af2:	b2db      	uxtb	r3, r3
 8003af4:	461a      	mov	r2, r3
 8003af6:	79fb      	ldrb	r3, [r7, #7]
 8003af8:	429a      	cmp	r2, r3
 8003afa:	d091      	beq.n	8003a20 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003afc:	2300      	movs	r3, #0
}
 8003afe:	4618      	mov	r0, r3
 8003b00:	3710      	adds	r7, #16
 8003b02:	46bd      	mov	sp, r7
 8003b04:	bd80      	pop	{r7, pc}
	...

08003b08 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003b08:	b480      	push	{r7}
 8003b0a:	b085      	sub	sp, #20
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	60f8      	str	r0, [r7, #12]
 8003b10:	60b9      	str	r1, [r7, #8]
 8003b12:	4613      	mov	r3, r2
 8003b14:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	68ba      	ldr	r2, [r7, #8]
 8003b1a:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	88fa      	ldrh	r2, [r7, #6]
 8003b20:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	88fa      	ldrh	r2, [r7, #6]
 8003b28:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	2200      	movs	r2, #0
 8003b30:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	689b      	ldr	r3, [r3, #8]
 8003b36:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b3a:	d10e      	bne.n	8003b5a <UART_Start_Receive_IT+0x52>
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	691b      	ldr	r3, [r3, #16]
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d105      	bne.n	8003b50 <UART_Start_Receive_IT+0x48>
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	f240 12ff 	movw	r2, #511	; 0x1ff
 8003b4a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003b4e:	e02d      	b.n	8003bac <UART_Start_Receive_IT+0xa4>
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	22ff      	movs	r2, #255	; 0xff
 8003b54:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003b58:	e028      	b.n	8003bac <UART_Start_Receive_IT+0xa4>
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	689b      	ldr	r3, [r3, #8]
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d10d      	bne.n	8003b7e <UART_Start_Receive_IT+0x76>
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	691b      	ldr	r3, [r3, #16]
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d104      	bne.n	8003b74 <UART_Start_Receive_IT+0x6c>
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	22ff      	movs	r2, #255	; 0xff
 8003b6e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003b72:	e01b      	b.n	8003bac <UART_Start_Receive_IT+0xa4>
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	227f      	movs	r2, #127	; 0x7f
 8003b78:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003b7c:	e016      	b.n	8003bac <UART_Start_Receive_IT+0xa4>
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	689b      	ldr	r3, [r3, #8]
 8003b82:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003b86:	d10d      	bne.n	8003ba4 <UART_Start_Receive_IT+0x9c>
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	691b      	ldr	r3, [r3, #16]
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d104      	bne.n	8003b9a <UART_Start_Receive_IT+0x92>
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	227f      	movs	r2, #127	; 0x7f
 8003b94:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003b98:	e008      	b.n	8003bac <UART_Start_Receive_IT+0xa4>
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	223f      	movs	r2, #63	; 0x3f
 8003b9e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003ba2:	e003      	b.n	8003bac <UART_Start_Receive_IT+0xa4>
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	2200      	movs	r2, #0
 8003ba8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	2200      	movs	r2, #0
 8003bb0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	2222      	movs	r2, #34	; 0x22
 8003bb8:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	689a      	ldr	r2, [r3, #8]
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f042 0201 	orr.w	r2, r2, #1
 8003bc8:	609a      	str	r2, [r3, #8]
    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	689b      	ldr	r3, [r3, #8]
 8003bce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003bd2:	d107      	bne.n	8003be4 <UART_Start_Receive_IT+0xdc>
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	691b      	ldr	r3, [r3, #16]
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d103      	bne.n	8003be4 <UART_Start_Receive_IT+0xdc>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	4a0c      	ldr	r2, [pc, #48]	; (8003c10 <UART_Start_Receive_IT+0x108>)
 8003be0:	665a      	str	r2, [r3, #100]	; 0x64
 8003be2:	e002      	b.n	8003bea <UART_Start_Receive_IT+0xe2>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	4a0b      	ldr	r2, [pc, #44]	; (8003c14 <UART_Start_Receive_IT+0x10c>)
 8003be8:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	2200      	movs	r2, #0
 8003bee:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	681a      	ldr	r2, [r3, #0]
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 8003c00:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8003c02:	2300      	movs	r3, #0
}
 8003c04:	4618      	mov	r0, r3
 8003c06:	3714      	adds	r7, #20
 8003c08:	46bd      	mov	sp, r7
 8003c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0e:	4770      	bx	lr
 8003c10:	08003dad 	.word	0x08003dad
 8003c14:	08003cd5 	.word	0x08003cd5

08003c18 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003c18:	b480      	push	{r7}
 8003c1a:	b083      	sub	sp, #12
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	681a      	ldr	r2, [r3, #0]
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003c2e:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	689a      	ldr	r2, [r3, #8]
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f022 0201 	bic.w	r2, r2, #1
 8003c3e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c44:	2b01      	cmp	r3, #1
 8003c46:	d107      	bne.n	8003c58 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	681a      	ldr	r2, [r3, #0]
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f022 0210 	bic.w	r2, r2, #16
 8003c56:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2220      	movs	r2, #32
 8003c5c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	2200      	movs	r2, #0
 8003c62:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2200      	movs	r2, #0
 8003c68:	665a      	str	r2, [r3, #100]	; 0x64
}
 8003c6a:	bf00      	nop
 8003c6c:	370c      	adds	r7, #12
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c74:	4770      	bx	lr

08003c76 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003c76:	b580      	push	{r7, lr}
 8003c78:	b084      	sub	sp, #16
 8003c7a:	af00      	add	r7, sp, #0
 8003c7c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c82:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	2200      	movs	r2, #0
 8003c88:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	2200      	movs	r2, #0
 8003c90:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003c94:	68f8      	ldr	r0, [r7, #12]
 8003c96:	f7ff fb2f 	bl	80032f8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003c9a:	bf00      	nop
 8003c9c:	3710      	adds	r7, #16
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	bd80      	pop	{r7, pc}

08003ca2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003ca2:	b580      	push	{r7, lr}
 8003ca4:	b082      	sub	sp, #8
 8003ca6:	af00      	add	r7, sp, #0
 8003ca8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	681a      	ldr	r2, [r3, #0]
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003cb8:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	2220      	movs	r2, #32
 8003cbe:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	2200      	movs	r2, #0
 8003cc4:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003cc6:	6878      	ldr	r0, [r7, #4]
 8003cc8:	f7ff fb0c 	bl	80032e4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003ccc:	bf00      	nop
 8003cce:	3708      	adds	r7, #8
 8003cd0:	46bd      	mov	sp, r7
 8003cd2:	bd80      	pop	{r7, pc}

08003cd4 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8003cd4:	b580      	push	{r7, lr}
 8003cd6:	b084      	sub	sp, #16
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8003ce2:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003ce8:	2b22      	cmp	r3, #34	; 0x22
 8003cea:	d151      	bne.n	8003d90 <UART_RxISR_8BIT+0xbc>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8003cf2:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8003cf4:	89bb      	ldrh	r3, [r7, #12]
 8003cf6:	b2d9      	uxtb	r1, r3
 8003cf8:	89fb      	ldrh	r3, [r7, #14]
 8003cfa:	b2da      	uxtb	r2, r3
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d00:	400a      	ands	r2, r1
 8003d02:	b2d2      	uxtb	r2, r2
 8003d04:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d0a:	1c5a      	adds	r2, r3, #1
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003d16:	b29b      	uxth	r3, r3
 8003d18:	3b01      	subs	r3, #1
 8003d1a:	b29a      	uxth	r2, r3
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003d28:	b29b      	uxth	r3, r3
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d13a      	bne.n	8003da4 <UART_RxISR_8BIT+0xd0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	681a      	ldr	r2, [r3, #0]
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003d3c:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	689a      	ldr	r2, [r3, #8]
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f022 0201 	bic.w	r2, r2, #1
 8003d4c:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	2220      	movs	r2, #32
 8003d52:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2200      	movs	r2, #0
 8003d58:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d5e:	2b01      	cmp	r3, #1
 8003d60:	d10f      	bne.n	8003d82 <UART_RxISR_8BIT+0xae>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	681a      	ldr	r2, [r3, #0]
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f022 0210 	bic.w	r2, r2, #16
 8003d70:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003d78:	4619      	mov	r1, r3
 8003d7a:	6878      	ldr	r0, [r7, #4]
 8003d7c:	f7ff fac6 	bl	800330c <HAL_UARTEx_RxEventCallback>
 8003d80:	e002      	b.n	8003d88 <UART_RxISR_8BIT+0xb4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003d82:	6878      	ldr	r0, [r7, #4]
 8003d84:	f7fc fbf2 	bl	800056c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	2200      	movs	r2, #0
 8003d8c:	661a      	str	r2, [r3, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003d8e:	e009      	b.n	8003da4 <UART_RxISR_8BIT+0xd0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	8b1b      	ldrh	r3, [r3, #24]
 8003d96:	b29a      	uxth	r2, r3
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f042 0208 	orr.w	r2, r2, #8
 8003da0:	b292      	uxth	r2, r2
 8003da2:	831a      	strh	r2, [r3, #24]
}
 8003da4:	bf00      	nop
 8003da6:	3710      	adds	r7, #16
 8003da8:	46bd      	mov	sp, r7
 8003daa:	bd80      	pop	{r7, pc}

08003dac <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8003dac:	b580      	push	{r7, lr}
 8003dae:	b084      	sub	sp, #16
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8003dba:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003dc0:	2b22      	cmp	r3, #34	; 0x22
 8003dc2:	d151      	bne.n	8003e68 <UART_RxISR_16BIT+0xbc>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8003dca:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003dd0:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 8003dd2:	89ba      	ldrh	r2, [r7, #12]
 8003dd4:	89fb      	ldrh	r3, [r7, #14]
 8003dd6:	4013      	ands	r3, r2
 8003dd8:	b29a      	uxth	r2, r3
 8003dda:	68bb      	ldr	r3, [r7, #8]
 8003ddc:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003de2:	1c9a      	adds	r2, r3, #2
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003dee:	b29b      	uxth	r3, r3
 8003df0:	3b01      	subs	r3, #1
 8003df2:	b29a      	uxth	r2, r3
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003e00:	b29b      	uxth	r3, r3
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d13a      	bne.n	8003e7c <UART_RxISR_16BIT+0xd0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	681a      	ldr	r2, [r3, #0]
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003e14:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	689a      	ldr	r2, [r3, #8]
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f022 0201 	bic.w	r2, r2, #1
 8003e24:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	2220      	movs	r2, #32
 8003e2a:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	2200      	movs	r2, #0
 8003e30:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e36:	2b01      	cmp	r3, #1
 8003e38:	d10f      	bne.n	8003e5a <UART_RxISR_16BIT+0xae>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	681a      	ldr	r2, [r3, #0]
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f022 0210 	bic.w	r2, r2, #16
 8003e48:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003e50:	4619      	mov	r1, r3
 8003e52:	6878      	ldr	r0, [r7, #4]
 8003e54:	f7ff fa5a 	bl	800330c <HAL_UARTEx_RxEventCallback>
 8003e58:	e002      	b.n	8003e60 <UART_RxISR_16BIT+0xb4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003e5a:	6878      	ldr	r0, [r7, #4]
 8003e5c:	f7fc fb86 	bl	800056c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	2200      	movs	r2, #0
 8003e64:	661a      	str	r2, [r3, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003e66:	e009      	b.n	8003e7c <UART_RxISR_16BIT+0xd0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	8b1b      	ldrh	r3, [r3, #24]
 8003e6e:	b29a      	uxth	r2, r3
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f042 0208 	orr.w	r2, r2, #8
 8003e78:	b292      	uxth	r2, r2
 8003e7a:	831a      	strh	r2, [r3, #24]
}
 8003e7c:	bf00      	nop
 8003e7e:	3710      	adds	r7, #16
 8003e80:	46bd      	mov	sp, r7
 8003e82:	bd80      	pop	{r7, pc}

08003e84 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8003e84:	b480      	push	{r7}
 8003e86:	b083      	sub	sp, #12
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8003e8c:	bf00      	nop
 8003e8e:	370c      	adds	r7, #12
 8003e90:	46bd      	mov	sp, r7
 8003e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e96:	4770      	bx	lr

08003e98 <__libc_init_array>:
 8003e98:	b570      	push	{r4, r5, r6, lr}
 8003e9a:	4d0d      	ldr	r5, [pc, #52]	; (8003ed0 <__libc_init_array+0x38>)
 8003e9c:	4c0d      	ldr	r4, [pc, #52]	; (8003ed4 <__libc_init_array+0x3c>)
 8003e9e:	1b64      	subs	r4, r4, r5
 8003ea0:	10a4      	asrs	r4, r4, #2
 8003ea2:	2600      	movs	r6, #0
 8003ea4:	42a6      	cmp	r6, r4
 8003ea6:	d109      	bne.n	8003ebc <__libc_init_array+0x24>
 8003ea8:	4d0b      	ldr	r5, [pc, #44]	; (8003ed8 <__libc_init_array+0x40>)
 8003eaa:	4c0c      	ldr	r4, [pc, #48]	; (8003edc <__libc_init_array+0x44>)
 8003eac:	f000 f820 	bl	8003ef0 <_init>
 8003eb0:	1b64      	subs	r4, r4, r5
 8003eb2:	10a4      	asrs	r4, r4, #2
 8003eb4:	2600      	movs	r6, #0
 8003eb6:	42a6      	cmp	r6, r4
 8003eb8:	d105      	bne.n	8003ec6 <__libc_init_array+0x2e>
 8003eba:	bd70      	pop	{r4, r5, r6, pc}
 8003ebc:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ec0:	4798      	blx	r3
 8003ec2:	3601      	adds	r6, #1
 8003ec4:	e7ee      	b.n	8003ea4 <__libc_init_array+0xc>
 8003ec6:	f855 3b04 	ldr.w	r3, [r5], #4
 8003eca:	4798      	blx	r3
 8003ecc:	3601      	adds	r6, #1
 8003ece:	e7f2      	b.n	8003eb6 <__libc_init_array+0x1e>
 8003ed0:	08003f58 	.word	0x08003f58
 8003ed4:	08003f58 	.word	0x08003f58
 8003ed8:	08003f58 	.word	0x08003f58
 8003edc:	08003f5c 	.word	0x08003f5c

08003ee0 <memset>:
 8003ee0:	4402      	add	r2, r0
 8003ee2:	4603      	mov	r3, r0
 8003ee4:	4293      	cmp	r3, r2
 8003ee6:	d100      	bne.n	8003eea <memset+0xa>
 8003ee8:	4770      	bx	lr
 8003eea:	f803 1b01 	strb.w	r1, [r3], #1
 8003eee:	e7f9      	b.n	8003ee4 <memset+0x4>

08003ef0 <_init>:
 8003ef0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ef2:	bf00      	nop
 8003ef4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003ef6:	bc08      	pop	{r3}
 8003ef8:	469e      	mov	lr, r3
 8003efa:	4770      	bx	lr

08003efc <_fini>:
 8003efc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003efe:	bf00      	nop
 8003f00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f02:	bc08      	pop	{r3}
 8003f04:	469e      	mov	lr, r3
 8003f06:	4770      	bx	lr
